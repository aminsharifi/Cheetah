@using Cheetah.Core.Aggregates.ConditionAggregate.Dimentions
@using Cheetah.Core.Aggregates.ConditionAggregate.Facts
@using Cheetah.Core.Common
@inherits CUpsert_GeneralCode

<CEditDimentions Record="@Record" Records="@Records" IsInline="@IsInline"
                 Name="D_TaskPattern" Id="@Id" reference="@reference"
                 ParentCallback="@ParentCallback" Title="@Title"
                 LinkRecords="@LinkRecords">
    <RowTemplate>
        <div class="col-sm-11 col-lg-4">
            <MudSelect ReadOnly="@ReadonlyState" Label="تگ"
                       Value="(Record as F_Condition).TagId"
                       ValueChanged="(long? newValue)=>(Record as F_Condition).SetTagId(newValue)"
                       @oninput="@SelectedTagChanged">
                @foreach (var _tag in List_D_Tag)
                {
                    <MudSelectItem T="long?" Value="@_tag.Id">
                        @_tag.DisplayName
                    </MudSelectItem>
                }
            </MudSelect>
        </div>
        <div class="col-sm-11 col-lg-4">
            <MudSelect ReadOnly="@ReadonlyState"
                       Label=@(globalization.GetValue(nameof(Localization.BlazorServer_Operand)))
                       Value="(Record as F_Condition).OperandId"
                       ValueChanged="(long? newValue)=>(Record as F_Condition).SetOperandId(newValue)"
                       @oninput="@SelectedOperandChanged">
                @foreach (var _operand in List_D_Operand)
                {
                    <MudSelectItem T="long?" Value="@_operand.Id">
                        @_operand.DisplayName
                    </MudSelectItem>
                }
            </MudSelect>
        </div>
        @switch ((Record as F_Condition)?.Tag?.TagTypeId)
        {
            case var _string when _string == D_TagType.String.Id:
                <div class="col-sm-11 col-lg-4">
                    <MudInput ReadOnly="@ReadonlyState"
                              Label=@(globalization.GetValue(nameof(Localization.BlazorServer_CellValue)))
                              Value="(Record as F_Condition)?.Value"
                              ValueChanged="(string? newValue)=>(Record as F_Condition)?.SetValue(newValue)"></MudInput>
                </div>
                break;
        }

        <div class="col-sm-11 col-lg-4">
            <MudSwitch ReadOnly="@ReadonlyState"
                       Label="وضعیت تایید"
                       Value="(Record as F_Condition)?.ApproveState"
                       ValueChanged="(Boolean? newValue)=>(Record as F_Condition)?.SetApproveState(newValue.Value)"
                       Color="Color.Tertiary"></MudSwitch>
        </div>

        @*@switch ((Record as F_Condition)?.Tag?.TagTypeId)
        {
        case var _boolean when _boolean == D_TagType.Boolean.Id:
        <CInput CFieldType="@(Core.Enums.FieldType.CBool)"
        @bind-BValue="(Record as F_Condition).PublicBooleanValue"
        CDescription=@(globalization.GetValue(nameof(Localization.BlazorServer_CellValue)))
        CDisplayName=@(globalization.GetValue(nameof(Localization.BlazorServer_CellValue)))
        reference="@reference"></CInput>
        break;
        case var _string when _string == D_TagType.String.Id:
        <CInput CFieldType="@(Core.Enums.FieldType.CString)"
        @bind-SValue="(Record as F_Condition).PublicValue"
        CDescription=@(globalization.GetValue(nameof(Localization.BlazorServer_CellValue)))
        CDisplayName=@(globalization.GetValue(nameof(Localization.BlazorServer_CellValue)))
        reference="@reference"></CInput>
        break;
        case var _numberic when _numberic == D_TagType.Numberic.Id:
        <CInput CFieldType="@(Core.Enums.FieldType.CNFloat)"
        @bind-NFValue="(Record as F_Condition).PublicFloatValue"
        CDescription=@(globalization.GetValue(nameof(Localization.BlazorServer_CellValue)))
        CDisplayName=@(globalization.GetValue(nameof(Localization.BlazorServer_CellValue)))
        reference="@reference"></CInput>
        break;
        case var _date when _date == D_TagType.Date.Id:
        <CInput CFieldType="@(Core.Enums.FieldType.CDate)"
        @bind-CDateTime="(Record as F_Condition).PublicDateTimeOffsetValue"
        CDescription=@(globalization.GetValue(nameof(Localization.BlazorServer_CellValue)))
        CDisplayName=@(globalization.GetValue(nameof(Localization.BlazorServer_CellValue)))
        reference="@reference"></CInput>
        break;
        }

        *@
    </RowTemplate>
</CEditDimentions>
@code {

    public IEnumerable<BaseEntity> List_D_Tag { get; set; }
    public IEnumerable<BaseEntity> List_D_Operand { get; set; }
    public Int64? TagTypeId = D_TagType.String.Id;

    public override async Task ExtendedLoadDTO()
    {
        List_D_Tag = await simpleClassRepository.GetAllByNameAsync(nameof(D_Tag));
        List_D_Operand = await simpleClassRepository.GetAllByNameAsync(nameof(D_Operand));
    }

    private async Task SelectedOperandChanged(ChangeEventArgs e)
    {
        if (e.Value is not null)
        {
            var _operandId = Int64.Parse(e.Value.ToString());
            (Record as F_Condition).SetOperandId(_operandId);
            TagTypeId = D_TagType.String.Id;
        }
    }

    private async Task SelectedTagChanged(ChangeEventArgs e)
    {
        if (e.Value is not null)
        {
            var _tagId = Int64.Parse(e.Value.ToString());
            (Record as F_Condition).SetTagId(_tagId);
        }
    }
}
