@page "/List"
@page "/List/{Name}"
@page "/List/{Name}/{reference}"
@page "/List/{Name}/{FilterTableName}/{Id:long}/{reference}"
@using Cheetah.Core.Aggregates.Common.Dimentions
@using Cheetah.Core.Common
@using Cheetah.Core.Enums
@using Cheetah.Presentation.Web.Blazor.Server.Components.Shared
@using Cheetah.Sample.Presentation.Web.Blazor.Server.Components.Shared
@using Cheetah.Presentation.Web.Blazor.Server.Resx
@using DNTPersianUtils.Core
@using MudBlazor
@using BlazorServerResource = Cheetah.Presentation.Web.Blazor.Server.Resx.Localization
@inherits SharedPage
<NavigationComponent _CNavigation="@_CNavigation"></NavigationComponent>

<div class="row">

    @if (!IsLoading)
    {
        <div class="col-lg-5 col-sm-9">
            <MudSelect Label=@(globalization.GetValue(nameof(BlazorServerResource.BlazorServer_SelectParameter) ))
                       HelperText=@(globalization.GetValue(nameof(BlazorServerResource.BlazorServer_SelectParameter) ))
                       AnchorOrigin="Origin.BottomCenter" AdornmentColor="Color.Primary"
                       AdornmentIcon="@Icons.Material.Filled.Settings"
                       @bind-Value="SelectedName" T="KeyValuePair<String, String>">
                @foreach (var _keyValuePair in keyValuePair)
                {
                    <MudSelectItem T="KeyValuePair<String, String>" Value="@_keyValuePair">@_keyValuePair.Value</MudSelectItem>
                }
            </MudSelect>
        </div>
        <div class="col-lg-1 col-sm-3">
            @if (Sync != true && type != nameof(LinkProperty.First) && type != nameof(LinkProperty.Second))
            {
                <MudFab Color="Color.Primary" StartIcon="@Icons.Material.Filled.Add"
                        OnClick="Addnew"
                        Label=@(globalization.GetValue(nameof(BlazorServerResource.BlazorServer_Add) )) />
            }
        </div>
        <div class="col-lg-1 col-sm-3">
            @*   <MudCheckBox Label="سینک"
        Value="Record.Sync"
        ReadOnly="true"
        Color="Color.Primary"
        CheckedIcon="@Icons.Material.Filled.Verified"
        UnCheckedColor="Color.Error"
        UncheckedIcon="@Icons.Material.Filled.DoNotDisturb"></MudCheckBox> *@
        </div>

        @if (Sync is true)
        {
            <SyncStateComponent color="@(_color)" getLastModified="GetLastModified"
                                lastModified="@(LastModified)"
                                enableRecord="((D_Entity)Record).EnableRecord">

            </SyncStateComponent>

        }
    }

    @if (!String.IsNullOrEmpty(Name))
    {
        @if (false)
        {
            <div class="shadow rounded p-3 form-group my-2 col-sm-12 col-md-6">
                <div class="input-group d-flex justify-content-end" style="direction:ltr">
                    <span class="form-control"> @(keyValuePair.Where(x => x.Key == FilterTableName).Single().Value + ":" + Record.DisplayName)</span>
                    <div class="input-group-prepend">
                        <span class="input-group-text" style="border-radius:revert;width: 7em;font-size:large;"
                              lang="fa" dir="rtl">
                            @(globalization.GetValue(nameof(BlazorServerResource.BlazorServer_Filter)))
                        </span>
                    </div>
                </div>
            </div>
        }

        <ListGenericTypeItems Records="@Records"
                              reference="@reference" Name="@Name" Sync="@Sync"
                              ParentCallback="UpdateForm" LoadData="@LoadData"
                              type="@type" @ref="listGenericTypeItems">
        </ListGenericTypeItems>
    }
</div>

<CLoading IsLoading="@IsLoading" AnyRecord="@Records.Any()"></CLoading>
@code {
    List<BaseEntity> _d_Entity = new();
    DateTimeOffset? LastModified;
    Color _color = Color.Default;

    protected override async Task OnParametersSetAsync()
    {
        await FirstLoadRecords();

        if (reference is null)
        {
            _CNavigation.NavigationList.Clear();

            var Value = keyValuePair.Where(x => x.Key == Name).First().Value;

            reference = _CNavigation.LoadNavigation(Address: $"List/{Name}", RowDescription: Value,
            RowId: Id, Reference: reference);

            IsLoading = false;
        }
    }

    private void SetLastModified()
    {
        if (LastModified.HasValue)
        {
            var _sDate = DateTimeOffset.Now.Subtract(LastModified.Value).Minutes;

            switch (_sDate)
            {
                case < 1:
                    _color = Color.Success;
                    break;
                case < 5:
                    _color = Color.Warning;
                    break;
                default:
                    _color = Color.Error;
                    break;
            }
        }
    }

    public async Task GetLastModified()
    {
        if (!String.IsNullOrEmpty(Name))
        {
            LastModified = await simpleClassRepository.GetLastUpdate(Name);
            SetLastModified();
        }
    }

    async Task Addnew()
    {
        listGenericTypeItems.PrepareLink(0, CrudOperation.Create);
        LoadData = true;
    }

    public KeyValuePair<String, String> SelectedName
    {
        get
        {
            return (Name is null) ? new KeyValuePair<String, String>() :
             keyValuePair.Single(x => x.Key == Name);
        }
        set
        {
            Name = value.Key;
            _NavigationManager.NavigateTo($"/List/{Name}");
            FirstLoadRecords().GetAwaiter().GetResult();
        }
    }

    private async Task<IEnumerable<KeyValuePair<String, String>>> Search(string value)
    {
        // In real life use an asynchronous function for fetching data from an api.
        await Task.Delay(50);

        // if text is null or empty, show complete list
        if (string.IsNullOrEmpty(value))
        {
            return keyValuePair;
        }
        return keyValuePair
        .Where(x => x.Value.Contains(value, StringComparison.InvariantCultureIgnoreCase));
    }

    private ListGenericTypeItems listGenericTypeItems;

    private async Task FirstLoadRecords()
    {
        var _entities = await simpleClassRepository
        .GetAllByNameAsync(nameof(D_Entity));

        _d_Entity = _entities
        .Where(x => ((D_Entity)x).Display == true)
        .ToList();

        keyValuePair.Clear();

        keyValuePair = _d_Entity
          .Select(item => new KeyValuePair<string, string>
              (item.Name, item.DisplayName!)).ToDictionary();

        if (Name == null)
        {
            Name = keyValuePair.First().Key;
            Sync = (_d_Entity.First() as D_Entity)!.Sync;
            _NavigationManager.NavigateTo($"/List/{Name}");
        }
        await LoadRecords();
    }

    private async Task LoadRecords()
    {
        try
        {
            LoadData = false;

            Record = _d_Entity
            .Where(x => x.Name == Name)
            .First();

            LastModified = Record.LastModified;

            SetLastModified();

            Sync = ((D_Entity)Record).Sync;

            Records = await simpleClassRepository.GetAllByNameAsync(Name);

            if (!String.IsNullOrEmpty(FilterTableName))
                Record = await simpleClassRepository.GetAsync(FilterTableName, Id);
        }
        catch (Exception ex)
        {
            Snackbar.Add((ex.InnerException is not null) ? ex.InnerException.Message : ex.Message, Severity.Error);
        }
    }

    public async Task UpdateForm()
    {
        IsLoading = true;
        await LoadRecords();
        IsLoading = false;
        await _JSRuntime.InvokeVoidAsync("CreateToolTip", "Create");
    }

}