@page "/AI"
@attribute [Authorize]
@inherits MyComponentBase
@using BlazorServerResource = Cheetah.Presentation.Web.Blazor.Server.Resx.Localization
@using Cheetah.Sample.Presentation.Web.Blazor.Server.AI
@using Ganss.Xss
@using Markdig
@using Microsoft.SemanticKernel
@using Microsoft.SemanticKernel.ChatCompletion
@using Microsoft.SemanticKernel.Connectors.OpenAI
@inject IJSRuntime JSRuntime;
@inject IChatCompletionService ChatCompletionService
@inject Kernel kernel;
@inject NavigationManager navigationManager
@inject IConfiguration Configuration

@if (bool.Parse(@Configuration["AI:Enable"]!))
{
    <PageTitle>دستیار هوشمند</PageTitle>
    <MudContainer Class="mt-12">
        <MudCard>
            <MudCardContent>
                <MudForm>
                    <MudTextField lang="fa" @bind-Value="userInput" Label="پرسش شما"
                                  OnKeyDown="HandleKeyDown" @ref="_MudTextField" TextChanged="InputTextChanged"
                                  Clearable="true" Immediate="true" Disabled="disableSubmit"
                                  MultiLine="true" Rows="5" Variant="Variant.Outlined" />
                    <MudButton OnClick="SendMessage" Disabled="disableSubmit"
                               Color="Color.Primary" Variant="Variant.Filled" Class="mt-2">
                        ارسال
                    </MudButton>
                </MudForm>
                @if (_hTMLResponse.Length > 0)
                {
                    <br />
                    <hr />
                    <MudText Typo="Typo.h6">پرسش:</MudText>
                    <MudText Typo="Typo.body1">@question</MudText>
                    <br />
                    <MudText Typo="Typo.h6">پاسخ:</MudText>
                    @* <MudText Typo="Typo.body2">@_aIResponse</MudText> *@
                    <div> @((MarkupString)_hTMLResponse)</div>
                }
            </MudCardContent>
        </MudCard>
    </MudContainer>
    <style>
        table {
            border-collapse: collapse;
            width: 100%;
            direction: rtl; /* Set the direction to right-to-left */
        }

        th, td {
            border: 1px solid black;
            padding: 8px;
            text-align: right; /* Optional: Align text to the left */
        }

        th {
            background-color: #f2f2f2; /* Optional: Add background color to headers */
        }
    </style>
}
@code {
    private string userInput = String.Empty;
    private string question = String.Empty;
    ChatHistory _chathistory = new();
    String _aIResponse = String.Empty;
    String _hTMLResponse = String.Empty;
    bool disableSubmit = false;
    public List<UserGuideItem>? items = new();
    private MudTextField<string> _MudTextField = new();
    private async Task InputTextChanged(string value)
    {
        if (!String.IsNullOrEmpty(value) && value.TrimEnd().EndsWith("ارسال"))
        {
            await SendMessage();
            await _MudTextField.Clear();
            await _MudTextField.FocusAsync();
        }
    }
    OpenAIPromptExecutionSettings executionSettings = new OpenAIPromptExecutionSettings
        {
            Temperature = 0.0,
            TopP = 1,
            Seed = 0
        };
    private async Task HandleKeyDown(KeyboardEventArgs e)
    {
        // Check if the Enter key was pressed
        if (e.Key == "Enter")
        {
            await SendMessage();
            await _MudTextField.Clear();
            await _MudTextField.FocusAsync();
        }
    }
    protected async override Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            items = await GetAllItems();
            foreach (var item in items)
            {
                _chathistory.AddSystemMessage(nameof(item.Subject) + ":" + item.Subject + "\n" +
                nameof(item.Description) + ":" + item.Description + "\n" +
                nameof(item.Keywords) + ":" + item.Keywords + "\n" +
                nameof(item.Body) + ":" + item.Body + "\n"
                );
            }
            _chathistory.AddSystemMessage("Only respond using the information from my previous system messages. Your answers should be highly accurate and focus solely on that information.");
            // StateHasChanged();
        }
        await _MudTextField.FocusAsync();
    }
    private async Task SendMessage()
    {
        if (!string.IsNullOrWhiteSpace(userInput))
        {
            userInput = userInput.TrimEnd("ارسال".ToCharArray());
            question = userInput;
            disableSubmit = true;
            _aIResponse = String.Empty;
            _chathistory.AddUserMessage(question);

            // var response = await ChatCompletionService.GetChatMessageContentsAsync(
            //     chatHistory: _chathistory,
            //     kernel: kernel,
            //     executionSettings: executionSettings);

            var response = ChatCompletionService
            .GetStreamingChatMessageContentsAsync(
                chatHistory: _chathistory,
                executionSettings: executionSettings
            );

            var pipeline = new MarkdownPipelineBuilder()
            .UseAdvancedExtensions() // This includes the table extension
            .Build();

            await foreach (var chunk in response)
            {
                _aIResponse += chunk;
                _hTMLResponse = Markdown.ToHtml(_aIResponse, pipeline);
                // Sanitize the HTML
                // var sanitizer = new HtmlSanitizer();
                // _hTMLResponse = sanitizer.Sanitize(html);
                StateHasChanged();
            }

            _hTMLResponse = Markdown.ToHtml(_aIResponse, pipeline);
            // StateHasChanged();
            _chathistory.AddAssistantMessage(_aIResponse);
            userInput = String.Empty;
            disableSubmit = false;
        }
    }
    private async Task<List<UserGuideItem>?> GetAllItems()
    {
        items = await httpClient
        .GetFromJsonAsync<List<UserGuideItem>>("AI/Queries/ListUserGuides");
        return items;
    }
}