@page "/Account/Login"
@using Cheetah.Sample.Infrastructure.Identity
@using Visus.Ldap
@inject SignInManager<ApplicationUser> SignInManager
@inject ILogger<Login> Logger
@inject NavigationManager NavigationManager
@inject IdentityRedirectManager RedirectManager
@inject UserManager<ApplicationUser> userManager
@inject IConfiguration Configuration
@inject ILdapAuthenticationService<LdapUser> authService
<PageTitle>ورود به سیستم</PageTitle>

<h1 class="text-center">ورود به سیستم</h1>
<div class="container mt-5">
    <div class="row justify-content-center">
        <div class="col-md-4">
            <section>
                <StatusMessage Message="@errorMessage" />
                <EditForm Model="Input" method="post" OnValidSubmit="LoginUser" FormName="login">
                    <DataAnnotationsValidator />
                    <hr />
                    <ValidationSummary class="text-danger" role="alert" />
                    <div class="form-floating mb-3">
                        <InputText @bind-Value="Input.UserName" class="form-control" autocomplete="username"
                                   aria-required="true" placeholder="نام کاربری" />
                        <label for="UserName" class="form-label">نام کاربری</label>
                        <ValidationMessage For="() => Input.UserName" class="text-danger" />
                    </div>
                    <div class="form-floating mb-3">
                        <InputText type="password" @bind-Value="Input.Password" class="form-control" autocomplete="current-password" aria-required="true" placeholder="رمز عبور" />
                        <label for="password" class="form-label">رمز عبور</label>
                        <ValidationMessage For="() => Input.Password" class="text-danger" />
                    </div>
                    <div class="checkbox mb-3">
                        <label class="form-label">
                            <InputCheckbox @bind-Value="Input.RememberMe" class="darker-border-checkbox form-check-input" />
                            مرا به خاطر بسپار
                        </label>
                    </div>
                    <div>
                        <button type="submit" class="w-100 btn btn-lg btn-primary">ورود به سیستم</button>
                    </div>
                </EditForm>
            </section>
        </div>
    </div>
</div>

@code {
    private string? errorMessage;

    [CascadingParameter]
    private HttpContext HttpContext { get; set; } = default!;

    [SupplyParameterFromForm]
    private InputModel Input { get; set; } = new();

    [SupplyParameterFromQuery]
    private string? ReturnUrl { get; set; }

    protected override async Task OnInitializedAsync()
    {
        if (HttpMethods.IsGet(HttpContext.Request.Method))
        {
            await HttpContext.SignOutAsync(IdentityConstants.ExternalScheme);
        }
    }

    public async Task LoginUser()
    {
        var result = await SignInManager.PasswordSignInAsync(Input.UserName, Input.Password, Input.RememberMe, lockoutOnFailure: false);
        if (result.Succeeded)
        {
            Logger.LogInformation("کاربر وارد سیستم شد.");
            RedirectManager.RedirectTo(ReturnUrl);
        }
        else if (result.RequiresTwoFactor)
        {
            RedirectManager.RedirectTo(
                "Account/LoginWith2fa",
                new() { ["returnUrl"] = ReturnUrl, ["rememberMe"] = Input.RememberMe });
        }
        else if (result.IsLockedOut)
        {
            Logger.LogWarning("حساب کاربری قفل شده است.");
            RedirectManager.RedirectTo("Account/Lockout");
        }
        else
        {
            bool _validUser = false;
            try
            {
                (var retval, var claims) = await this.authService.LoginUserAsync(Input.UserName, Input.Password, null);
                var identity = new ClaimsIdentity(claims, "LDAP");
                var principal = new ClaimsPrincipal(identity);
                _validUser = true;
            }
            catch (Exception ex)
            {
                errorMessage = "خطا: تلاش ورود نامعتبر.";
            }
            if (_validUser)
            {
                var _applicationUser = await userManager.FindByNameAsync(Input.UserName);
                if (_applicationUser is not null)
                {
                    await SignInManager.SignInAsync(_applicationUser!, isPersistent: Input.RememberMe);
                    Logger.LogInformation("کاربر وارد سیستم شد.");
                    RedirectManager.RedirectTo(ReturnUrl);
                }
                else
                {
                    errorMessage = "خطا: تلاش ورود نامعتبر.";
                }
            }
        }
    }

    private sealed class InputModel
    {
        [Required]
        public string UserName { get; set; } = "";

        [Required]
        [DataType(DataType.Password)]
        public string Password { get; set; } = "";

        [Display(Name = "مرا به خاطر بسپار؟")]
        public bool RememberMe { get; set; }
    }
}