@if (Records?.Sd_Status is not null)
{
    <MudDataGrid ReadOnly="@ReadonlyState" Items="@Records.FloatState.OrderByDescending(x=>x.Value).ThenBy(x=>x.Key.Item2)"
                 T="KeyValuePair<Tuple<long?, string>, bool>" Hover="true"
                 Bordered="true" Striped="true"
                 QuickFilter="@_quickFilter">
        <ToolBarContent>
            <MudText Typo="Typo.h6">@Title</MudText>
            <MudSpacer />
            <MudTextField Value="_searchString" Placeholder="جستجو" Adornment="Adornment.Start" Immediate="true"
                          AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
        </ToolBarContent>
        <Columns>
            <PropertyColumn Property="x => x.Value"
                            Title="انتخاب" IsEditable="true">
                <CellTemplate>
                    <MudCheckBox ReadOnly="@ReadonlyState" Disabled="@ReadonlyState"
                                 Value="@context.Item.Value" Color="Color.Tertiary"
                                 CheckedIcon="@Icons.Material.Filled.Bookmark"
                                 UncheckedIcon="@Icons.Material.Filled.BookmarkBorder"
                                 @onclick="args=>TogglePattern(context.Item)" />
                </CellTemplate>
            </PropertyColumn>
            <PropertyColumn Property="x => x.Key.Item2" Title="نام" />
        </Columns>
        <PagerContent>
            <MudDataGridPager T="KeyValuePair<Tuple<long?, string>, bool>" />
        </PagerContent>
    </MudDataGrid>
}
@code {
    [Parameter]
    public Boolean ReadonlyState { get; set; } = false;
    private string _searchString;

    // quick filter - filter gobally across multiple columns with the same input
    private Func<KeyValuePair<Tuple<long?, string>, bool>, bool> _quickFilter => x =>
    {
        if (string.IsNullOrWhiteSpace(_searchString))
            return true;

        if (x.Key.Item2.Contains(_searchString, StringComparison.OrdinalIgnoreCase))
            return true;

        return false;
    };

    [Parameter]
    public LinkClassDTO? Records { get; set; }

    [Parameter]
    public String? reference { get; set; }

    [Parameter]
    public String? Title { get; set; }

    private async Task TogglePattern(KeyValuePair<Tuple<long?, string>, bool> item)
    {
        Records.FloatState[item.Key] = !item.Value;
    }

}
