@inherits CUpsert_GeneralCode

<CEditDimentions Record="@Record" Records="@Records" IsInline="@IsInline"
                 Name="D_Role" Id="@Id" reference="@reference"
                 ParentCallback="@ParentCallback" Title="@Title"
                 LinkRecords="@LinkRecords">
    <RowTemplate>

        <div class="row">
            <span class="col-2">
                @(globalization.GetValue(nameof(Localization.BlazorServer_Independ) ))
            </span>
            <InputCheckbox class="col-1" @bind-Value="(Record as D_Role).Independent"></InputCheckbox>
        </div>


        <LinkComponent Records="@LinkRecords"
                       reference="@reference"
                       Title=@(globalization.GetValue(nameof(Localization.BlazorServer_PositionsInRole), new String[] { Record?.DisplayName}))>
        </LinkComponent>
    </RowTemplate>
</CEditDimentions>
@code {
    public override async Task ExtendedLoadDTO()
    {
        AllRecords = await simpleClassRepository.GetAllByName(nameof(D_Position));
        AllLink = await simpleClassRepository.GetAllLink(nameof(L_RolePosition), nameof(LinkProperty.First), Id);

        this.LinkRecords = new SimpleLinkClassDTO()
            {
                linkType = nameof(L_RolePosition),
                firstType = nameof(D_Role),
                secondType = nameof(D_Position),
                fixedId = Id,
                sd_Status = nameof(LinkProperty.First),
                floatState = AllRecords.Select(x => new KeyValuePair<Tuple<long?, string>, Boolean>(
                    new Tuple<long?, string>(x.Id, x.DisplayName),
                    AllLink.Any(y => y.FirstId == Id && y.SecondId == x.Id)))
                                            .ToDictionary(x => x.Key, x => x.Value)
            };
    }
}