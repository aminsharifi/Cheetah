// <auto-generated />
using Cheetah.Infrastructure.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Cheetah.Infrastructure.Persistence.Providers.SqlServer.Migrations
{
    [DbContext(typeof(CheetahDbContext))]
    [Migration("20240520071550_Add_Constraint_WorkItemCondition_CaseTaskUser")]
    partial class Add_Constraint_WorkItemCondition_CaseTaskUser
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.5")
                .HasAnnotation("Proxies:ChangeTracking", false)
                .HasAnnotation("Proxies:CheckEquality", false)
                .HasAnnotation("Proxies:LazyLoading", true)
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Cheetah.Core.Entities.Dimentions.D_CaseState", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnOrder(1)
                        .HasComment("The unique key of each record")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<DateTimeOffset?>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetimeoffset")
                        .HasColumnOrder(6)
                        .HasDefaultValueSql("GETDATE()")
                        .HasComment("Record creation date");

                    b.Property<string>("CreatedBy")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(512)
                        .HasColumnType("nvarchar(512)")
                        .HasDefaultValue("")
                        .HasColumnOrder(12)
                        .HasComment("Created by what user?");

                    b.Property<string>("Description")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(512)
                        .HasColumnType("nvarchar(512)")
                        .HasDefaultValue("")
                        .HasColumnOrder(5)
                        .HasComment("Additional description of each record");

                    b.Property<string>("DisplayName")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(512)
                        .HasColumnType("nvarchar(512)")
                        .HasDefaultValue("")
                        .HasColumnOrder(4)
                        .HasComment("The localized name of each record");

                    b.Property<long?>("ERPCode")
                        .HasColumnType("bigint")
                        .HasColumnOrder(10)
                        .HasComment("ID of this record in ERP");

                    b.Property<bool>("EnableRecord")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true)
                        .HasColumnOrder(9)
                        .HasComment("Active status of the record");

                    b.Property<Guid?>("GuidRecord")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnOrder(8)
                        .HasDefaultValueSql("NEWSEQUENTIALID ()")
                        .HasComment("Unique GUID identifier");

                    b.Property<DateTimeOffset?>("LastModified")
                        .ValueGeneratedOnUpdate()
                        .HasColumnType("datetimeoffset")
                        .HasColumnOrder(7)
                        .HasDefaultValueSql("GETDATE()")
                        .HasComment("The date the record was last updated");

                    b.Property<string>("LastModifiedBy")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(512)
                        .HasColumnType("nvarchar(512)")
                        .HasDefaultValue("")
                        .HasColumnOrder(11)
                        .HasComment("By which user has it been updated?");

                    b.Property<string>("Name")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(512)
                        .HasColumnType("nvarchar(512)")
                        .HasDefaultValue("")
                        .HasColumnOrder(3)
                        .HasComment("English name of each record");

                    b.Property<long?>("SortIndex")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasDefaultValue(0L)
                        .HasColumnOrder(2)
                        .HasComment("The sort index of the record");

                    b.HasKey("Id");

                    b.HasIndex("Created")
                        .IsDescending();

                    b.HasIndex("ERPCode")
                        .IsDescending();

                    b.HasIndex("EnableRecord")
                        .IsDescending();

                    b.HasIndex("LastModified")
                        .IsDescending();

                    b.HasIndex("Name")
                        .IsDescending();

                    b.ToTable("D_CaseState", "Dimentions", t =>
                        {
                            t.HasComment("State of the case");
                        });

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            Created = new DateTimeOffset(new DateTime(2024, 5, 20, 10, 45, 48, 714, DateTimeKind.Unspecified).AddTicks(8371), new TimeSpan(0, 3, 30, 0, 0)),
                            DisplayName = "مقداردهی اولیه",
                            ERPCode = 1L,
                            EnableRecord = true,
                            GuidRecord = new Guid("a6fa5350-c838-49c9-94f5-3a00cc8e2615"),
                            Name = "Initializing",
                            SortIndex = 1L
                        },
                        new
                        {
                            Id = 2L,
                            Created = new DateTimeOffset(new DateTime(2024, 5, 20, 10, 45, 48, 714, DateTimeKind.Unspecified).AddTicks(8380), new TimeSpan(0, 3, 30, 0, 0)),
                            DisplayName = "در دست بررسی",
                            ERPCode = 2L,
                            EnableRecord = true,
                            GuidRecord = new Guid("03619895-701a-4290-88d5-c53fa71c21ab"),
                            Name = "Ongoing",
                            SortIndex = 2L
                        },
                        new
                        {
                            Id = 3L,
                            Created = new DateTimeOffset(new DateTime(2024, 5, 20, 10, 45, 48, 714, DateTimeKind.Unspecified).AddTicks(8383), new TimeSpan(0, 3, 30, 0, 0)),
                            DisplayName = "منتظر بازنگری",
                            ERPCode = 3L,
                            EnableRecord = true,
                            GuidRecord = new Guid("466146b8-d648-4047-bd6c-4fedbea9a88a"),
                            Name = "Editing",
                            SortIndex = 3L
                        },
                        new
                        {
                            Id = 4L,
                            Created = new DateTimeOffset(new DateTime(2024, 5, 20, 10, 45, 48, 714, DateTimeKind.Unspecified).AddTicks(8386), new TimeSpan(0, 3, 30, 0, 0)),
                            DisplayName = "تایید شده",
                            ERPCode = 4L,
                            EnableRecord = true,
                            GuidRecord = new Guid("e1ef2c1b-2aef-48f6-b920-2b5c43d8e5df"),
                            Name = "Approved",
                            SortIndex = 4L
                        },
                        new
                        {
                            Id = 5L,
                            Created = new DateTimeOffset(new DateTime(2024, 5, 20, 10, 45, 48, 714, DateTimeKind.Unspecified).AddTicks(8388), new TimeSpan(0, 3, 30, 0, 0)),
                            DisplayName = "عدم تایید",
                            ERPCode = 5L,
                            EnableRecord = true,
                            GuidRecord = new Guid("46e3b742-4b3b-4141-a6a0-781bce694742"),
                            Name = "Rejected",
                            SortIndex = 5L
                        },
                        new
                        {
                            Id = 6L,
                            Created = new DateTimeOffset(new DateTime(2024, 5, 20, 10, 45, 48, 714, DateTimeKind.Unspecified).AddTicks(8395), new TimeSpan(0, 3, 30, 0, 0)),
                            DisplayName = "ابطال شده",
                            ERPCode = 6L,
                            EnableRecord = true,
                            GuidRecord = new Guid("32b16881-9b5d-437c-83d9-04f733cb07dd"),
                            Name = "Aborted",
                            SortIndex = 6L
                        });
                });

            modelBuilder.Entity("Cheetah.Core.Entities.Dimentions.D_Entity", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnOrder(1)
                        .HasComment("The unique key of each record")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<DateTimeOffset?>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetimeoffset")
                        .HasColumnOrder(6)
                        .HasDefaultValueSql("GETDATE()")
                        .HasComment("Record creation date");

                    b.Property<string>("CreatedBy")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(512)
                        .HasColumnType("nvarchar(512)")
                        .HasDefaultValue("")
                        .HasColumnOrder(12)
                        .HasComment("Created by what user?");

                    b.Property<string>("Description")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(512)
                        .HasColumnType("nvarchar(512)")
                        .HasDefaultValue("")
                        .HasColumnOrder(5)
                        .HasComment("Additional description of each record");

                    b.Property<bool?>("Display")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true)
                        .HasColumnOrder(100);

                    b.Property<string>("DisplayName")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(512)
                        .HasColumnType("nvarchar(512)")
                        .HasDefaultValue("")
                        .HasColumnOrder(4)
                        .HasComment("The localized name of each record");

                    b.Property<long?>("ERPCode")
                        .HasColumnType("bigint")
                        .HasColumnOrder(10)
                        .HasComment("ID of this record in ERP");

                    b.Property<bool>("EnableRecord")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true)
                        .HasColumnOrder(9)
                        .HasComment("Active status of the record");

                    b.Property<Guid?>("GuidRecord")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnOrder(8)
                        .HasDefaultValueSql("NEWSEQUENTIALID ()")
                        .HasComment("Unique GUID identifier");

                    b.Property<DateTimeOffset?>("LastModified")
                        .ValueGeneratedOnUpdate()
                        .HasColumnType("datetimeoffset")
                        .HasColumnOrder(7)
                        .HasDefaultValueSql("GETDATE()")
                        .HasComment("The date the record was last updated");

                    b.Property<string>("LastModifiedBy")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(512)
                        .HasColumnType("nvarchar(512)")
                        .HasDefaultValue("")
                        .HasColumnOrder(11)
                        .HasComment("By which user has it been updated?");

                    b.Property<string>("Name")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(512)
                        .HasColumnType("nvarchar(512)")
                        .HasDefaultValue("")
                        .HasColumnOrder(3)
                        .HasComment("English name of each record");

                    b.Property<long?>("SortIndex")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasDefaultValue(0L)
                        .HasColumnOrder(2)
                        .HasComment("The sort index of the record");

                    b.Property<bool?>("Sync")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("Created")
                        .IsDescending();

                    b.HasIndex("Display");

                    b.HasIndex("ERPCode")
                        .IsDescending();

                    b.HasIndex("EnableRecord")
                        .IsDescending();

                    b.HasIndex("LastModified")
                        .IsDescending();

                    b.HasIndex("Name")
                        .IsDescending();

                    b.ToTable("D_Entity", "Dimentions", t =>
                        {
                            t.HasComment("Table's name in the Cheetah");
                        });

                    b.HasData(
                        new
                        {
                            Id = 101L,
                            Created = new DateTimeOffset(new DateTime(2024, 5, 20, 10, 45, 48, 716, DateTimeKind.Unspecified).AddTicks(167), new TimeSpan(0, 3, 30, 0, 0)),
                            Display = false,
                            DisplayName = "نوع تگ‌ها(Dimentions)",
                            ERPCode = 101L,
                            EnableRecord = true,
                            GuidRecord = new Guid("b339f5c9-5bc3-4bb6-a057-1b6ed28779c7"),
                            Name = "D_TagType",
                            SortIndex = 101L,
                            Sync = false
                        },
                        new
                        {
                            Id = 102L,
                            Created = new DateTimeOffset(new DateTime(2024, 5, 20, 10, 45, 48, 716, DateTimeKind.Unspecified).AddTicks(9973), new TimeSpan(0, 3, 30, 0, 0)),
                            Display = false,
                            DisplayName = "عملگرها(Dimentions)",
                            ERPCode = 102L,
                            EnableRecord = true,
                            GuidRecord = new Guid("67782b07-9f44-4910-9403-c8ff5ae33404"),
                            Name = "D_Operand",
                            SortIndex = 102L,
                            Sync = false
                        },
                        new
                        {
                            Id = 103L,
                            Created = new DateTimeOffset(new DateTime(2024, 5, 20, 10, 45, 48, 716, DateTimeKind.Unspecified).AddTicks(9998), new TimeSpan(0, 3, 30, 0, 0)),
                            Display = true,
                            DisplayName = "تگ‌ها(Dimentions)",
                            ERPCode = 103L,
                            EnableRecord = true,
                            GuidRecord = new Guid("34b1bd39-ff6f-4398-ba3a-8906e9e5ef2c"),
                            Name = "D_Tag",
                            SortIndex = 103L,
                            Sync = false
                        },
                        new
                        {
                            Id = 104L,
                            Created = new DateTimeOffset(new DateTime(2024, 5, 20, 10, 45, 48, 717, DateTimeKind.Unspecified).AddTicks(4), new TimeSpan(0, 3, 30, 0, 0)),
                            Display = false,
                            DisplayName = "وضعیت فرآیندها(Dimentions)",
                            ERPCode = 104L,
                            EnableRecord = true,
                            GuidRecord = new Guid("9789ba65-6dc7-4be6-8319-b71708b353a4"),
                            Name = "D_CaseState",
                            SortIndex = 104L,
                            Sync = false
                        },
                        new
                        {
                            Id = 105L,
                            Created = new DateTimeOffset(new DateTime(2024, 5, 20, 10, 45, 48, 717, DateTimeKind.Unspecified).AddTicks(10), new TimeSpan(0, 3, 30, 0, 0)),
                            Display = true,
                            DisplayName = "فرآیند‌ها(Dimentions)",
                            ERPCode = 105L,
                            EnableRecord = true,
                            GuidRecord = new Guid("35b19a5f-0c13-4cc3-b496-ac04551b2f26"),
                            Name = "D_Process",
                            SortIndex = 105L,
                            Sync = false
                        },
                        new
                        {
                            Id = 106L,
                            Created = new DateTimeOffset(new DateTime(2024, 5, 20, 10, 45, 48, 717, DateTimeKind.Unspecified).AddTicks(15), new TimeSpan(0, 3, 30, 0, 0)),
                            Display = true,
                            DisplayName = "کاربران(Dimentions)",
                            ERPCode = 106L,
                            EnableRecord = true,
                            GuidRecord = new Guid("a0fbb96f-9960-4ab4-a121-777a3fcbb821"),
                            Name = "D_User",
                            SortIndex = 106L,
                            Sync = false
                        },
                        new
                        {
                            Id = 107L,
                            Created = new DateTimeOffset(new DateTime(2024, 5, 20, 10, 45, 48, 717, DateTimeKind.Unspecified).AddTicks(31), new TimeSpan(0, 3, 30, 0, 0)),
                            Display = false,
                            DisplayName = "اطلاعات کاربرها(Facts)",
                            ERPCode = 107L,
                            EnableRecord = true,
                            GuidRecord = new Guid("b0c9ac52-ad76-4b4a-8d69-abd4c06a98f9"),
                            Name = "D_UserInformation",
                            SortIndex = 107L,
                            Sync = false
                        },
                        new
                        {
                            Id = 108L,
                            Created = new DateTimeOffset(new DateTime(2024, 5, 20, 10, 45, 48, 717, DateTimeKind.Unspecified).AddTicks(36), new TimeSpan(0, 3, 30, 0, 0)),
                            Display = false,
                            DisplayName = "تمام تاییدها(Facts)",
                            ERPCode = 108L,
                            EnableRecord = true,
                            GuidRecord = new Guid("a18d34a0-ee0e-4524-89c8-bdb4e96d2c51"),
                            Name = "F_WorkItem",
                            SortIndex = 108L,
                            Sync = false
                        },
                        new
                        {
                            Id = 109L,
                            Created = new DateTimeOffset(new DateTime(2024, 5, 20, 10, 45, 48, 717, DateTimeKind.Unspecified).AddTicks(41), new TimeSpan(0, 3, 30, 0, 0)),
                            Display = false,
                            DisplayName = "ضمیمه‌ها(Facts)",
                            ERPCode = 109L,
                            EnableRecord = true,
                            GuidRecord = new Guid("412beab5-97c8-4fb2-91e1-5542674065c2"),
                            Name = "F_Attachment",
                            SortIndex = 109L,
                            Sync = false
                        },
                        new
                        {
                            Id = 110L,
                            Created = new DateTimeOffset(new DateTime(2024, 5, 20, 10, 45, 48, 717, DateTimeKind.Unspecified).AddTicks(47), new TimeSpan(0, 3, 30, 0, 0)),
                            Display = false,
                            DisplayName = "لیست تخصیص‌ها(Facts)",
                            ERPCode = 110L,
                            EnableRecord = true,
                            GuidRecord = new Guid("f9cb3a2a-517f-4b2c-b04b-68224af6832b"),
                            Name = "F_Task",
                            SortIndex = 110L,
                            Sync = false
                        },
                        new
                        {
                            Id = 111L,
                            Created = new DateTimeOffset(new DateTime(2024, 5, 20, 10, 45, 48, 717, DateTimeKind.Unspecified).AddTicks(52), new TimeSpan(0, 3, 30, 0, 0)),
                            Display = true,
                            DisplayName = "لیست شرط‌ها(Facts)",
                            ERPCode = 111L,
                            EnableRecord = true,
                            GuidRecord = new Guid("d7eb9de6-f7db-4433-9b78-fb3aac12d8a1"),
                            Name = "F_Condition",
                            SortIndex = 111L,
                            Sync = false
                        },
                        new
                        {
                            Id = 112L,
                            Created = new DateTimeOffset(new DateTime(2024, 5, 20, 10, 45, 48, 717, DateTimeKind.Unspecified).AddTicks(90), new TimeSpan(0, 3, 30, 0, 0)),
                            Display = false,
                            DisplayName = "اطلاعات درخواست‌ها(Facts)",
                            ERPCode = 112L,
                            EnableRecord = true,
                            GuidRecord = new Guid("741d130b-5282-4980-9c51-647f7ad99364"),
                            Name = "F_Case",
                            SortIndex = 112L,
                            Sync = false
                        },
                        new
                        {
                            Id = 113L,
                            Created = new DateTimeOffset(new DateTime(2024, 5, 20, 10, 45, 48, 717, DateTimeKind.Unspecified).AddTicks(95), new TimeSpan(0, 3, 30, 0, 0)),
                            Display = true,
                            DisplayName = "سناریوها(Facts)",
                            ERPCode = 113L,
                            EnableRecord = true,
                            GuidRecord = new Guid("49b719a2-bd43-49a9-b86f-f6667577629f"),
                            Name = "F_Scenario",
                            SortIndex = 113L,
                            Sync = false
                        },
                        new
                        {
                            Id = 114L,
                            Created = new DateTimeOffset(new DateTime(2024, 5, 20, 10, 45, 48, 717, DateTimeKind.Unspecified).AddTicks(99), new TimeSpan(0, 3, 30, 0, 0)),
                            Display = false,
                            DisplayName = "فرآیند-سناریو(Links)",
                            ERPCode = 114L,
                            EnableRecord = true,
                            GuidRecord = new Guid("7745e1b2-dbfd-4910-b275-dae52c5c2880"),
                            Name = "L_ProcessScenario",
                            SortIndex = 114L,
                            Sync = false
                        });
                });

            modelBuilder.Entity("Cheetah.Core.Entities.Dimentions.D_Operand", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnOrder(1)
                        .HasComment("The unique key of each record")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<DateTimeOffset?>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetimeoffset")
                        .HasColumnOrder(6)
                        .HasDefaultValueSql("GETDATE()")
                        .HasComment("Record creation date");

                    b.Property<string>("CreatedBy")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(512)
                        .HasColumnType("nvarchar(512)")
                        .HasDefaultValue("")
                        .HasColumnOrder(12)
                        .HasComment("Created by what user?");

                    b.Property<string>("Description")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(512)
                        .HasColumnType("nvarchar(512)")
                        .HasDefaultValue("")
                        .HasColumnOrder(5)
                        .HasComment("Additional description of each record");

                    b.Property<string>("DisplayName")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(512)
                        .HasColumnType("nvarchar(512)")
                        .HasDefaultValue("")
                        .HasColumnOrder(4)
                        .HasComment("The localized name of each record");

                    b.Property<long?>("ERPCode")
                        .HasColumnType("bigint")
                        .HasColumnOrder(10)
                        .HasComment("ID of this record in ERP");

                    b.Property<bool>("EnableRecord")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true)
                        .HasColumnOrder(9)
                        .HasComment("Active status of the record");

                    b.Property<Guid?>("GuidRecord")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnOrder(8)
                        .HasDefaultValueSql("NEWSEQUENTIALID ()")
                        .HasComment("Unique GUID identifier");

                    b.Property<DateTimeOffset?>("LastModified")
                        .ValueGeneratedOnUpdate()
                        .HasColumnType("datetimeoffset")
                        .HasColumnOrder(7)
                        .HasDefaultValueSql("GETDATE()")
                        .HasComment("The date the record was last updated");

                    b.Property<string>("LastModifiedBy")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(512)
                        .HasColumnType("nvarchar(512)")
                        .HasDefaultValue("")
                        .HasColumnOrder(11)
                        .HasComment("By which user has it been updated?");

                    b.Property<string>("Name")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(512)
                        .HasColumnType("nvarchar(512)")
                        .HasDefaultValue("")
                        .HasColumnOrder(3)
                        .HasComment("English name of each record");

                    b.Property<long?>("SortIndex")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasDefaultValue(0L)
                        .HasColumnOrder(2)
                        .HasComment("The sort index of the record");

                    b.HasKey("Id");

                    b.HasIndex("Created")
                        .IsDescending();

                    b.HasIndex("ERPCode")
                        .IsDescending();

                    b.HasIndex("EnableRecord")
                        .IsDescending();

                    b.HasIndex("LastModified")
                        .IsDescending();

                    b.HasIndex("Name")
                        .IsDescending();

                    b.ToTable("D_Operand", "Dimentions", t =>
                        {
                            t.HasComment("Operand name, like equal, greater, etc.");
                        });

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            Created = new DateTimeOffset(new DateTime(2024, 5, 20, 10, 45, 48, 714, DateTimeKind.Unspecified).AddTicks(3988), new TimeSpan(0, 3, 30, 0, 0)),
                            DisplayName = "مساوی",
                            ERPCode = 1L,
                            EnableRecord = true,
                            GuidRecord = new Guid("1f9828b4-6de3-4f93-9157-5b8edfa52e74"),
                            Name = "=",
                            SortIndex = 1L
                        },
                        new
                        {
                            Id = 2L,
                            Created = new DateTimeOffset(new DateTime(2024, 5, 20, 10, 45, 48, 714, DateTimeKind.Unspecified).AddTicks(4000), new TimeSpan(0, 3, 30, 0, 0)),
                            DisplayName = "مخالف",
                            ERPCode = 2L,
                            EnableRecord = true,
                            GuidRecord = new Guid("3960c784-b8c5-41a7-8a46-65c93aab1985"),
                            Name = "!=",
                            SortIndex = 2L
                        },
                        new
                        {
                            Id = 3L,
                            Created = new DateTimeOffset(new DateTime(2024, 5, 20, 10, 45, 48, 714, DateTimeKind.Unspecified).AddTicks(4002), new TimeSpan(0, 3, 30, 0, 0)),
                            DisplayName = "بزگتر از",
                            ERPCode = 3L,
                            EnableRecord = true,
                            GuidRecord = new Guid("ce3bb274-d4c4-4116-ad53-03044b0e79ef"),
                            Name = ">",
                            SortIndex = 3L
                        },
                        new
                        {
                            Id = 4L,
                            Created = new DateTimeOffset(new DateTime(2024, 5, 20, 10, 45, 48, 714, DateTimeKind.Unspecified).AddTicks(4004), new TimeSpan(0, 3, 30, 0, 0)),
                            DisplayName = "بزرگتر و مساوی",
                            ERPCode = 4L,
                            EnableRecord = true,
                            GuidRecord = new Guid("840b4db8-c8f5-45ad-a784-908821db452c"),
                            Name = ">=",
                            SortIndex = 4L
                        },
                        new
                        {
                            Id = 5L,
                            Created = new DateTimeOffset(new DateTime(2024, 5, 20, 10, 45, 48, 714, DateTimeKind.Unspecified).AddTicks(4007), new TimeSpan(0, 3, 30, 0, 0)),
                            DisplayName = " کوچکتر از",
                            ERPCode = 5L,
                            EnableRecord = true,
                            GuidRecord = new Guid("ac71722f-5ec8-432f-a8ad-44fc4f1eb8fa"),
                            Name = "<",
                            SortIndex = 5L
                        },
                        new
                        {
                            Id = 6L,
                            Created = new DateTimeOffset(new DateTime(2024, 5, 20, 10, 45, 48, 714, DateTimeKind.Unspecified).AddTicks(4009), new TimeSpan(0, 3, 30, 0, 0)),
                            DisplayName = "کوچکتر و مساوی",
                            ERPCode = 6L,
                            EnableRecord = true,
                            GuidRecord = new Guid("1592327d-c66c-47b9-840a-b0640a692ef1"),
                            Name = "<=",
                            SortIndex = 6L
                        });
                });

            modelBuilder.Entity("Cheetah.Core.Entities.Dimentions.D_Process", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnOrder(1)
                        .HasComment("The unique key of each record")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<DateTimeOffset?>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetimeoffset")
                        .HasColumnOrder(6)
                        .HasDefaultValueSql("GETDATE()")
                        .HasComment("Record creation date");

                    b.Property<string>("CreatedBy")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(512)
                        .HasColumnType("nvarchar(512)")
                        .HasDefaultValue("")
                        .HasColumnOrder(12)
                        .HasComment("Created by what user?");

                    b.Property<string>("Description")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(512)
                        .HasColumnType("nvarchar(512)")
                        .HasDefaultValue("")
                        .HasColumnOrder(5)
                        .HasComment("Additional description of each record");

                    b.Property<string>("DisplayName")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(512)
                        .HasColumnType("nvarchar(512)")
                        .HasDefaultValue("")
                        .HasColumnOrder(4)
                        .HasComment("The localized name of each record");

                    b.Property<bool?>("ERP")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true)
                        .HasColumnOrder(101);

                    b.Property<long?>("ERPCode")
                        .HasColumnType("bigint")
                        .HasColumnOrder(10)
                        .HasComment("ID of this record in ERP");

                    b.Property<bool>("EnableRecord")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true)
                        .HasColumnOrder(9)
                        .HasComment("Active status of the record");

                    b.Property<Guid?>("GuidRecord")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnOrder(8)
                        .HasDefaultValueSql("NEWSEQUENTIALID ()")
                        .HasComment("Unique GUID identifier");

                    b.Property<DateTimeOffset?>("LastModified")
                        .ValueGeneratedOnUpdate()
                        .HasColumnType("datetimeoffset")
                        .HasColumnOrder(7)
                        .HasDefaultValueSql("GETDATE()")
                        .HasComment("The date the record was last updated");

                    b.Property<string>("LastModifiedBy")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(512)
                        .HasColumnType("nvarchar(512)")
                        .HasDefaultValue("")
                        .HasColumnOrder(11)
                        .HasComment("By which user has it been updated?");

                    b.Property<string>("Name")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(512)
                        .HasColumnType("nvarchar(512)")
                        .HasDefaultValue("")
                        .HasColumnOrder(3)
                        .HasComment("English name of each record");

                    b.Property<bool?>("RemoveRequestorApproval")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true)
                        .HasColumnOrder(102);

                    b.Property<bool?>("ShowSupport")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true)
                        .HasColumnOrder(110);

                    b.Property<long?>("SortIndex")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasDefaultValue(0L)
                        .HasColumnOrder(2)
                        .HasComment("The sort index of the record");

                    b.HasKey("Id");

                    b.HasIndex("Created")
                        .IsDescending();

                    b.HasIndex("ERPCode")
                        .IsDescending();

                    b.HasIndex("EnableRecord")
                        .IsDescending();

                    b.HasIndex("LastModified")
                        .IsDescending();

                    b.HasIndex("Name")
                        .IsDescending();

                    b.ToTable("D_Process", "Dimentions", t =>
                        {
                            t.HasComment("The name of the processes that the admin enters");
                        });

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            Created = new DateTimeOffset(new DateTime(2024, 5, 20, 10, 45, 48, 712, DateTimeKind.Unspecified).AddTicks(6227), new TimeSpan(0, 3, 30, 0, 0)),
                            DisplayName = "فرآیند نمونه",
                            ERP = true,
                            ERPCode = 1L,
                            EnableRecord = true,
                            GuidRecord = new Guid("5316b538-ffa9-4e51-935d-516584a48990"),
                            Name = "SampleProcess",
                            RemoveRequestorApproval = true,
                            ShowSupport = true,
                            SortIndex = 1L
                        });
                });

            modelBuilder.Entity("Cheetah.Core.Entities.Dimentions.D_Tag", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnOrder(1)
                        .HasComment("The unique key of each record")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<DateTimeOffset?>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetimeoffset")
                        .HasColumnOrder(6)
                        .HasDefaultValueSql("GETDATE()")
                        .HasComment("Record creation date");

                    b.Property<string>("CreatedBy")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(512)
                        .HasColumnType("nvarchar(512)")
                        .HasDefaultValue("")
                        .HasColumnOrder(12)
                        .HasComment("Created by what user?");

                    b.Property<string>("Description")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(512)
                        .HasColumnType("nvarchar(512)")
                        .HasDefaultValue("")
                        .HasColumnOrder(5)
                        .HasComment("Additional description of each record");

                    b.Property<string>("DisplayName")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(512)
                        .HasColumnType("nvarchar(512)")
                        .HasDefaultValue("")
                        .HasColumnOrder(4)
                        .HasComment("The localized name of each record");

                    b.Property<long?>("ERPCode")
                        .HasColumnType("bigint")
                        .HasColumnOrder(10)
                        .HasComment("ID of this record in ERP");

                    b.Property<bool>("EnableRecord")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true)
                        .HasColumnOrder(9)
                        .HasComment("Active status of the record");

                    b.Property<Guid?>("GuidRecord")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnOrder(8)
                        .HasDefaultValueSql("NEWSEQUENTIALID ()")
                        .HasComment("Unique GUID identifier");

                    b.Property<DateTimeOffset?>("LastModified")
                        .ValueGeneratedOnUpdate()
                        .HasColumnType("datetimeoffset")
                        .HasColumnOrder(7)
                        .HasDefaultValueSql("GETDATE()")
                        .HasComment("The date the record was last updated");

                    b.Property<string>("LastModifiedBy")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(512)
                        .HasColumnType("nvarchar(512)")
                        .HasDefaultValue("")
                        .HasColumnOrder(11)
                        .HasComment("By which user has it been updated?");

                    b.Property<string>("Name")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(512)
                        .HasColumnType("nvarchar(512)")
                        .HasDefaultValue("")
                        .HasColumnOrder(3)
                        .HasComment("English name of each record");

                    b.Property<long?>("SortIndex")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasDefaultValue(0L)
                        .HasColumnOrder(2)
                        .HasComment("The sort index of the record");

                    b.Property<long?>("TagCategoryId")
                        .HasColumnType("bigint")
                        .HasColumnOrder(101);

                    b.Property<long?>("TagTypeId")
                        .HasColumnType("bigint")
                        .HasColumnOrder(100);

                    b.HasKey("Id");

                    b.HasIndex("Created")
                        .IsDescending();

                    b.HasIndex("ERPCode")
                        .IsDescending();

                    b.HasIndex("EnableRecord")
                        .IsDescending();

                    b.HasIndex("LastModified")
                        .IsDescending();

                    b.HasIndex("Name")
                        .IsDescending();

                    b.HasIndex("TagCategoryId");

                    b.HasIndex("TagTypeId");

                    b.ToTable("D_Tag", "Dimentions", t =>
                        {
                            t.HasComment("Entities like position, role, etc.");
                        });

                    b.HasData(
                        new
                        {
                            Id = 4L,
                            Created = new DateTimeOffset(new DateTime(2024, 5, 20, 10, 45, 48, 713, DateTimeKind.Unspecified).AddTicks(7144), new TimeSpan(0, 3, 30, 0, 0)),
                            Description = "حروف",
                            DisplayName = "موقعیت",
                            ERPCode = 4L,
                            EnableRecord = true,
                            GuidRecord = new Guid("53154d1e-f844-448b-9a17-286697d10764"),
                            Name = "Location",
                            SortIndex = 4L,
                            TagCategoryId = 1L,
                            TagTypeId = 4L
                        },
                        new
                        {
                            Id = 5L,
                            Created = new DateTimeOffset(new DateTime(2024, 5, 20, 10, 45, 48, 714, DateTimeKind.Unspecified).AddTicks(126), new TimeSpan(0, 3, 30, 0, 0)),
                            Description = "حروف",
                            DisplayName = "نقش",
                            ERPCode = 5L,
                            EnableRecord = true,
                            GuidRecord = new Guid("d583c8d7-e4a4-4826-9ae7-8e6cb3ec1558"),
                            Name = "Role",
                            SortIndex = 5L,
                            TagCategoryId = 1L,
                            TagTypeId = 4L
                        },
                        new
                        {
                            Id = 6L,
                            Created = new DateTimeOffset(new DateTime(2024, 5, 20, 10, 45, 48, 714, DateTimeKind.Unspecified).AddTicks(131), new TimeSpan(0, 3, 30, 0, 0)),
                            Description = "حروف",
                            DisplayName = "سمت",
                            ERPCode = 6L,
                            EnableRecord = true,
                            GuidRecord = new Guid("0bb40740-6a4d-47eb-b64f-9125465cbe17"),
                            Name = "Position",
                            SortIndex = 6L,
                            TagCategoryId = 1L,
                            TagTypeId = 4L
                        },
                        new
                        {
                            Id = 7L,
                            Created = new DateTimeOffset(new DateTime(2024, 5, 20, 10, 45, 48, 714, DateTimeKind.Unspecified).AddTicks(134), new TimeSpan(0, 3, 30, 0, 0)),
                            Description = "حروف",
                            DisplayName = "مدیر این پرسنل",
                            ERPCode = 7L,
                            EnableRecord = true,
                            GuidRecord = new Guid("99042731-0d40-498b-9be0-e4ffff9d2b70"),
                            Name = "Employees",
                            SortIndex = 7L,
                            TagCategoryId = 1L,
                            TagTypeId = 4L
                        },
                        new
                        {
                            Id = 8L,
                            Created = new DateTimeOffset(new DateTime(2024, 5, 20, 10, 45, 48, 714, DateTimeKind.Unspecified).AddTicks(138), new TimeSpan(0, 3, 30, 0, 0)),
                            Description = "عددی",
                            DisplayName = "مبلغ",
                            ERPCode = 8L,
                            EnableRecord = true,
                            GuidRecord = new Guid("3646197a-951d-42e2-bc65-6180f54b5c2f"),
                            Name = "Price",
                            SortIndex = 8L,
                            TagCategoryId = 2L,
                            TagTypeId = 1L
                        },
                        new
                        {
                            Id = 12L,
                            Created = new DateTimeOffset(new DateTime(2024, 5, 20, 10, 45, 48, 714, DateTimeKind.Unspecified).AddTicks(141), new TimeSpan(0, 3, 30, 0, 0)),
                            Description = "حروف",
                            DisplayName = "وضعیت بررسی",
                            ERPCode = 12L,
                            EnableRecord = true,
                            GuidRecord = new Guid("919d654e-9dc5-4152-8f65-66ecd5bc86e4"),
                            Name = "ReviewState",
                            SortIndex = 12L,
                            TagCategoryId = 2L,
                            TagTypeId = 4L
                        },
                        new
                        {
                            Id = 13L,
                            Created = new DateTimeOffset(new DateTime(2024, 5, 20, 10, 45, 48, 714, DateTimeKind.Unspecified).AddTicks(144), new TimeSpan(0, 3, 30, 0, 0)),
                            Description = "حروف",
                            DisplayName = "حرفه",
                            ERPCode = 13L,
                            EnableRecord = true,
                            GuidRecord = new Guid("cdfe2168-bf63-45b2-87b4-1f6ee0a24106"),
                            Name = "Skill",
                            SortIndex = 13L,
                            TagCategoryId = 1L,
                            TagTypeId = 4L
                        });
                });

            modelBuilder.Entity("Cheetah.Core.Entities.Dimentions.D_TagCategory", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnOrder(1)
                        .HasComment("The unique key of each record")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<DateTimeOffset?>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetimeoffset")
                        .HasColumnOrder(6)
                        .HasDefaultValueSql("GETDATE()")
                        .HasComment("Record creation date");

                    b.Property<string>("CreatedBy")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(512)
                        .HasColumnType("nvarchar(512)")
                        .HasDefaultValue("")
                        .HasColumnOrder(12)
                        .HasComment("Created by what user?");

                    b.Property<string>("Description")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(512)
                        .HasColumnType("nvarchar(512)")
                        .HasDefaultValue("")
                        .HasColumnOrder(5)
                        .HasComment("Additional description of each record");

                    b.Property<string>("DisplayName")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(512)
                        .HasColumnType("nvarchar(512)")
                        .HasDefaultValue("")
                        .HasColumnOrder(4)
                        .HasComment("The localized name of each record");

                    b.Property<long?>("ERPCode")
                        .HasColumnType("bigint")
                        .HasColumnOrder(10)
                        .HasComment("ID of this record in ERP");

                    b.Property<bool>("EnableRecord")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true)
                        .HasColumnOrder(9)
                        .HasComment("Active status of the record");

                    b.Property<Guid?>("GuidRecord")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnOrder(8)
                        .HasDefaultValueSql("NEWSEQUENTIALID ()")
                        .HasComment("Unique GUID identifier");

                    b.Property<DateTimeOffset?>("LastModified")
                        .ValueGeneratedOnUpdate()
                        .HasColumnType("datetimeoffset")
                        .HasColumnOrder(7)
                        .HasDefaultValueSql("GETDATE()")
                        .HasComment("The date the record was last updated");

                    b.Property<string>("LastModifiedBy")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(512)
                        .HasColumnType("nvarchar(512)")
                        .HasDefaultValue("")
                        .HasColumnOrder(11)
                        .HasComment("By which user has it been updated?");

                    b.Property<string>("Name")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(512)
                        .HasColumnType("nvarchar(512)")
                        .HasDefaultValue("")
                        .HasColumnOrder(3)
                        .HasComment("English name of each record");

                    b.Property<long?>("SortIndex")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasDefaultValue(0L)
                        .HasColumnOrder(2)
                        .HasComment("The sort index of the record");

                    b.HasKey("Id");

                    b.HasIndex("Created")
                        .IsDescending();

                    b.HasIndex("ERPCode")
                        .IsDescending();

                    b.HasIndex("EnableRecord")
                        .IsDescending();

                    b.HasIndex("LastModified")
                        .IsDescending();

                    b.HasIndex("Name")
                        .IsDescending();

                    b.ToTable("D_TagCategory", "Dimentions", t =>
                        {
                            t.HasComment("Action, Performer");
                        });

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            Created = new DateTimeOffset(new DateTime(2024, 5, 20, 10, 45, 48, 714, DateTimeKind.Unspecified).AddTicks(8), new TimeSpan(0, 3, 30, 0, 0)),
                            DisplayName = "Performer",
                            ERPCode = 1L,
                            EnableRecord = true,
                            GuidRecord = new Guid("71b69d07-3b9f-4843-9cf3-1ffc3b608ab8"),
                            Name = "Performer",
                            SortIndex = 1L
                        },
                        new
                        {
                            Id = 2L,
                            Created = new DateTimeOffset(new DateTime(2024, 5, 20, 10, 45, 48, 714, DateTimeKind.Unspecified).AddTicks(13), new TimeSpan(0, 3, 30, 0, 0)),
                            DisplayName = "Action",
                            ERPCode = 2L,
                            EnableRecord = true,
                            GuidRecord = new Guid("c641d698-df5b-4659-9013-bdf88a75a296"),
                            Name = "Action",
                            SortIndex = 2L
                        });
                });

            modelBuilder.Entity("Cheetah.Core.Entities.Dimentions.D_TagType", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnOrder(1)
                        .HasComment("The unique key of each record")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<DateTimeOffset?>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetimeoffset")
                        .HasColumnOrder(6)
                        .HasDefaultValueSql("GETDATE()")
                        .HasComment("Record creation date");

                    b.Property<string>("CreatedBy")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(512)
                        .HasColumnType("nvarchar(512)")
                        .HasDefaultValue("")
                        .HasColumnOrder(12)
                        .HasComment("Created by what user?");

                    b.Property<string>("Description")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(512)
                        .HasColumnType("nvarchar(512)")
                        .HasDefaultValue("")
                        .HasColumnOrder(5)
                        .HasComment("Additional description of each record");

                    b.Property<string>("DisplayName")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(512)
                        .HasColumnType("nvarchar(512)")
                        .HasDefaultValue("")
                        .HasColumnOrder(4)
                        .HasComment("The localized name of each record");

                    b.Property<long?>("ERPCode")
                        .HasColumnType("bigint")
                        .HasColumnOrder(10)
                        .HasComment("ID of this record in ERP");

                    b.Property<bool>("EnableRecord")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true)
                        .HasColumnOrder(9)
                        .HasComment("Active status of the record");

                    b.Property<Guid?>("GuidRecord")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnOrder(8)
                        .HasDefaultValueSql("NEWSEQUENTIALID ()")
                        .HasComment("Unique GUID identifier");

                    b.Property<DateTimeOffset?>("LastModified")
                        .ValueGeneratedOnUpdate()
                        .HasColumnType("datetimeoffset")
                        .HasColumnOrder(7)
                        .HasDefaultValueSql("GETDATE()")
                        .HasComment("The date the record was last updated");

                    b.Property<string>("LastModifiedBy")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(512)
                        .HasColumnType("nvarchar(512)")
                        .HasDefaultValue("")
                        .HasColumnOrder(11)
                        .HasComment("By which user has it been updated?");

                    b.Property<string>("Name")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(512)
                        .HasColumnType("nvarchar(512)")
                        .HasDefaultValue("")
                        .HasColumnOrder(3)
                        .HasComment("English name of each record");

                    b.Property<long?>("SortIndex")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasDefaultValue(0L)
                        .HasColumnOrder(2)
                        .HasComment("The sort index of the record");

                    b.HasKey("Id");

                    b.HasIndex("Created")
                        .IsDescending();

                    b.HasIndex("ERPCode")
                        .IsDescending();

                    b.HasIndex("EnableRecord")
                        .IsDescending();

                    b.HasIndex("LastModified")
                        .IsDescending();

                    b.HasIndex("Name")
                        .IsDescending();

                    b.ToTable("D_TagType", "Dimentions", t =>
                        {
                            t.HasComment("Numeric, Text, Date, binary");
                        });

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            Created = new DateTimeOffset(new DateTime(2024, 5, 20, 10, 45, 48, 713, DateTimeKind.Unspecified).AddTicks(8743), new TimeSpan(0, 3, 30, 0, 0)),
                            DisplayName = "عددی",
                            ERPCode = 1L,
                            EnableRecord = true,
                            GuidRecord = new Guid("601ee9d6-6776-4bdb-b659-bb1f112a9313"),
                            Name = "Numberic",
                            SortIndex = 1L
                        },
                        new
                        {
                            Id = 2L,
                            Created = new DateTimeOffset(new DateTime(2024, 5, 20, 10, 45, 48, 713, DateTimeKind.Unspecified).AddTicks(8754), new TimeSpan(0, 3, 30, 0, 0)),
                            DisplayName = "دودویی",
                            ERPCode = 2L,
                            EnableRecord = true,
                            GuidRecord = new Guid("c93361ae-4965-4425-809b-782e3d3998e1"),
                            Name = "Boolean",
                            SortIndex = 2L
                        },
                        new
                        {
                            Id = 3L,
                            Created = new DateTimeOffset(new DateTime(2024, 5, 20, 10, 45, 48, 713, DateTimeKind.Unspecified).AddTicks(8757), new TimeSpan(0, 3, 30, 0, 0)),
                            DisplayName = "تاریخ",
                            ERPCode = 3L,
                            EnableRecord = true,
                            GuidRecord = new Guid("c2b5ee3a-21c3-44d7-9122-c3d6ed818b01"),
                            Name = "Date",
                            SortIndex = 3L
                        },
                        new
                        {
                            Id = 4L,
                            Created = new DateTimeOffset(new DateTime(2024, 5, 20, 10, 45, 48, 713, DateTimeKind.Unspecified).AddTicks(8760), new TimeSpan(0, 3, 30, 0, 0)),
                            DisplayName = "حروف",
                            ERPCode = 4L,
                            EnableRecord = true,
                            GuidRecord = new Guid("6f41609f-2006-499e-9e4c-6d769ef6a82e"),
                            Name = "String",
                            SortIndex = 4L
                        });
                });

            modelBuilder.Entity("Cheetah.Core.Entities.Dimentions.D_User", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnOrder(1)
                        .HasComment("The unique key of each record")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<DateTimeOffset?>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetimeoffset")
                        .HasColumnOrder(6)
                        .HasDefaultValueSql("GETDATE()")
                        .HasComment("Record creation date");

                    b.Property<string>("CreatedBy")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(512)
                        .HasColumnType("nvarchar(512)")
                        .HasDefaultValue("")
                        .HasColumnOrder(12)
                        .HasComment("Created by what user?");

                    b.Property<bool?>("CreatedCasesSkipAssigRules")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false)
                        .HasColumnOrder(105);

                    b.Property<bool?>("DelegateEnabled")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false)
                        .HasColumnOrder(104);

                    b.Property<long?>("DelegateId")
                        .HasColumnType("bigint")
                        .HasColumnOrder(109);

                    b.Property<string>("Description")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(512)
                        .HasColumnType("nvarchar(512)")
                        .HasDefaultValue("")
                        .HasColumnOrder(5)
                        .HasComment("Additional description of each record");

                    b.Property<string>("DisplayName")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(512)
                        .HasColumnType("nvarchar(512)")
                        .HasDefaultValue("")
                        .HasColumnOrder(4)
                        .HasComment("The localized name of each record");

                    b.Property<string>("Core")
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)")
                        .HasColumnOrder(102);

                    b.Property<long?>("ERPCode")
                        .HasColumnType("bigint")
                        .HasColumnOrder(10)
                        .HasComment("ID of this record in ERP");

                    b.Property<bool>("EnableRecord")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true)
                        .HasColumnOrder(9)
                        .HasComment("Active status of the record");

                    b.Property<bool?>("EnabledForAssignation")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true)
                        .HasColumnOrder(103);

                    b.Property<Guid?>("GuidRecord")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnOrder(8)
                        .HasDefaultValueSql("NEWSEQUENTIALID ()")
                        .HasComment("Unique GUID identifier");

                    b.Property<string>("IDPersonel")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)")
                        .HasColumnOrder(106);

                    b.Property<string>("LDAPDescription")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnOrder(107);

                    b.Property<DateTimeOffset?>("LastModified")
                        .ValueGeneratedOnUpdate()
                        .HasColumnType("datetimeoffset")
                        .HasColumnOrder(7)
                        .HasDefaultValueSql("GETDATE()")
                        .HasComment("The date the record was last updated");

                    b.Property<string>("LastModifiedBy")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(512)
                        .HasColumnType("nvarchar(512)")
                        .HasDefaultValue("")
                        .HasColumnOrder(11)
                        .HasComment("By which user has it been updated?");

                    b.Property<string>("Name")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(512)
                        .HasColumnType("nvarchar(512)")
                        .HasDefaultValue("")
                        .HasColumnOrder(3)
                        .HasComment("English name of each record");

                    b.Property<long?>("Parent_Id")
                        .HasColumnType("bigint");

                    b.Property<long?>("SortIndex")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasDefaultValue(0L)
                        .HasColumnOrder(2)
                        .HasComment("The sort index of the record");

                    b.Property<long?>("UserInformationId")
                        .HasColumnType("bigint")
                        .HasColumnOrder(110);

                    b.HasKey("Id");

                    b.HasIndex("Created")
                        .IsDescending();

                    b.HasIndex("DelegateId")
                        .IsUnique()
                        .HasFilter("[DelegateId] IS NOT NULL");

                    b.HasIndex("ERPCode")
                        .IsDescending();

                    b.HasIndex("EnableRecord")
                        .IsDescending();

                    b.HasIndex("LastModified")
                        .IsDescending();

                    b.HasIndex("Name")
                        .IsDescending();

                    b.HasIndex("Parent_Id");

                    b.HasIndex("UserInformationId");

                    b.ToTable("D_User", "Dimentions", t =>
                        {
                            t.HasComment("Cheetah's user");
                        });

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            Created = new DateTimeOffset(new DateTime(2024, 5, 20, 10, 45, 48, 715, DateTimeKind.Unspecified).AddTicks(2618), new TimeSpan(0, 3, 30, 0, 0)),
                            DisplayName = "محمد شریفی",
                            ERPCode = 1L,
                            EnableRecord = true,
                            GuidRecord = new Guid("38f99caf-a79f-41d8-a789-1c4cd3b8babd"),
                            Name = "m.sharifi",
                            SortIndex = 1L
                        },
                        new
                        {
                            Id = 2L,
                            Created = new DateTimeOffset(new DateTime(2024, 5, 20, 10, 45, 48, 715, DateTimeKind.Unspecified).AddTicks(2643), new TimeSpan(0, 3, 30, 0, 0)),
                            DisplayName = "امین شریفی",
                            ERPCode = 2L,
                            EnableRecord = true,
                            GuidRecord = new Guid("ce496182-15e8-44ee-85c6-b07a847d7b34"),
                            Name = "a.sharifi",
                            SortIndex = 2L
                        });
                });

            modelBuilder.Entity("Cheetah.Core.Entities.Dimentions.D_UserInformation", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnOrder(1)
                        .HasComment("The unique key of each record")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("Address")
                        .HasMaxLength(512)
                        .HasColumnType("nvarchar(512)")
                        .HasColumnOrder(112);

                    b.Property<DateTime?>("Birthdate")
                        .HasColumnType("datetime2")
                        .HasColumnOrder(110);

                    b.Property<string>("ContactCell")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnOrder(107);

                    b.Property<string>("ContactEmail")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnOrder(105);

                    b.Property<string>("ContactMessenger")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnOrder(106);

                    b.Property<DateTimeOffset?>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetimeoffset")
                        .HasColumnOrder(6)
                        .HasDefaultValueSql("GETDATE()")
                        .HasComment("Record creation date");

                    b.Property<string>("CreatedBy")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(512)
                        .HasColumnType("nvarchar(512)")
                        .HasDefaultValue("")
                        .HasColumnOrder(12)
                        .HasComment("Created by what user?");

                    b.Property<string>("Description")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(512)
                        .HasColumnType("nvarchar(512)")
                        .HasDefaultValue("")
                        .HasColumnOrder(5)
                        .HasComment("Additional description of each record");

                    b.Property<string>("DisplayName")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(512)
                        .HasColumnType("nvarchar(512)")
                        .HasDefaultValue("")
                        .HasColumnOrder(4)
                        .HasComment("The localized name of each record");

                    b.Property<long?>("ERPCode")
                        .HasColumnType("bigint")
                        .HasColumnOrder(10)
                        .HasComment("ID of this record in ERP");

                    b.Property<bool>("EnableRecord")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true)
                        .HasColumnOrder(9)
                        .HasComment("Active status of the record");

                    b.Property<string>("FirstName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnOrder(100);

                    b.Property<Guid?>("GuidRecord")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnOrder(8)
                        .HasDefaultValueSql("NEWSEQUENTIALID ()")
                        .HasComment("Unique GUID identifier");

                    b.Property<string>("InternalPhone")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnOrder(111);

                    b.Property<DateTimeOffset?>("LastModified")
                        .ValueGeneratedOnUpdate()
                        .HasColumnType("datetimeoffset")
                        .HasColumnOrder(7)
                        .HasDefaultValueSql("GETDATE()")
                        .HasComment("The date the record was last updated");

                    b.Property<string>("LastModifiedBy")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(512)
                        .HasColumnType("nvarchar(512)")
                        .HasDefaultValue("")
                        .HasColumnOrder(11)
                        .HasComment("By which user has it been updated?");

                    b.Property<string>("LastName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnOrder(101);

                    b.Property<string>("Name")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(512)
                        .HasColumnType("nvarchar(512)")
                        .HasDefaultValue("")
                        .HasColumnOrder(3)
                        .HasComment("English name of each record");

                    b.Property<string>("NationalCode")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnOrder(109);

                    b.Property<bool?>("NotifByCell")
                        .HasColumnType("bit")
                        .HasColumnOrder(104);

                    b.Property<bool?>("NotifByEmail")
                        .HasColumnType("bit")
                        .HasColumnOrder(102);

                    b.Property<bool?>("NotifByMessenger")
                        .HasColumnType("bit")
                        .HasColumnOrder(103);

                    b.Property<string>("RegistrationNumber")
                        .HasMaxLength(215)
                        .HasColumnType("nvarchar(215)")
                        .HasColumnOrder(113);

                    b.Property<long?>("SortIndex")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasDefaultValue(0L)
                        .HasColumnOrder(2)
                        .HasComment("The sort index of the record");

                    b.Property<byte[]>("UserPicture")
                        .HasColumnType("varbinary(max)")
                        .HasColumnOrder(108);

                    b.HasKey("Id");

                    b.HasIndex("Created")
                        .IsDescending();

                    b.HasIndex("ERPCode")
                        .IsDescending();

                    b.HasIndex("EnableRecord")
                        .IsDescending();

                    b.HasIndex("LastModified")
                        .IsDescending();

                    b.HasIndex("Name")
                        .IsDescending();

                    b.ToTable("D_UserInformation", "Dimentions", t =>
                        {
                            t.HasComment("Additional user information");
                        });
                });

            modelBuilder.Entity("Cheetah.Core.Entities.Dimentions.D_WorkItemState", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnOrder(1)
                        .HasComment("The unique key of each record")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<DateTimeOffset?>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetimeoffset")
                        .HasColumnOrder(6)
                        .HasDefaultValueSql("GETDATE()")
                        .HasComment("Record creation date");

                    b.Property<string>("CreatedBy")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(512)
                        .HasColumnType("nvarchar(512)")
                        .HasDefaultValue("")
                        .HasColumnOrder(12)
                        .HasComment("Created by what user?");

                    b.Property<string>("Description")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(512)
                        .HasColumnType("nvarchar(512)")
                        .HasDefaultValue("")
                        .HasColumnOrder(5)
                        .HasComment("Additional description of each record");

                    b.Property<string>("DisplayName")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(512)
                        .HasColumnType("nvarchar(512)")
                        .HasDefaultValue("")
                        .HasColumnOrder(4)
                        .HasComment("The localized name of each record");

                    b.Property<long?>("ERPCode")
                        .HasColumnType("bigint")
                        .HasColumnOrder(10)
                        .HasComment("ID of this record in ERP");

                    b.Property<bool>("EnableRecord")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true)
                        .HasColumnOrder(9)
                        .HasComment("Active status of the record");

                    b.Property<Guid?>("GuidRecord")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnOrder(8)
                        .HasDefaultValueSql("NEWSEQUENTIALID ()")
                        .HasComment("Unique GUID identifier");

                    b.Property<DateTimeOffset?>("LastModified")
                        .ValueGeneratedOnUpdate()
                        .HasColumnType("datetimeoffset")
                        .HasColumnOrder(7)
                        .HasDefaultValueSql("GETDATE()")
                        .HasComment("The date the record was last updated");

                    b.Property<string>("LastModifiedBy")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(512)
                        .HasColumnType("nvarchar(512)")
                        .HasDefaultValue("")
                        .HasColumnOrder(11)
                        .HasComment("By which user has it been updated?");

                    b.Property<string>("Name")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(512)
                        .HasColumnType("nvarchar(512)")
                        .HasDefaultValue("")
                        .HasColumnOrder(3)
                        .HasComment("English name of each record");

                    b.Property<long?>("SortIndex")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasDefaultValue(0L)
                        .HasColumnOrder(2)
                        .HasComment("The sort index of the record");

                    b.HasKey("Id");

                    b.HasIndex("Created")
                        .IsDescending();

                    b.HasIndex("ERPCode")
                        .IsDescending();

                    b.HasIndex("EnableRecord")
                        .IsDescending();

                    b.HasIndex("LastModified")
                        .IsDescending();

                    b.HasIndex("Name")
                        .IsDescending();

                    b.ToTable("D_WorkItemState", "Dimentions", t =>
                        {
                            t.HasComment("State of the WorkItem");
                        });

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            Created = new DateTimeOffset(new DateTime(2024, 5, 20, 10, 45, 48, 714, DateTimeKind.Unspecified).AddTicks(9534), new TimeSpan(0, 3, 30, 0, 0)),
                            DisplayName = "صندوق ورودی",
                            ERPCode = 1L,
                            EnableRecord = true,
                            GuidRecord = new Guid("4b12b52b-0609-4502-a328-04570408bac7"),
                            Name = "Inbox",
                            SortIndex = 1L
                        },
                        new
                        {
                            Id = 2L,
                            Created = new DateTimeOffset(new DateTime(2024, 5, 20, 10, 45, 48, 714, DateTimeKind.Unspecified).AddTicks(9539), new TimeSpan(0, 3, 30, 0, 0)),
                            DisplayName = "ارسال شده",
                            ERPCode = 2L,
                            EnableRecord = true,
                            GuidRecord = new Guid("027b6066-d988-4a17-808f-cc3b38bed973"),
                            Name = "Sent",
                            SortIndex = 2L
                        },
                        new
                        {
                            Id = 3L,
                            Created = new DateTimeOffset(new DateTime(2024, 5, 20, 10, 45, 48, 714, DateTimeKind.Unspecified).AddTicks(9542), new TimeSpan(0, 3, 30, 0, 0)),
                            DisplayName = "خارج شده",
                            ERPCode = 3L,
                            EnableRecord = true,
                            GuidRecord = new Guid("76cf84c0-9eee-4510-9652-3d592a56cba9"),
                            Name = "Exit",
                            SortIndex = 3L
                        },
                        new
                        {
                            Id = 4L,
                            Created = new DateTimeOffset(new DateTime(2024, 5, 20, 10, 45, 48, 714, DateTimeKind.Unspecified).AddTicks(9575), new TimeSpan(0, 3, 30, 0, 0)),
                            DisplayName = "آینده",
                            ERPCode = 4L,
                            EnableRecord = true,
                            GuidRecord = new Guid("d3b629df-5686-45d5-9123-5e0f07676026"),
                            Name = "Future",
                            SortIndex = 4L
                        });
                });

            modelBuilder.Entity("Cheetah.Core.Entities.Facts.F_Case", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnOrder(1)
                        .HasComment("The unique key of each record")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<long?>("CaseStateId")
                        .HasColumnType("bigint")
                        .HasColumnOrder(110);

                    b.Property<DateTimeOffset?>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetimeoffset")
                        .HasColumnOrder(6)
                        .HasDefaultValueSql("GETDATE()")
                        .HasComment("Record creation date");

                    b.Property<string>("CreatedBy")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(512)
                        .HasColumnType("nvarchar(512)")
                        .HasDefaultValue("")
                        .HasColumnOrder(12)
                        .HasComment("Created by what user?");

                    b.Property<long?>("CreatorId")
                        .HasColumnType("bigint")
                        .HasColumnOrder(107);

                    b.Property<string>("Description")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(512)
                        .HasColumnType("nvarchar(512)")
                        .HasDefaultValue("")
                        .HasColumnOrder(5)
                        .HasComment("Additional description of each record");

                    b.Property<string>("DisplayName")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(512)
                        .HasColumnType("nvarchar(512)")
                        .HasDefaultValue("")
                        .HasColumnOrder(4)
                        .HasComment("The localized name of each record");

                    b.Property<long?>("ERPCode")
                        .HasColumnType("bigint")
                        .HasColumnOrder(10)
                        .HasComment("ID of this record in ERP");

                    b.Property<bool>("EnableRecord")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true)
                        .HasColumnOrder(9)
                        .HasComment("Active status of the record");

                    b.Property<Guid?>("GuidRecord")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnOrder(8)
                        .HasDefaultValueSql("NEWSEQUENTIALID ()")
                        .HasComment("Unique GUID identifier");

                    b.Property<DateTimeOffset?>("LastModified")
                        .ValueGeneratedOnUpdate()
                        .HasColumnType("datetimeoffset")
                        .HasColumnOrder(7)
                        .HasDefaultValueSql("GETDATE()")
                        .HasComment("The date the record was last updated");

                    b.Property<string>("LastModifiedBy")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(512)
                        .HasColumnType("nvarchar(512)")
                        .HasDefaultValue("")
                        .HasColumnOrder(11)
                        .HasComment("By which user has it been updated?");

                    b.Property<string>("Name")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(512)
                        .HasColumnType("nvarchar(512)")
                        .HasDefaultValue("")
                        .HasColumnOrder(3)
                        .HasComment("English name of each record");

                    b.Property<long?>("ProcessId")
                        .HasColumnType("bigint")
                        .HasColumnOrder(111);

                    b.Property<long?>("RequestorId")
                        .HasColumnType("bigint")
                        .HasColumnOrder(106);

                    b.Property<long?>("SelectedScenarioId")
                        .HasColumnType("bigint")
                        .HasColumnOrder(113);

                    b.Property<long?>("SortIndex")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasDefaultValue(0L)
                        .HasColumnOrder(2)
                        .HasComment("The sort index of the record");

                    b.HasKey("Id");

                    b.HasIndex("CaseStateId");

                    b.HasIndex("Created")
                        .IsDescending();

                    b.HasIndex("ERPCode")
                        .IsDescending();

                    b.HasIndex("EnableRecord")
                        .IsDescending();

                    b.HasIndex("LastModified")
                        .IsDescending();

                    b.HasIndex("Name")
                        .IsDescending();

                    b.ToTable("F_Case", "Facts", t =>
                        {
                            t.HasComment("Each request create one record in this table");
                        });
                });

            modelBuilder.Entity("Cheetah.Core.Entities.Facts.F_Condition", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnOrder(1)
                        .HasComment("The unique key of each record")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<DateTimeOffset?>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetimeoffset")
                        .HasColumnOrder(6)
                        .HasDefaultValueSql("GETDATE()")
                        .HasComment("Record creation date");

                    b.Property<string>("CreatedBy")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(512)
                        .HasColumnType("nvarchar(512)")
                        .HasDefaultValue("")
                        .HasColumnOrder(12)
                        .HasComment("Created by what user?");

                    b.Property<string>("Description")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(512)
                        .HasColumnType("nvarchar(512)")
                        .HasDefaultValue("")
                        .HasColumnOrder(5)
                        .HasComment("Additional description of each record");

                    b.Property<string>("DisplayName")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(512)
                        .HasColumnType("nvarchar(512)")
                        .HasDefaultValue("")
                        .HasColumnOrder(4)
                        .HasComment("The localized name of each record");

                    b.Property<long?>("ERPCode")
                        .HasColumnType("bigint")
                        .HasColumnOrder(10)
                        .HasComment("ID of this record in ERP");

                    b.Property<bool>("EnableRecord")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true)
                        .HasColumnOrder(9)
                        .HasComment("Active status of the record");

                    b.Property<Guid?>("GuidRecord")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnOrder(8)
                        .HasDefaultValueSql("NEWSEQUENTIALID ()")
                        .HasComment("Unique GUID identifier");

                    b.Property<DateTimeOffset?>("LastModified")
                        .ValueGeneratedOnUpdate()
                        .HasColumnType("datetimeoffset")
                        .HasColumnOrder(7)
                        .HasDefaultValueSql("GETDATE()")
                        .HasComment("The date the record was last updated");

                    b.Property<string>("LastModifiedBy")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(512)
                        .HasColumnType("nvarchar(512)")
                        .HasDefaultValue("")
                        .HasColumnOrder(11)
                        .HasComment("By which user has it been updated?");

                    b.Property<string>("Name")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(512)
                        .HasColumnType("nvarchar(512)")
                        .HasDefaultValue("")
                        .HasColumnOrder(3)
                        .HasComment("English name of each record");

                    b.Property<long?>("OperandId")
                        .HasColumnType("bigint")
                        .HasColumnOrder(101);

                    b.Property<long?>("SortIndex")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasDefaultValue(0L)
                        .HasColumnOrder(2)
                        .HasComment("The sort index of the record");

                    b.Property<long?>("TagId")
                        .HasColumnType("bigint")
                        .HasColumnOrder(100);

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnOrder(102);

                    b.HasKey("Id");

                    b.HasIndex("Created")
                        .IsDescending();

                    b.HasIndex("ERPCode")
                        .IsDescending();

                    b.HasIndex("EnableRecord")
                        .IsDescending();

                    b.HasIndex("LastModified")
                        .IsDescending();

                    b.HasIndex("Name")
                        .IsDescending();

                    b.HasIndex("OperandId");

                    b.HasIndex("TagId");

                    b.ToTable("F_Condition", "Facts", t =>
                        {
                            t.HasComment("Condition of each tag");
                        });

                    b.HasData(
                        new
                        {
                            Id = 20L,
                            Created = new DateTimeOffset(new DateTime(2024, 5, 20, 10, 45, 48, 713, DateTimeKind.Unspecified).AddTicks(3015), new TimeSpan(0, 3, 30, 0, 0)),
                            DisplayName = "وضعیت بررسی مساوی Approve است.",
                            ERPCode = 20L,
                            EnableRecord = true,
                            GuidRecord = new Guid("b2a698ef-e4ad-46a3-b025-ef9baedb3e57"),
                            Name = "ReviewState = Approve",
                            OperandId = 1L,
                            SortIndex = 20L,
                            TagId = 12L,
                            Value = "Approve"
                        },
                        new
                        {
                            Id = 21L,
                            Created = new DateTimeOffset(new DateTime(2024, 5, 20, 10, 45, 48, 714, DateTimeKind.Unspecified).AddTicks(4376), new TimeSpan(0, 3, 30, 0, 0)),
                            DisplayName = "وضعیت بررسی مساوی Reject است.",
                            ERPCode = 21L,
                            EnableRecord = true,
                            GuidRecord = new Guid("c58db21a-ed57-48ab-9515-4d2977c55f83"),
                            Name = "ReviewState = Reject",
                            OperandId = 1L,
                            SortIndex = 21L,
                            TagId = 12L,
                            Value = "Reject"
                        },
                        new
                        {
                            Id = 22L,
                            Created = new DateTimeOffset(new DateTime(2024, 5, 20, 10, 45, 48, 714, DateTimeKind.Unspecified).AddTicks(4381), new TimeSpan(0, 3, 30, 0, 0)),
                            DisplayName = "وضعیت بررسی مساوی Revise است.",
                            ERPCode = 22L,
                            EnableRecord = true,
                            GuidRecord = new Guid("56d06faa-5dc4-4578-9402-2c443aab3fb8"),
                            Name = "ReviewState = Revise",
                            OperandId = 1L,
                            SortIndex = 22L,
                            TagId = 12L,
                            Value = "Revise"
                        },
                        new
                        {
                            Id = 23L,
                            Created = new DateTimeOffset(new DateTime(2024, 5, 20, 10, 45, 48, 714, DateTimeKind.Unspecified).AddTicks(4442), new TimeSpan(0, 3, 30, 0, 0)),
                            DisplayName = "وضعیت بررسی مساوی SendRequest است.",
                            ERPCode = 23L,
                            EnableRecord = true,
                            GuidRecord = new Guid("3fc1287e-7ff4-4564-a371-9483eded473d"),
                            Name = "ReviewState = SendRequest",
                            OperandId = 1L,
                            SortIndex = 23L,
                            TagId = 12L,
                            Value = "SendRequest"
                        });
                });

            modelBuilder.Entity("Cheetah.Core.Entities.Facts.F_Flow", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnOrder(1)
                        .HasComment("The unique key of each record")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<long?>("CaseStateId")
                        .HasColumnType("bigint");

                    b.Property<DateTimeOffset?>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetimeoffset")
                        .HasColumnOrder(6)
                        .HasDefaultValueSql("GETDATE()")
                        .HasComment("Record creation date");

                    b.Property<string>("CreatedBy")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(512)
                        .HasColumnType("nvarchar(512)")
                        .HasDefaultValue("")
                        .HasColumnOrder(12)
                        .HasComment("Created by what user?");

                    b.Property<string>("Description")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(512)
                        .HasColumnType("nvarchar(512)")
                        .HasDefaultValue("")
                        .HasColumnOrder(5)
                        .HasComment("Additional description of each record");

                    b.Property<string>("DisplayName")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(512)
                        .HasColumnType("nvarchar(512)")
                        .HasDefaultValue("")
                        .HasColumnOrder(4)
                        .HasComment("The localized name of each record");

                    b.Property<long?>("ERPCode")
                        .HasColumnType("bigint")
                        .HasColumnOrder(10)
                        .HasComment("ID of this record in ERP");

                    b.Property<bool>("EnableRecord")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true)
                        .HasColumnOrder(9)
                        .HasComment("Active status of the record");

                    b.Property<Guid?>("GuidRecord")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnOrder(8)
                        .HasDefaultValueSql("NEWSEQUENTIALID ()")
                        .HasComment("Unique GUID identifier");

                    b.Property<DateTimeOffset?>("LastModified")
                        .ValueGeneratedOnUpdate()
                        .HasColumnType("datetimeoffset")
                        .HasColumnOrder(7)
                        .HasDefaultValueSql("GETDATE()")
                        .HasComment("The date the record was last updated");

                    b.Property<string>("LastModifiedBy")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(512)
                        .HasColumnType("nvarchar(512)")
                        .HasDefaultValue("")
                        .HasColumnOrder(11)
                        .HasComment("By which user has it been updated?");

                    b.Property<string>("Name")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(512)
                        .HasColumnType("nvarchar(512)")
                        .HasDefaultValue("")
                        .HasColumnOrder(3)
                        .HasComment("English name of each record");

                    b.Property<long?>("SortIndex")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasDefaultValue(0L)
                        .HasColumnOrder(2)
                        .HasComment("The sort index of the record");

                    b.HasKey("Id");

                    b.HasIndex("Created")
                        .IsDescending();

                    b.HasIndex("ERPCode")
                        .IsDescending();

                    b.HasIndex("EnableRecord")
                        .IsDescending();

                    b.HasIndex("LastModified")
                        .IsDescending();

                    b.HasIndex("Name")
                        .IsDescending();

                    b.ToTable("F_Flow", "Facts", t =>
                        {
                            t.HasComment("Flow of BPMN for transferring between tasks");
                        });
                });

            modelBuilder.Entity("Cheetah.Core.Entities.Facts.F_Scenario", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnOrder(1)
                        .HasComment("The unique key of each record")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<DateTimeOffset?>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetimeoffset")
                        .HasColumnOrder(6)
                        .HasDefaultValueSql("GETDATE()")
                        .HasComment("Record creation date");

                    b.Property<string>("CreatedBy")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(512)
                        .HasColumnType("nvarchar(512)")
                        .HasDefaultValue("")
                        .HasColumnOrder(12)
                        .HasComment("Created by what user?");

                    b.Property<string>("Description")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(512)
                        .HasColumnType("nvarchar(512)")
                        .HasDefaultValue("")
                        .HasColumnOrder(5)
                        .HasComment("Additional description of each record");

                    b.Property<string>("DisplayName")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(512)
                        .HasColumnType("nvarchar(512)")
                        .HasDefaultValue("")
                        .HasColumnOrder(4)
                        .HasComment("The localized name of each record");

                    b.Property<long?>("ERPCode")
                        .HasColumnType("bigint")
                        .HasColumnOrder(10)
                        .HasComment("ID of this record in ERP");

                    b.Property<bool>("EnableRecord")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true)
                        .HasColumnOrder(9)
                        .HasComment("Active status of the record");

                    b.Property<Guid?>("GuidRecord")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnOrder(8)
                        .HasDefaultValueSql("NEWSEQUENTIALID ()")
                        .HasComment("Unique GUID identifier");

                    b.Property<DateTimeOffset?>("LastModified")
                        .ValueGeneratedOnUpdate()
                        .HasColumnType("datetimeoffset")
                        .HasColumnOrder(7)
                        .HasDefaultValueSql("GETDATE()")
                        .HasComment("The date the record was last updated");

                    b.Property<string>("LastModifiedBy")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(512)
                        .HasColumnType("nvarchar(512)")
                        .HasDefaultValue("")
                        .HasColumnOrder(11)
                        .HasComment("By which user has it been updated?");

                    b.Property<string>("Name")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(512)
                        .HasColumnType("nvarchar(512)")
                        .HasDefaultValue("")
                        .HasColumnOrder(3)
                        .HasComment("English name of each record");

                    b.Property<long?>("SortIndex")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasDefaultValue(0L)
                        .HasColumnOrder(2)
                        .HasComment("The sort index of the record");

                    b.HasKey("Id");

                    b.HasIndex("Created")
                        .IsDescending();

                    b.HasIndex("ERPCode")
                        .IsDescending();

                    b.HasIndex("EnableRecord")
                        .IsDescending();

                    b.HasIndex("LastModified")
                        .IsDescending();

                    b.HasIndex("Name")
                        .IsDescending();

                    b.ToTable("F_Scenario", "Facts", t =>
                        {
                            t.HasComment("Scenario of processes");
                        });

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            Created = new DateTimeOffset(new DateTime(2024, 5, 20, 10, 45, 48, 712, DateTimeKind.Unspecified).AddTicks(7704), new TimeSpan(0, 3, 30, 0, 0)),
                            DisplayName = "سناریو نمونه",
                            ERPCode = 1L,
                            EnableRecord = true,
                            GuidRecord = new Guid("d70bb6c5-2eeb-496a-932b-ac0fb73541b9"),
                            Name = "SampleScenario",
                            SortIndex = 1L
                        });
                });

            modelBuilder.Entity("Cheetah.Core.Entities.Facts.F_Task", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnOrder(1)
                        .HasComment("The unique key of each record")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<DateTimeOffset?>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetimeoffset")
                        .HasColumnOrder(6)
                        .HasDefaultValueSql("GETDATE()")
                        .HasComment("Record creation date");

                    b.Property<string>("CreatedBy")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(512)
                        .HasColumnType("nvarchar(512)")
                        .HasDefaultValue("")
                        .HasColumnOrder(12)
                        .HasComment("Created by what user?");

                    b.Property<string>("Description")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(512)
                        .HasColumnType("nvarchar(512)")
                        .HasDefaultValue("")
                        .HasColumnOrder(5)
                        .HasComment("Additional description of each record");

                    b.Property<string>("DisplayName")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(512)
                        .HasColumnType("nvarchar(512)")
                        .HasDefaultValue("")
                        .HasColumnOrder(4)
                        .HasComment("The localized name of each record");

                    b.Property<long?>("ERPCode")
                        .HasColumnType("bigint")
                        .HasColumnOrder(10)
                        .HasComment("ID of this record in ERP");

                    b.Property<bool>("EnableRecord")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true)
                        .HasColumnOrder(9)
                        .HasComment("Active status of the record");

                    b.Property<Guid?>("GuidRecord")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnOrder(8)
                        .HasDefaultValueSql("NEWSEQUENTIALID ()")
                        .HasComment("Unique GUID identifier");

                    b.Property<DateTimeOffset?>("LastModified")
                        .ValueGeneratedOnUpdate()
                        .HasColumnType("datetimeoffset")
                        .HasColumnOrder(7)
                        .HasDefaultValueSql("GETDATE()")
                        .HasComment("The date the record was last updated");

                    b.Property<string>("LastModifiedBy")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(512)
                        .HasColumnType("nvarchar(512)")
                        .HasDefaultValue("")
                        .HasColumnOrder(11)
                        .HasComment("By which user has it been updated?");

                    b.Property<string>("Name")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(512)
                        .HasColumnType("nvarchar(512)")
                        .HasDefaultValue("")
                        .HasColumnOrder(3)
                        .HasComment("English name of each record");

                    b.Property<long?>("ScenarioId")
                        .HasColumnType("bigint")
                        .HasColumnOrder(101);

                    b.Property<long?>("SortIndex")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasDefaultValue(0L)
                        .HasColumnOrder(2)
                        .HasComment("The sort index of the record");

                    b.HasKey("Id");

                    b.HasIndex("Created")
                        .IsDescending();

                    b.HasIndex("ERPCode")
                        .IsDescending();

                    b.HasIndex("EnableRecord")
                        .IsDescending();

                    b.HasIndex("LastModified")
                        .IsDescending();

                    b.HasIndex("Name")
                        .IsDescending();

                    b.HasIndex("ScenarioId");

                    b.ToTable("F_Task", "Facts", t =>
                        {
                            t.HasComment("Entities like position, role, etc.");
                        });

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            Created = new DateTimeOffset(new DateTime(2024, 5, 20, 10, 45, 48, 714, DateTimeKind.Unspecified).AddTicks(6538), new TimeSpan(0, 3, 30, 0, 0)),
                            DisplayName = "ثبت درخواست",
                            ERPCode = 1L,
                            EnableRecord = true,
                            GuidRecord = new Guid("8779be99-4442-42ac-9cb2-fb05ddfe43e8"),
                            Name = "Sample_Scenario_Requestor",
                            ScenarioId = 1L,
                            SortIndex = 1L
                        },
                        new
                        {
                            Id = 2L,
                            Created = new DateTimeOffset(new DateTime(2024, 5, 20, 10, 45, 48, 714, DateTimeKind.Unspecified).AddTicks(6715), new TimeSpan(0, 3, 30, 0, 0)),
                            DisplayName = "بررسی درخواست",
                            ERPCode = 2L,
                            EnableRecord = true,
                            GuidRecord = new Guid("f42eae9b-b42b-4130-9285-bd71b01964cb"),
                            Name = "Sample_Scenario_RequestorManager",
                            ScenarioId = 1L,
                            SortIndex = 2L
                        });
                });

            modelBuilder.Entity("Cheetah.Core.Entities.Facts.F_WorkItem", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnOrder(1)
                        .HasComment("The unique key of each record")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<long?>("CaseId")
                        .HasColumnType("bigint")
                        .HasColumnOrder(103);

                    b.Property<DateTimeOffset?>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetimeoffset")
                        .HasColumnOrder(6)
                        .HasDefaultValueSql("GETDATE()")
                        .HasComment("Record creation date");

                    b.Property<string>("CreatedBy")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(512)
                        .HasColumnType("nvarchar(512)")
                        .HasDefaultValue("")
                        .HasColumnOrder(12)
                        .HasComment("Created by what user?");

                    b.Property<string>("Description")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(512)
                        .HasColumnType("nvarchar(512)")
                        .HasDefaultValue("")
                        .HasColumnOrder(5)
                        .HasComment("Additional description of each record");

                    b.Property<string>("DisplayName")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(512)
                        .HasColumnType("nvarchar(512)")
                        .HasDefaultValue("")
                        .HasColumnOrder(4)
                        .HasComment("The localized name of each record");

                    b.Property<long?>("ERPCode")
                        .HasColumnType("bigint")
                        .HasColumnOrder(10)
                        .HasComment("ID of this record in ERP");

                    b.Property<bool>("EnableRecord")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true)
                        .HasColumnOrder(9)
                        .HasComment("Active status of the record");

                    b.Property<Guid?>("GuidRecord")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnOrder(8)
                        .HasDefaultValueSql("NEWSEQUENTIALID ()")
                        .HasComment("Unique GUID identifier");

                    b.Property<DateTimeOffset?>("LastModified")
                        .ValueGeneratedOnUpdate()
                        .HasColumnType("datetimeoffset")
                        .HasColumnOrder(7)
                        .HasDefaultValueSql("GETDATE()")
                        .HasComment("The date the record was last updated");

                    b.Property<string>("LastModifiedBy")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(512)
                        .HasColumnType("nvarchar(512)")
                        .HasDefaultValue("")
                        .HasColumnOrder(11)
                        .HasComment("By which user has it been updated?");

                    b.Property<string>("Name")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(512)
                        .HasColumnType("nvarchar(512)")
                        .HasDefaultValue("")
                        .HasColumnOrder(3)
                        .HasComment("English name of each record");

                    b.Property<long?>("SortIndex")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasDefaultValue(0L)
                        .HasColumnOrder(2)
                        .HasComment("The sort index of the record");

                    b.Property<long?>("TaskId")
                        .HasColumnType("bigint")
                        .HasColumnOrder(101);

                    b.Property<long?>("UserId")
                        .HasColumnType("bigint")
                        .HasColumnOrder(102);

                    b.Property<long?>("WorkItemStateId")
                        .HasColumnType("bigint")
                        .HasColumnOrder(105);

                    b.HasKey("Id");

                    b.HasIndex("CaseId");

                    b.HasIndex("Created")
                        .IsDescending();

                    b.HasIndex("ERPCode")
                        .IsDescending();

                    b.HasIndex("EnableRecord")
                        .IsDescending();

                    b.HasIndex("LastModified")
                        .IsDescending();

                    b.HasIndex("Name")
                        .IsDescending();

                    b.HasIndex("WorkItemStateId");

                    b.ToTable("F_WorkItem", "Facts", t =>
                        {
                            t.HasComment("Numeric, Text, Date, binary");
                        });
                });

            modelBuilder.Entity("Cheetah.Core.Entities.Links.L_CaseCondition", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnOrder(1)
                        .HasComment("The unique key of each record")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<DateTimeOffset?>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetimeoffset")
                        .HasColumnOrder(6)
                        .HasDefaultValueSql("GETDATE()")
                        .HasComment("Record creation date");

                    b.Property<string>("CreatedBy")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(512)
                        .HasColumnType("nvarchar(512)")
                        .HasDefaultValue("")
                        .HasColumnOrder(12)
                        .HasComment("Created by what user?");

                    b.Property<string>("Description")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(512)
                        .HasColumnType("nvarchar(512)")
                        .HasDefaultValue("")
                        .HasColumnOrder(5)
                        .HasComment("Additional description of each record");

                    b.Property<string>("DisplayName")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(512)
                        .HasColumnType("nvarchar(512)")
                        .HasDefaultValue("")
                        .HasColumnOrder(4)
                        .HasComment("The localized name of each record");

                    b.Property<long?>("ERPCode")
                        .HasColumnType("bigint")
                        .HasColumnOrder(10)
                        .HasComment("ID of this record in ERP");

                    b.Property<bool>("EnableRecord")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true)
                        .HasColumnOrder(9)
                        .HasComment("Active status of the record");

                    b.Property<long?>("FifthId")
                        .HasColumnType("bigint")
                        .HasColumnOrder(104);

                    b.Property<long?>("FirstId")
                        .HasColumnType("bigint")
                        .HasColumnOrder(100);

                    b.Property<long?>("FourthId")
                        .HasColumnType("bigint")
                        .HasColumnOrder(103);

                    b.Property<Guid?>("GuidRecord")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnOrder(8)
                        .HasDefaultValueSql("NEWSEQUENTIALID ()")
                        .HasComment("Unique GUID identifier");

                    b.Property<DateTimeOffset?>("LastModified")
                        .ValueGeneratedOnUpdate()
                        .HasColumnType("datetimeoffset")
                        .HasColumnOrder(7)
                        .HasDefaultValueSql("GETDATE()")
                        .HasComment("The date the record was last updated");

                    b.Property<string>("LastModifiedBy")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(512)
                        .HasColumnType("nvarchar(512)")
                        .HasDefaultValue("")
                        .HasColumnOrder(11)
                        .HasComment("By which user has it been updated?");

                    b.Property<string>("Name")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(512)
                        .HasColumnType("nvarchar(512)")
                        .HasDefaultValue("")
                        .HasColumnOrder(3)
                        .HasComment("English name of each record");

                    b.Property<long?>("SecondId")
                        .HasColumnType("bigint")
                        .HasColumnOrder(101);

                    b.Property<long?>("SortIndex")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasDefaultValue(0L)
                        .HasColumnOrder(2)
                        .HasComment("The sort index of the record");

                    b.Property<long?>("ThirdId")
                        .HasColumnType("bigint")
                        .HasColumnOrder(102);

                    b.HasKey("Id");

                    b.HasIndex("Created")
                        .IsDescending();

                    b.HasIndex("ERPCode")
                        .IsDescending();

                    b.HasIndex("EnableRecord")
                        .IsDescending();

                    b.HasIndex("FifthId")
                        .IsDescending();

                    b.HasIndex("FirstId")
                        .IsDescending();

                    b.HasIndex("FourthId")
                        .IsDescending();

                    b.HasIndex("LastModified")
                        .IsDescending();

                    b.HasIndex("Name")
                        .IsDescending();

                    b.HasIndex("SecondId")
                        .IsDescending();

                    b.HasIndex("ThirdId")
                        .IsDescending();

                    b.ToTable("L_CaseCondition", "Links", t =>
                        {
                            t.HasComment("Conditions of each case for selecting correct scenario");
                        });
                });

            modelBuilder.Entity("Cheetah.Core.Entities.Links.L_CaseTaskUser", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnOrder(1)
                        .HasComment("The unique key of each record")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<DateTimeOffset?>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetimeoffset")
                        .HasColumnOrder(6)
                        .HasDefaultValueSql("GETDATE()")
                        .HasComment("Record creation date");

                    b.Property<string>("CreatedBy")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(512)
                        .HasColumnType("nvarchar(512)")
                        .HasDefaultValue("")
                        .HasColumnOrder(12)
                        .HasComment("Created by what user?");

                    b.Property<string>("Description")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(512)
                        .HasColumnType("nvarchar(512)")
                        .HasDefaultValue("")
                        .HasColumnOrder(5)
                        .HasComment("Additional description of each record");

                    b.Property<string>("DisplayName")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(512)
                        .HasColumnType("nvarchar(512)")
                        .HasDefaultValue("")
                        .HasColumnOrder(4)
                        .HasComment("The localized name of each record");

                    b.Property<long?>("ERPCode")
                        .HasColumnType("bigint")
                        .HasColumnOrder(10)
                        .HasComment("ID of this record in ERP");

                    b.Property<bool>("EnableRecord")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true)
                        .HasColumnOrder(9)
                        .HasComment("Active status of the record");

                    b.Property<long?>("FifthId")
                        .HasColumnType("bigint")
                        .HasColumnOrder(104);

                    b.Property<long?>("FirstId")
                        .HasColumnType("bigint")
                        .HasColumnOrder(100);

                    b.Property<long?>("FourthId")
                        .HasColumnType("bigint")
                        .HasColumnOrder(103);

                    b.Property<Guid?>("GuidRecord")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnOrder(8)
                        .HasDefaultValueSql("NEWSEQUENTIALID ()")
                        .HasComment("Unique GUID identifier");

                    b.Property<DateTimeOffset?>("LastModified")
                        .ValueGeneratedOnUpdate()
                        .HasColumnType("datetimeoffset")
                        .HasColumnOrder(7)
                        .HasDefaultValueSql("GETDATE()")
                        .HasComment("The date the record was last updated");

                    b.Property<string>("LastModifiedBy")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(512)
                        .HasColumnType("nvarchar(512)")
                        .HasDefaultValue("")
                        .HasColumnOrder(11)
                        .HasComment("By which user has it been updated?");

                    b.Property<string>("Name")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(512)
                        .HasColumnType("nvarchar(512)")
                        .HasDefaultValue("")
                        .HasColumnOrder(3)
                        .HasComment("English name of each record");

                    b.Property<long?>("SecondId")
                        .HasColumnType("bigint")
                        .HasColumnOrder(101);

                    b.Property<long?>("SortIndex")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasDefaultValue(0L)
                        .HasColumnOrder(2)
                        .HasComment("The sort index of the record");

                    b.Property<long?>("ThirdId")
                        .HasColumnType("bigint")
                        .HasColumnOrder(102);

                    b.HasKey("Id");

                    b.HasIndex("Created")
                        .IsDescending();

                    b.HasIndex("ERPCode")
                        .IsDescending();

                    b.HasIndex("EnableRecord")
                        .IsDescending();

                    b.HasIndex("FifthId")
                        .IsDescending();

                    b.HasIndex("FirstId")
                        .IsDescending();

                    b.HasIndex("FourthId")
                        .IsDescending();

                    b.HasIndex("LastModified")
                        .IsDescending();

                    b.HasIndex("Name")
                        .IsDescending();

                    b.HasIndex("SecondId")
                        .IsDescending();

                    b.HasIndex("ThirdId")
                        .IsDescending();

                    b.ToTable("L_CaseTaskUser", "Links", t =>
                        {
                            t.HasComment("Manual choosing performer");
                        });
                });

            modelBuilder.Entity("Cheetah.Core.Entities.Links.L_FlowCondition", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnOrder(1)
                        .HasComment("The unique key of each record")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<DateTimeOffset?>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetimeoffset")
                        .HasColumnOrder(6)
                        .HasDefaultValueSql("GETDATE()")
                        .HasComment("Record creation date");

                    b.Property<string>("CreatedBy")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(512)
                        .HasColumnType("nvarchar(512)")
                        .HasDefaultValue("")
                        .HasColumnOrder(12)
                        .HasComment("Created by what user?");

                    b.Property<string>("Description")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(512)
                        .HasColumnType("nvarchar(512)")
                        .HasDefaultValue("")
                        .HasColumnOrder(5)
                        .HasComment("Additional description of each record");

                    b.Property<string>("DisplayName")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(512)
                        .HasColumnType("nvarchar(512)")
                        .HasDefaultValue("")
                        .HasColumnOrder(4)
                        .HasComment("The localized name of each record");

                    b.Property<long?>("ERPCode")
                        .HasColumnType("bigint")
                        .HasColumnOrder(10)
                        .HasComment("ID of this record in ERP");

                    b.Property<bool>("EnableRecord")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true)
                        .HasColumnOrder(9)
                        .HasComment("Active status of the record");

                    b.Property<long?>("FifthId")
                        .HasColumnType("bigint")
                        .HasColumnOrder(104);

                    b.Property<long?>("FirstId")
                        .HasColumnType("bigint")
                        .HasColumnOrder(100);

                    b.Property<long?>("FourthId")
                        .HasColumnType("bigint")
                        .HasColumnOrder(103);

                    b.Property<Guid?>("GuidRecord")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnOrder(8)
                        .HasDefaultValueSql("NEWSEQUENTIALID ()")
                        .HasComment("Unique GUID identifier");

                    b.Property<DateTimeOffset?>("LastModified")
                        .ValueGeneratedOnUpdate()
                        .HasColumnType("datetimeoffset")
                        .HasColumnOrder(7)
                        .HasDefaultValueSql("GETDATE()")
                        .HasComment("The date the record was last updated");

                    b.Property<string>("LastModifiedBy")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(512)
                        .HasColumnType("nvarchar(512)")
                        .HasDefaultValue("")
                        .HasColumnOrder(11)
                        .HasComment("By which user has it been updated?");

                    b.Property<string>("Name")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(512)
                        .HasColumnType("nvarchar(512)")
                        .HasDefaultValue("")
                        .HasColumnOrder(3)
                        .HasComment("English name of each record");

                    b.Property<long?>("SecondId")
                        .HasColumnType("bigint")
                        .HasColumnOrder(101);

                    b.Property<long?>("SortIndex")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasDefaultValue(0L)
                        .HasColumnOrder(2)
                        .HasComment("The sort index of the record");

                    b.Property<long?>("ThirdId")
                        .HasColumnType("bigint")
                        .HasColumnOrder(102);

                    b.HasKey("Id");

                    b.HasIndex("Created")
                        .IsDescending();

                    b.HasIndex("ERPCode")
                        .IsDescending();

                    b.HasIndex("EnableRecord")
                        .IsDescending();

                    b.HasIndex("FifthId")
                        .IsDescending();

                    b.HasIndex("FirstId")
                        .IsDescending();

                    b.HasIndex("FourthId")
                        .IsDescending();

                    b.HasIndex("LastModified")
                        .IsDescending();

                    b.HasIndex("Name")
                        .IsDescending();

                    b.HasIndex("SecondId")
                        .IsDescending();

                    b.HasIndex("ThirdId")
                        .IsDescending();

                    b.ToTable("L_FlowCondition", "Links", t =>
                        {
                            t.HasComment("Conditionals of each flow");
                        });
                });

            modelBuilder.Entity("Cheetah.Core.Entities.Links.L_FlowTask", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnOrder(1)
                        .HasComment("The unique key of each record")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<DateTimeOffset?>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetimeoffset")
                        .HasColumnOrder(6)
                        .HasDefaultValueSql("GETDATE()")
                        .HasComment("Record creation date");

                    b.Property<string>("CreatedBy")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(512)
                        .HasColumnType("nvarchar(512)")
                        .HasDefaultValue("")
                        .HasColumnOrder(12)
                        .HasComment("Created by what user?");

                    b.Property<string>("Description")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(512)
                        .HasColumnType("nvarchar(512)")
                        .HasDefaultValue("")
                        .HasColumnOrder(5)
                        .HasComment("Additional description of each record");

                    b.Property<string>("DisplayName")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(512)
                        .HasColumnType("nvarchar(512)")
                        .HasDefaultValue("")
                        .HasColumnOrder(4)
                        .HasComment("The localized name of each record");

                    b.Property<long?>("ERPCode")
                        .HasColumnType("bigint")
                        .HasColumnOrder(10)
                        .HasComment("ID of this record in ERP");

                    b.Property<bool>("EnableRecord")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true)
                        .HasColumnOrder(9)
                        .HasComment("Active status of the record");

                    b.Property<long?>("FifthId")
                        .HasColumnType("bigint")
                        .HasColumnOrder(104);

                    b.Property<long?>("FirstId")
                        .HasColumnType("bigint")
                        .HasColumnOrder(100);

                    b.Property<long?>("FourthId")
                        .HasColumnType("bigint")
                        .HasColumnOrder(103);

                    b.Property<Guid?>("GuidRecord")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnOrder(8)
                        .HasDefaultValueSql("NEWSEQUENTIALID ()")
                        .HasComment("Unique GUID identifier");

                    b.Property<DateTimeOffset?>("LastModified")
                        .ValueGeneratedOnUpdate()
                        .HasColumnType("datetimeoffset")
                        .HasColumnOrder(7)
                        .HasDefaultValueSql("GETDATE()")
                        .HasComment("The date the record was last updated");

                    b.Property<string>("LastModifiedBy")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(512)
                        .HasColumnType("nvarchar(512)")
                        .HasDefaultValue("")
                        .HasColumnOrder(11)
                        .HasComment("By which user has it been updated?");

                    b.Property<string>("Name")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(512)
                        .HasColumnType("nvarchar(512)")
                        .HasDefaultValue("")
                        .HasColumnOrder(3)
                        .HasComment("English name of each record");

                    b.Property<long?>("SecondId")
                        .HasColumnType("bigint")
                        .HasColumnOrder(101);

                    b.Property<long?>("SortIndex")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasDefaultValue(0L)
                        .HasColumnOrder(2)
                        .HasComment("The sort index of the record");

                    b.Property<long?>("ThirdId")
                        .HasColumnType("bigint")
                        .HasColumnOrder(102);

                    b.HasKey("Id");

                    b.HasIndex("Created")
                        .IsDescending();

                    b.HasIndex("ERPCode")
                        .IsDescending();

                    b.HasIndex("EnableRecord")
                        .IsDescending();

                    b.HasIndex("FifthId")
                        .IsDescending();

                    b.HasIndex("FirstId")
                        .IsDescending();

                    b.HasIndex("FourthId")
                        .IsDescending();

                    b.HasIndex("LastModified")
                        .IsDescending();

                    b.HasIndex("Name")
                        .IsDescending();

                    b.HasIndex("SecondId")
                        .IsDescending();

                    b.HasIndex("ThirdId")
                        .IsDescending();

                    b.ToTable("L_FlowTask", "Links", t =>
                        {
                            t.HasComment("Exit tasks of each flow");
                        });
                });

            modelBuilder.Entity("Cheetah.Core.Entities.Links.L_ProcessScenario", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnOrder(1)
                        .HasComment("The unique key of each record")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<DateTimeOffset?>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetimeoffset")
                        .HasColumnOrder(6)
                        .HasDefaultValueSql("GETDATE()")
                        .HasComment("Record creation date");

                    b.Property<string>("CreatedBy")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(512)
                        .HasColumnType("nvarchar(512)")
                        .HasDefaultValue("")
                        .HasColumnOrder(12)
                        .HasComment("Created by what user?");

                    b.Property<string>("Description")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(512)
                        .HasColumnType("nvarchar(512)")
                        .HasDefaultValue("")
                        .HasColumnOrder(5)
                        .HasComment("Additional description of each record");

                    b.Property<string>("DisplayName")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(512)
                        .HasColumnType("nvarchar(512)")
                        .HasDefaultValue("")
                        .HasColumnOrder(4)
                        .HasComment("The localized name of each record");

                    b.Property<long?>("ERPCode")
                        .HasColumnType("bigint")
                        .HasColumnOrder(10)
                        .HasComment("ID of this record in ERP");

                    b.Property<bool>("EnableRecord")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true)
                        .HasColumnOrder(9)
                        .HasComment("Active status of the record");

                    b.Property<long?>("FifthId")
                        .HasColumnType("bigint")
                        .HasColumnOrder(104);

                    b.Property<long?>("FirstId")
                        .HasColumnType("bigint")
                        .HasColumnOrder(100);

                    b.Property<long?>("FourthId")
                        .HasColumnType("bigint")
                        .HasColumnOrder(103);

                    b.Property<Guid?>("GuidRecord")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnOrder(8)
                        .HasDefaultValueSql("NEWSEQUENTIALID ()")
                        .HasComment("Unique GUID identifier");

                    b.Property<DateTimeOffset?>("LastModified")
                        .ValueGeneratedOnUpdate()
                        .HasColumnType("datetimeoffset")
                        .HasColumnOrder(7)
                        .HasDefaultValueSql("GETDATE()")
                        .HasComment("The date the record was last updated");

                    b.Property<string>("LastModifiedBy")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(512)
                        .HasColumnType("nvarchar(512)")
                        .HasDefaultValue("")
                        .HasColumnOrder(11)
                        .HasComment("By which user has it been updated?");

                    b.Property<string>("Name")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(512)
                        .HasColumnType("nvarchar(512)")
                        .HasDefaultValue("")
                        .HasColumnOrder(3)
                        .HasComment("English name of each record");

                    b.Property<long?>("SecondId")
                        .HasColumnType("bigint")
                        .HasColumnOrder(101);

                    b.Property<long?>("SortIndex")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasDefaultValue(0L)
                        .HasColumnOrder(2)
                        .HasComment("The sort index of the record");

                    b.Property<long?>("ThirdId")
                        .HasColumnType("bigint")
                        .HasColumnOrder(102);

                    b.HasKey("Id");

                    b.HasIndex("Created")
                        .IsDescending();

                    b.HasIndex("ERPCode")
                        .IsDescending();

                    b.HasIndex("EnableRecord")
                        .IsDescending();

                    b.HasIndex("FifthId")
                        .IsDescending();

                    b.HasIndex("FirstId")
                        .IsDescending();

                    b.HasIndex("FourthId")
                        .IsDescending();

                    b.HasIndex("LastModified")
                        .IsDescending();

                    b.HasIndex("Name")
                        .IsDescending();

                    b.HasIndex("SecondId")
                        .IsDescending();

                    b.HasIndex("ThirdId")
                        .IsDescending();

                    b.ToTable("L_ProcessScenario", "Links", t =>
                        {
                            t.HasComment("Related scenarios of each flow");
                        });

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            Created = new DateTimeOffset(new DateTime(2024, 5, 20, 10, 45, 48, 711, DateTimeKind.Unspecified).AddTicks(1251), new TimeSpan(0, 3, 30, 0, 0)),
                            DisplayName = "فرآیند نمونه-سناریو نمونه",
                            ERPCode = 1L,
                            EnableRecord = true,
                            FirstId = 1L,
                            GuidRecord = new Guid("cb24558b-c636-4684-94ce-81a60ad678d7"),
                            Name = "SampleProcess_SampleScenario",
                            SecondId = 1L,
                            SortIndex = 1L
                        });
                });

            modelBuilder.Entity("Cheetah.Core.Entities.Links.L_ScenarioCondition", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnOrder(1)
                        .HasComment("The unique key of each record")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<DateTimeOffset?>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetimeoffset")
                        .HasColumnOrder(6)
                        .HasDefaultValueSql("GETDATE()")
                        .HasComment("Record creation date");

                    b.Property<string>("CreatedBy")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(512)
                        .HasColumnType("nvarchar(512)")
                        .HasDefaultValue("")
                        .HasColumnOrder(12)
                        .HasComment("Created by what user?");

                    b.Property<string>("Description")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(512)
                        .HasColumnType("nvarchar(512)")
                        .HasDefaultValue("")
                        .HasColumnOrder(5)
                        .HasComment("Additional description of each record");

                    b.Property<string>("DisplayName")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(512)
                        .HasColumnType("nvarchar(512)")
                        .HasDefaultValue("")
                        .HasColumnOrder(4)
                        .HasComment("The localized name of each record");

                    b.Property<long?>("ERPCode")
                        .HasColumnType("bigint")
                        .HasColumnOrder(10)
                        .HasComment("ID of this record in ERP");

                    b.Property<bool>("EnableRecord")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true)
                        .HasColumnOrder(9)
                        .HasComment("Active status of the record");

                    b.Property<long?>("FifthId")
                        .HasColumnType("bigint")
                        .HasColumnOrder(104);

                    b.Property<long?>("FirstId")
                        .HasColumnType("bigint")
                        .HasColumnOrder(100);

                    b.Property<long?>("FourthId")
                        .HasColumnType("bigint")
                        .HasColumnOrder(103);

                    b.Property<Guid?>("GuidRecord")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnOrder(8)
                        .HasDefaultValueSql("NEWSEQUENTIALID ()")
                        .HasComment("Unique GUID identifier");

                    b.Property<DateTimeOffset?>("LastModified")
                        .ValueGeneratedOnUpdate()
                        .HasColumnType("datetimeoffset")
                        .HasColumnOrder(7)
                        .HasDefaultValueSql("GETDATE()")
                        .HasComment("The date the record was last updated");

                    b.Property<string>("LastModifiedBy")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(512)
                        .HasColumnType("nvarchar(512)")
                        .HasDefaultValue("")
                        .HasColumnOrder(11)
                        .HasComment("By which user has it been updated?");

                    b.Property<string>("Name")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(512)
                        .HasColumnType("nvarchar(512)")
                        .HasDefaultValue("")
                        .HasColumnOrder(3)
                        .HasComment("English name of each record");

                    b.Property<long?>("SecondId")
                        .HasColumnType("bigint")
                        .HasColumnOrder(101);

                    b.Property<long?>("SortIndex")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasDefaultValue(0L)
                        .HasColumnOrder(2)
                        .HasComment("The sort index of the record");

                    b.Property<long?>("ThirdId")
                        .HasColumnType("bigint")
                        .HasColumnOrder(102);

                    b.HasKey("Id");

                    b.HasIndex("Created")
                        .IsDescending();

                    b.HasIndex("ERPCode")
                        .IsDescending();

                    b.HasIndex("EnableRecord")
                        .IsDescending();

                    b.HasIndex("FifthId")
                        .IsDescending();

                    b.HasIndex("FirstId")
                        .IsDescending();

                    b.HasIndex("FourthId")
                        .IsDescending();

                    b.HasIndex("LastModified")
                        .IsDescending();

                    b.HasIndex("Name")
                        .IsDescending();

                    b.HasIndex("SecondId")
                        .IsDescending();

                    b.HasIndex("ThirdId")
                        .IsDescending();

                    b.ToTable("L_ScenarioCondition", "Links", t =>
                        {
                            t.HasComment("Conditionals of each scenario");
                        });
                });

            modelBuilder.Entity("Cheetah.Core.Entities.Links.L_TaskCondition", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnOrder(1)
                        .HasComment("The unique key of each record")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<DateTimeOffset?>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetimeoffset")
                        .HasColumnOrder(6)
                        .HasDefaultValueSql("GETDATE()")
                        .HasComment("Record creation date");

                    b.Property<string>("CreatedBy")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(512)
                        .HasColumnType("nvarchar(512)")
                        .HasDefaultValue("")
                        .HasColumnOrder(12)
                        .HasComment("Created by what user?");

                    b.Property<string>("Description")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(512)
                        .HasColumnType("nvarchar(512)")
                        .HasDefaultValue("")
                        .HasColumnOrder(5)
                        .HasComment("Additional description of each record");

                    b.Property<string>("DisplayName")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(512)
                        .HasColumnType("nvarchar(512)")
                        .HasDefaultValue("")
                        .HasColumnOrder(4)
                        .HasComment("The localized name of each record");

                    b.Property<long?>("ERPCode")
                        .HasColumnType("bigint")
                        .HasColumnOrder(10)
                        .HasComment("ID of this record in ERP");

                    b.Property<bool>("EnableRecord")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true)
                        .HasColumnOrder(9)
                        .HasComment("Active status of the record");

                    b.Property<long?>("FifthId")
                        .HasColumnType("bigint")
                        .HasColumnOrder(104);

                    b.Property<long?>("FirstId")
                        .HasColumnType("bigint")
                        .HasColumnOrder(100);

                    b.Property<long?>("FourthId")
                        .HasColumnType("bigint")
                        .HasColumnOrder(103);

                    b.Property<Guid?>("GuidRecord")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnOrder(8)
                        .HasDefaultValueSql("NEWSEQUENTIALID ()")
                        .HasComment("Unique GUID identifier");

                    b.Property<DateTimeOffset?>("LastModified")
                        .ValueGeneratedOnUpdate()
                        .HasColumnType("datetimeoffset")
                        .HasColumnOrder(7)
                        .HasDefaultValueSql("GETDATE()")
                        .HasComment("The date the record was last updated");

                    b.Property<string>("LastModifiedBy")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(512)
                        .HasColumnType("nvarchar(512)")
                        .HasDefaultValue("")
                        .HasColumnOrder(11)
                        .HasComment("By which user has it been updated?");

                    b.Property<string>("Name")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(512)
                        .HasColumnType("nvarchar(512)")
                        .HasDefaultValue("")
                        .HasColumnOrder(3)
                        .HasComment("English name of each record");

                    b.Property<long?>("SecondId")
                        .HasColumnType("bigint")
                        .HasColumnOrder(101);

                    b.Property<long?>("SortIndex")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasDefaultValue(0L)
                        .HasColumnOrder(2)
                        .HasComment("The sort index of the record");

                    b.Property<long?>("ThirdId")
                        .HasColumnType("bigint")
                        .HasColumnOrder(102);

                    b.HasKey("Id");

                    b.HasIndex("Created")
                        .IsDescending();

                    b.HasIndex("ERPCode")
                        .IsDescending();

                    b.HasIndex("EnableRecord")
                        .IsDescending();

                    b.HasIndex("FifthId")
                        .IsDescending();

                    b.HasIndex("FirstId")
                        .IsDescending();

                    b.HasIndex("FourthId")
                        .IsDescending();

                    b.HasIndex("LastModified")
                        .IsDescending();

                    b.HasIndex("Name")
                        .IsDescending();

                    b.HasIndex("SecondId")
                        .IsDescending();

                    b.HasIndex("ThirdId")
                        .IsDescending();

                    b.ToTable("L_TaskCondition", "Links", t =>
                        {
                            t.HasComment("Conditionals of each task");
                        });
                });

            modelBuilder.Entity("Cheetah.Core.Entities.Links.L_TaskFlow", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnOrder(1)
                        .HasComment("The unique key of each record")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<DateTimeOffset?>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetimeoffset")
                        .HasColumnOrder(6)
                        .HasDefaultValueSql("GETDATE()")
                        .HasComment("Record creation date");

                    b.Property<string>("CreatedBy")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(512)
                        .HasColumnType("nvarchar(512)")
                        .HasDefaultValue("")
                        .HasColumnOrder(12)
                        .HasComment("Created by what user?");

                    b.Property<string>("Description")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(512)
                        .HasColumnType("nvarchar(512)")
                        .HasDefaultValue("")
                        .HasColumnOrder(5)
                        .HasComment("Additional description of each record");

                    b.Property<string>("DisplayName")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(512)
                        .HasColumnType("nvarchar(512)")
                        .HasDefaultValue("")
                        .HasColumnOrder(4)
                        .HasComment("The localized name of each record");

                    b.Property<long?>("ERPCode")
                        .HasColumnType("bigint")
                        .HasColumnOrder(10)
                        .HasComment("ID of this record in ERP");

                    b.Property<bool>("EnableRecord")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true)
                        .HasColumnOrder(9)
                        .HasComment("Active status of the record");

                    b.Property<long?>("FifthId")
                        .HasColumnType("bigint")
                        .HasColumnOrder(104);

                    b.Property<long?>("FirstId")
                        .HasColumnType("bigint")
                        .HasColumnOrder(100);

                    b.Property<long?>("FourthId")
                        .HasColumnType("bigint")
                        .HasColumnOrder(103);

                    b.Property<Guid?>("GuidRecord")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnOrder(8)
                        .HasDefaultValueSql("NEWSEQUENTIALID ()")
                        .HasComment("Unique GUID identifier");

                    b.Property<DateTimeOffset?>("LastModified")
                        .ValueGeneratedOnUpdate()
                        .HasColumnType("datetimeoffset")
                        .HasColumnOrder(7)
                        .HasDefaultValueSql("GETDATE()")
                        .HasComment("The date the record was last updated");

                    b.Property<string>("LastModifiedBy")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(512)
                        .HasColumnType("nvarchar(512)")
                        .HasDefaultValue("")
                        .HasColumnOrder(11)
                        .HasComment("By which user has it been updated?");

                    b.Property<string>("Name")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(512)
                        .HasColumnType("nvarchar(512)")
                        .HasDefaultValue("")
                        .HasColumnOrder(3)
                        .HasComment("English name of each record");

                    b.Property<long?>("SecondId")
                        .HasColumnType("bigint")
                        .HasColumnOrder(101);

                    b.Property<long?>("SortIndex")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasDefaultValue(0L)
                        .HasColumnOrder(2)
                        .HasComment("The sort index of the record");

                    b.Property<long?>("ThirdId")
                        .HasColumnType("bigint")
                        .HasColumnOrder(102);

                    b.HasKey("Id");

                    b.HasIndex("Created")
                        .IsDescending();

                    b.HasIndex("ERPCode")
                        .IsDescending();

                    b.HasIndex("EnableRecord")
                        .IsDescending();

                    b.HasIndex("FifthId")
                        .IsDescending();

                    b.HasIndex("FirstId")
                        .IsDescending();

                    b.HasIndex("FourthId")
                        .IsDescending();

                    b.HasIndex("LastModified")
                        .IsDescending();

                    b.HasIndex("Name")
                        .IsDescending();

                    b.HasIndex("SecondId")
                        .IsDescending();

                    b.HasIndex("ThirdId")
                        .IsDescending();

                    b.ToTable("L_TaskFlow", "Links", t =>
                        {
                            t.HasComment("Exit flows of each task");
                        });
                });

            modelBuilder.Entity("Cheetah.Core.Entities.Links.L_UserCondition", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnOrder(1)
                        .HasComment("The unique key of each record")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<DateTimeOffset?>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetimeoffset")
                        .HasColumnOrder(6)
                        .HasDefaultValueSql("GETDATE()")
                        .HasComment("Record creation date");

                    b.Property<string>("CreatedBy")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(512)
                        .HasColumnType("nvarchar(512)")
                        .HasDefaultValue("")
                        .HasColumnOrder(12)
                        .HasComment("Created by what user?");

                    b.Property<string>("Description")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(512)
                        .HasColumnType("nvarchar(512)")
                        .HasDefaultValue("")
                        .HasColumnOrder(5)
                        .HasComment("Additional description of each record");

                    b.Property<string>("DisplayName")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(512)
                        .HasColumnType("nvarchar(512)")
                        .HasDefaultValue("")
                        .HasColumnOrder(4)
                        .HasComment("The localized name of each record");

                    b.Property<long?>("ERPCode")
                        .HasColumnType("bigint")
                        .HasColumnOrder(10)
                        .HasComment("ID of this record in ERP");

                    b.Property<bool>("EnableRecord")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true)
                        .HasColumnOrder(9)
                        .HasComment("Active status of the record");

                    b.Property<long?>("FifthId")
                        .HasColumnType("bigint")
                        .HasColumnOrder(104);

                    b.Property<long?>("FirstId")
                        .HasColumnType("bigint")
                        .HasColumnOrder(100);

                    b.Property<long?>("FourthId")
                        .HasColumnType("bigint")
                        .HasColumnOrder(103);

                    b.Property<Guid?>("GuidRecord")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnOrder(8)
                        .HasDefaultValueSql("NEWSEQUENTIALID ()")
                        .HasComment("Unique GUID identifier");

                    b.Property<DateTimeOffset?>("LastModified")
                        .ValueGeneratedOnUpdate()
                        .HasColumnType("datetimeoffset")
                        .HasColumnOrder(7)
                        .HasDefaultValueSql("GETDATE()")
                        .HasComment("The date the record was last updated");

                    b.Property<string>("LastModifiedBy")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(512)
                        .HasColumnType("nvarchar(512)")
                        .HasDefaultValue("")
                        .HasColumnOrder(11)
                        .HasComment("By which user has it been updated?");

                    b.Property<string>("Name")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(512)
                        .HasColumnType("nvarchar(512)")
                        .HasDefaultValue("")
                        .HasColumnOrder(3)
                        .HasComment("English name of each record");

                    b.Property<long?>("SecondId")
                        .HasColumnType("bigint")
                        .HasColumnOrder(101);

                    b.Property<long?>("SortIndex")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasDefaultValue(0L)
                        .HasColumnOrder(2)
                        .HasComment("The sort index of the record");

                    b.Property<long?>("ThirdId")
                        .HasColumnType("bigint")
                        .HasColumnOrder(102);

                    b.HasKey("Id");

                    b.HasIndex("Created")
                        .IsDescending();

                    b.HasIndex("ERPCode")
                        .IsDescending();

                    b.HasIndex("EnableRecord")
                        .IsDescending();

                    b.HasIndex("FifthId")
                        .IsDescending();

                    b.HasIndex("FirstId")
                        .IsDescending();

                    b.HasIndex("FourthId")
                        .IsDescending();

                    b.HasIndex("LastModified")
                        .IsDescending();

                    b.HasIndex("Name")
                        .IsDescending();

                    b.HasIndex("SecondId")
                        .IsDescending();

                    b.HasIndex("ThirdId")
                        .IsDescending();

                    b.ToTable("L_UserCondition", "Links", t =>
                        {
                            t.HasComment("Conditionals of each user");
                        });
                });

            modelBuilder.Entity("Cheetah.Core.Entities.Links.L_UserConditionGroup", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnOrder(1)
                        .HasComment("The unique key of each record")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<DateTimeOffset?>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetimeoffset")
                        .HasColumnOrder(6)
                        .HasDefaultValueSql("GETDATE()")
                        .HasComment("Record creation date");

                    b.Property<string>("CreatedBy")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(512)
                        .HasColumnType("nvarchar(512)")
                        .HasDefaultValue("")
                        .HasColumnOrder(12)
                        .HasComment("Created by what user?");

                    b.Property<string>("Description")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(512)
                        .HasColumnType("nvarchar(512)")
                        .HasDefaultValue("")
                        .HasColumnOrder(5)
                        .HasComment("Additional description of each record");

                    b.Property<string>("DisplayName")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(512)
                        .HasColumnType("nvarchar(512)")
                        .HasDefaultValue("")
                        .HasColumnOrder(4)
                        .HasComment("The localized name of each record");

                    b.Property<long?>("ERPCode")
                        .HasColumnType("bigint")
                        .HasColumnOrder(10)
                        .HasComment("ID of this record in ERP");

                    b.Property<bool>("EnableRecord")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true)
                        .HasColumnOrder(9)
                        .HasComment("Active status of the record");

                    b.Property<long?>("FifthId")
                        .HasColumnType("bigint")
                        .HasColumnOrder(104);

                    b.Property<long?>("FirstId")
                        .HasColumnType("bigint")
                        .HasColumnOrder(100);

                    b.Property<long?>("FourthId")
                        .HasColumnType("bigint")
                        .HasColumnOrder(103);

                    b.Property<Guid?>("GuidRecord")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnOrder(8)
                        .HasDefaultValueSql("NEWSEQUENTIALID ()")
                        .HasComment("Unique GUID identifier");

                    b.Property<long?>("L_UserConditionGroupId")
                        .HasColumnType("bigint");

                    b.Property<DateTimeOffset?>("LastModified")
                        .ValueGeneratedOnUpdate()
                        .HasColumnType("datetimeoffset")
                        .HasColumnOrder(7)
                        .HasDefaultValueSql("GETDATE()")
                        .HasComment("The date the record was last updated");

                    b.Property<string>("LastModifiedBy")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(512)
                        .HasColumnType("nvarchar(512)")
                        .HasDefaultValue("")
                        .HasColumnOrder(11)
                        .HasComment("By which user has it been updated?");

                    b.Property<string>("Name")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(512)
                        .HasColumnType("nvarchar(512)")
                        .HasDefaultValue("")
                        .HasColumnOrder(3)
                        .HasComment("English name of each record");

                    b.Property<long?>("SecondId")
                        .HasColumnType("bigint")
                        .HasColumnOrder(101);

                    b.Property<long?>("SortIndex")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasDefaultValue(0L)
                        .HasColumnOrder(2)
                        .HasComment("The sort index of the record");

                    b.Property<long?>("ThirdId")
                        .HasColumnType("bigint")
                        .HasColumnOrder(102);

                    b.HasKey("Id");

                    b.HasIndex("Created")
                        .IsDescending();

                    b.HasIndex("ERPCode")
                        .IsDescending();

                    b.HasIndex("EnableRecord")
                        .IsDescending();

                    b.HasIndex("FifthId")
                        .IsDescending();

                    b.HasIndex("FirstId")
                        .IsDescending();

                    b.HasIndex("FourthId")
                        .IsDescending();

                    b.HasIndex("L_UserConditionGroupId");

                    b.HasIndex("LastModified")
                        .IsDescending();

                    b.HasIndex("Name")
                        .IsDescending();

                    b.HasIndex("SecondId")
                        .IsDescending();

                    b.HasIndex("ThirdId")
                        .IsDescending();

                    b.ToTable("L_UserConditionGroup", "Links");
                });

            modelBuilder.Entity("Cheetah.Core.Entities.Links.L_WorkItemCondition", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnOrder(1)
                        .HasComment("The unique key of each record")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<DateTimeOffset?>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetimeoffset")
                        .HasColumnOrder(6)
                        .HasDefaultValueSql("GETDATE()")
                        .HasComment("Record creation date");

                    b.Property<string>("CreatedBy")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(512)
                        .HasColumnType("nvarchar(512)")
                        .HasDefaultValue("")
                        .HasColumnOrder(12)
                        .HasComment("Created by what user?");

                    b.Property<string>("Description")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(512)
                        .HasColumnType("nvarchar(512)")
                        .HasDefaultValue("")
                        .HasColumnOrder(5)
                        .HasComment("Additional description of each record");

                    b.Property<string>("DisplayName")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(512)
                        .HasColumnType("nvarchar(512)")
                        .HasDefaultValue("")
                        .HasColumnOrder(4)
                        .HasComment("The localized name of each record");

                    b.Property<long?>("ERPCode")
                        .HasColumnType("bigint")
                        .HasColumnOrder(10)
                        .HasComment("ID of this record in ERP");

                    b.Property<bool>("EnableRecord")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true)
                        .HasColumnOrder(9)
                        .HasComment("Active status of the record");

                    b.Property<long?>("FifthId")
                        .HasColumnType("bigint")
                        .HasColumnOrder(104);

                    b.Property<long?>("FirstId")
                        .HasColumnType("bigint")
                        .HasColumnOrder(100);

                    b.Property<long?>("FourthId")
                        .HasColumnType("bigint")
                        .HasColumnOrder(103);

                    b.Property<Guid?>("GuidRecord")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnOrder(8)
                        .HasDefaultValueSql("NEWSEQUENTIALID ()")
                        .HasComment("Unique GUID identifier");

                    b.Property<DateTimeOffset?>("LastModified")
                        .ValueGeneratedOnUpdate()
                        .HasColumnType("datetimeoffset")
                        .HasColumnOrder(7)
                        .HasDefaultValueSql("GETDATE()")
                        .HasComment("The date the record was last updated");

                    b.Property<string>("LastModifiedBy")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(512)
                        .HasColumnType("nvarchar(512)")
                        .HasDefaultValue("")
                        .HasColumnOrder(11)
                        .HasComment("By which user has it been updated?");

                    b.Property<string>("Name")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(512)
                        .HasColumnType("nvarchar(512)")
                        .HasDefaultValue("")
                        .HasColumnOrder(3)
                        .HasComment("English name of each record");

                    b.Property<long?>("SecondId")
                        .HasColumnType("bigint")
                        .HasColumnOrder(101);

                    b.Property<long?>("SortIndex")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasDefaultValue(0L)
                        .HasColumnOrder(2)
                        .HasComment("The sort index of the record");

                    b.Property<long?>("ThirdId")
                        .HasColumnType("bigint")
                        .HasColumnOrder(102);

                    b.HasKey("Id");

                    b.HasIndex("Created")
                        .IsDescending();

                    b.HasIndex("ERPCode")
                        .IsDescending();

                    b.HasIndex("EnableRecord")
                        .IsDescending();

                    b.HasIndex("FifthId")
                        .IsDescending();

                    b.HasIndex("FirstId")
                        .IsDescending();

                    b.HasIndex("FourthId")
                        .IsDescending();

                    b.HasIndex("LastModified")
                        .IsDescending();

                    b.HasIndex("Name")
                        .IsDescending();

                    b.HasIndex("SecondId")
                        .IsDescending();

                    b.HasIndex("ThirdId")
                        .IsDescending();

                    b.ToTable("L_WorkItemCondition", "Links", t =>
                        {
                            t.HasComment("Conditionals of each workitem");
                        });
                });

            modelBuilder.Entity("Cheetah.Infrastructure.Persistence.Identity.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<long?>("IU_UserId")
                        .HasColumnType("bigint")
                        .HasColumnOrder(101);

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("IU_UserId");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Cheetah.Core.Entities.Dimentions.D_Tag", b =>
                {
                    b.HasOne("Cheetah.Core.Entities.Dimentions.D_TagCategory", "TagCategory")
                        .WithMany()
                        .HasForeignKey("TagCategoryId");

                    b.HasOne("Cheetah.Core.Entities.Dimentions.D_TagType", "TagType")
                        .WithMany()
                        .HasForeignKey("TagTypeId");

                    b.Navigation("TagCategory");

                    b.Navigation("TagType");
                });

            modelBuilder.Entity("Cheetah.Core.Entities.Dimentions.D_User", b =>
                {
                    b.HasOne("Cheetah.Core.Entities.Dimentions.D_User", "Delegate")
                        .WithOne()
                        .HasForeignKey("Cheetah.Core.Entities.Dimentions.D_User", "DelegateId");

                    b.HasOne("Cheetah.Core.Entities.Dimentions.D_User", "Parent")
                        .WithMany("Childs")
                        .HasForeignKey("Parent_Id");

                    b.HasOne("Cheetah.Core.Entities.Dimentions.D_UserInformation", "UserInformation")
                        .WithMany()
                        .HasForeignKey("UserInformationId");

                    b.Navigation("Delegate");

                    b.Navigation("Parent");

                    b.Navigation("UserInformation");
                });

            modelBuilder.Entity("Cheetah.Core.Entities.Facts.F_Case", b =>
                {
                    b.HasOne("Cheetah.Core.Entities.Dimentions.D_CaseState", "CaseState")
                        .WithMany()
                        .HasForeignKey("CaseStateId");

                    b.Navigation("CaseState");
                });

            modelBuilder.Entity("Cheetah.Core.Entities.Facts.F_Condition", b =>
                {
                    b.HasOne("Cheetah.Core.Entities.Dimentions.D_Operand", "Operand")
                        .WithMany()
                        .HasForeignKey("OperandId");

                    b.HasOne("Cheetah.Core.Entities.Dimentions.D_Tag", "Tag")
                        .WithMany()
                        .HasForeignKey("TagId");

                    b.Navigation("Operand");

                    b.Navigation("Tag");
                });

            modelBuilder.Entity("Cheetah.Core.Entities.Facts.F_Task", b =>
                {
                    b.HasOne("Cheetah.Core.Entities.Facts.F_Scenario", "Scenario")
                        .WithMany("Tasks")
                        .HasForeignKey("ScenarioId");

                    b.Navigation("Scenario");
                });

            modelBuilder.Entity("Cheetah.Core.Entities.Facts.F_WorkItem", b =>
                {
                    b.HasOne("Cheetah.Core.Entities.Facts.F_Case", "Case")
                        .WithMany("WorkItems")
                        .HasForeignKey("CaseId");

                    b.HasOne("Cheetah.Core.Entities.Dimentions.D_WorkItemState", "WorkItemState")
                        .WithMany()
                        .HasForeignKey("WorkItemStateId");

                    b.Navigation("Case");

                    b.Navigation("WorkItemState");
                });

            modelBuilder.Entity("Cheetah.Core.Entities.Links.L_CaseCondition", b =>
                {
                    b.HasOne("Cheetah.Core.Entities.Facts.F_Case", "Case")
                        .WithMany("CaseConditions")
                        .HasForeignKey("FirstId");

                    b.Navigation("Case");
                });

            modelBuilder.Entity("Cheetah.Core.Entities.Links.L_CaseTaskUser", b =>
                {
                    b.HasOne("Cheetah.Core.Entities.Facts.F_Case", "Case")
                        .WithMany("CaseTaskUsers")
                        .HasForeignKey("FirstId");

                    b.HasOne("Cheetah.Core.Entities.Facts.F_Task", null)
                        .WithMany()
                        .HasForeignKey("SecondId");

                    b.HasOne("Cheetah.Core.Entities.Dimentions.D_User", null)
                        .WithMany()
                        .HasForeignKey("ThirdId");

                    b.Navigation("Case");
                });

            modelBuilder.Entity("Cheetah.Core.Entities.Links.L_FlowCondition", b =>
                {
                    b.HasOne("Cheetah.Core.Entities.Facts.F_Flow", "Flow")
                        .WithMany("FlowConditions")
                        .HasForeignKey("FirstId");

                    b.HasOne("Cheetah.Core.Entities.Facts.F_Condition", null)
                        .WithMany()
                        .HasForeignKey("SecondId");

                    b.Navigation("Flow");
                });

            modelBuilder.Entity("Cheetah.Core.Entities.Links.L_FlowTask", b =>
                {
                    b.HasOne("Cheetah.Core.Entities.Facts.F_Flow", "Flow")
                        .WithMany("FlowTasks")
                        .HasForeignKey("FirstId");

                    b.HasOne("Cheetah.Core.Entities.Facts.F_Task", "Task")
                        .WithMany("FlowTasks")
                        .HasForeignKey("SecondId");

                    b.Navigation("Flow");

                    b.Navigation("Task");
                });

            modelBuilder.Entity("Cheetah.Core.Entities.Links.L_ProcessScenario", b =>
                {
                    b.HasOne("Cheetah.Core.Entities.Dimentions.D_Process", "Process")
                        .WithMany("ProcessScenarios")
                        .HasForeignKey("FirstId");

                    b.HasOne("Cheetah.Core.Entities.Facts.F_Scenario", "Scenario")
                        .WithMany("ProcessScenarios")
                        .HasForeignKey("SecondId");

                    b.Navigation("Process");

                    b.Navigation("Scenario");
                });

            modelBuilder.Entity("Cheetah.Core.Entities.Links.L_ScenarioCondition", b =>
                {
                    b.HasOne("Cheetah.Core.Entities.Facts.F_Scenario", "Scenario")
                        .WithMany("ScenarioConditions")
                        .HasForeignKey("FirstId");

                    b.Navigation("Scenario");
                });

            modelBuilder.Entity("Cheetah.Core.Entities.Links.L_TaskCondition", b =>
                {
                    b.HasOne("Cheetah.Core.Entities.Facts.F_Task", "Task")
                        .WithMany("TaskConditions")
                        .HasForeignKey("FirstId");

                    b.Navigation("Task");
                });

            modelBuilder.Entity("Cheetah.Core.Entities.Links.L_TaskFlow", b =>
                {
                    b.HasOne("Cheetah.Core.Entities.Facts.F_Task", "Task")
                        .WithMany("TaskFlows")
                        .HasForeignKey("FirstId");

                    b.HasOne("Cheetah.Core.Entities.Facts.F_Flow", "Flow")
                        .WithMany("TaskFlows")
                        .HasForeignKey("SecondId");

                    b.Navigation("Flow");

                    b.Navigation("Task");
                });

            modelBuilder.Entity("Cheetah.Core.Entities.Links.L_UserCondition", b =>
                {
                    b.HasOne("Cheetah.Core.Entities.Dimentions.D_User", "User")
                        .WithMany("UserConditions")
                        .HasForeignKey("FirstId");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Cheetah.Core.Entities.Links.L_UserConditionGroup", b =>
                {
                    b.HasOne("Cheetah.Core.Entities.Dimentions.D_User", "User")
                        .WithMany("UserConditionGroups")
                        .HasForeignKey("FirstId");

                    b.HasOne("Cheetah.Core.Entities.Links.L_UserConditionGroup", null)
                        .WithMany("UserConditionGroups")
                        .HasForeignKey("L_UserConditionGroupId");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Cheetah.Core.Entities.Links.L_WorkItemCondition", b =>
                {
                    b.HasOne("Cheetah.Core.Entities.Facts.F_WorkItem", "WorkItem")
                        .WithMany("WorkItemConditions")
                        .HasForeignKey("FirstId");

                    b.HasOne("Cheetah.Core.Entities.Facts.F_Condition", null)
                        .WithMany()
                        .HasForeignKey("SecondId");

                    b.Navigation("WorkItem");
                });

            modelBuilder.Entity("Cheetah.Infrastructure.Persistence.Identity.ApplicationUser", b =>
                {
                    b.HasOne("Cheetah.Core.Entities.Dimentions.D_User", "IU_User")
                        .WithMany()
                        .HasForeignKey("IU_UserId");

                    b.Navigation("IU_User");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Cheetah.Infrastructure.Persistence.Identity.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Cheetah.Infrastructure.Persistence.Identity.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Cheetah.Infrastructure.Persistence.Identity.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Cheetah.Infrastructure.Persistence.Identity.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Cheetah.Core.Entities.Dimentions.D_Process", b =>
                {
                    b.Navigation("ProcessScenarios");
                });

            modelBuilder.Entity("Cheetah.Core.Entities.Dimentions.D_User", b =>
                {
                    b.Navigation("Childs");

                    b.Navigation("UserConditionGroups");

                    b.Navigation("UserConditions");
                });

            modelBuilder.Entity("Cheetah.Core.Entities.Facts.F_Case", b =>
                {
                    b.Navigation("CaseConditions");

                    b.Navigation("CaseTaskUsers");

                    b.Navigation("WorkItems");
                });

            modelBuilder.Entity("Cheetah.Core.Entities.Facts.F_Flow", b =>
                {
                    b.Navigation("FlowConditions");

                    b.Navigation("FlowTasks");

                    b.Navigation("TaskFlows");
                });

            modelBuilder.Entity("Cheetah.Core.Entities.Facts.F_Scenario", b =>
                {
                    b.Navigation("ProcessScenarios");

                    b.Navigation("ScenarioConditions");

                    b.Navigation("Tasks");
                });

            modelBuilder.Entity("Cheetah.Core.Entities.Facts.F_Task", b =>
                {
                    b.Navigation("FlowTasks");

                    b.Navigation("TaskConditions");

                    b.Navigation("TaskFlows");
                });

            modelBuilder.Entity("Cheetah.Core.Entities.Facts.F_WorkItem", b =>
                {
                    b.Navigation("WorkItemConditions");
                });

            modelBuilder.Entity("Cheetah.Core.Entities.Links.L_UserConditionGroup", b =>
                {
                    b.Navigation("UserConditionGroups");
                });
#pragma warning restore 612, 618
        }
    }
}
