// <auto-generated />
using System;
using Cheetah.Infrastructure.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Cheetah.Infrastructure.Providers.SqlServer.Migrations
{
    [DbContext(typeof(CheetahDbContext))]
    [Migration("20240910073909_Add_CheckValidation")]
    partial class Add_CheckValidation
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.8")
                .HasAnnotation("Proxies:ChangeTracking", false)
                .HasAnnotation("Proxies:CheckEquality", false)
                .HasAnnotation("Proxies:LazyLoading", true)
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Cheetah.Core.Aggregates.CaseAggregate.Dimentions.D_CaseState", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnOrder(1)
                        .HasComment("The unique key of each record")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<DateTimeOffset?>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetimeoffset")
                        .HasColumnOrder(6)
                        .HasDefaultValueSql("GETDATE()")
                        .HasComment("Record creation date");

                    b.Property<string>("CreatedBy")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(512)
                        .HasColumnType("nvarchar(512)")
                        .HasDefaultValue("")
                        .HasColumnOrder(12)
                        .HasComment("Created by what user?");

                    b.Property<string>("Description")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(512)
                        .HasColumnType("nvarchar(512)")
                        .HasDefaultValue("")
                        .HasColumnOrder(5)
                        .HasComment("Additional description of each record");

                    b.Property<string>("DisplayName")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(512)
                        .HasColumnType("nvarchar(512)")
                        .HasDefaultValue("")
                        .HasColumnOrder(4)
                        .HasComment("The localized name of each record");

                    b.Property<long?>("ERPCode")
                        .HasColumnType("bigint")
                        .HasColumnOrder(10)
                        .HasComment("ID of this record in ERP");

                    b.Property<bool>("EnableRecord")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasColumnOrder(9)
                        .HasDefaultValueSql("1")
                        .HasComment("Active status of the record");

                    b.Property<Guid?>("GuidRecord")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnOrder(8)
                        .HasDefaultValueSql("NEWSEQUENTIALID ()")
                        .HasComment("Unique GUID identifier");

                    b.Property<DateTimeOffset?>("LastModified")
                        .HasColumnType("datetimeoffset")
                        .HasColumnOrder(7)
                        .HasComment("The date the record was last updated");

                    b.Property<string>("LastModifiedBy")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(512)
                        .HasColumnType("nvarchar(512)")
                        .HasDefaultValue("")
                        .HasColumnOrder(11)
                        .HasComment("By which user has it been updated?");

                    b.Property<string>("Name")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(512)
                        .HasColumnType("nvarchar(512)")
                        .HasDefaultValue("")
                        .HasColumnOrder(3)
                        .HasComment("English name of each record");

                    b.Property<long?>("SortIndex")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasDefaultValue(0L)
                        .HasColumnOrder(2)
                        .HasComment("The sort index of the record");

                    b.HasKey("Id");

                    b.HasIndex("Created")
                        .IsDescending();

                    b.HasIndex("ERPCode")
                        .IsDescending();

                    b.HasIndex("EnableRecord")
                        .IsDescending();

                    b.HasIndex("LastModified")
                        .IsDescending();

                    b.HasIndex("Name")
                        .IsDescending();

                    b.ToTable("D_CaseState", "Dimentions", t =>
                        {
                            t.HasComment("State of the case");
                        });

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            Created = new DateTimeOffset(new DateTime(2024, 9, 10, 11, 9, 7, 159, DateTimeKind.Unspecified).AddTicks(9677), new TimeSpan(0, 3, 30, 0, 0)),
                            DisplayName = "مقداردهی اولیه",
                            ERPCode = -1L,
                            EnableRecord = true,
                            GuidRecord = new Guid("ab2d58ff-271d-4e2f-8140-1c9e694b5a90"),
                            Name = "Initializing",
                            SortIndex = 1L
                        },
                        new
                        {
                            Id = 2L,
                            Created = new DateTimeOffset(new DateTime(2024, 9, 10, 11, 9, 7, 159, DateTimeKind.Unspecified).AddTicks(9689), new TimeSpan(0, 3, 30, 0, 0)),
                            DisplayName = "در دست بررسی",
                            ERPCode = -2L,
                            EnableRecord = true,
                            GuidRecord = new Guid("9840d2a7-307a-463e-ac8a-c3bc2de3f7db"),
                            Name = "Ongoing",
                            SortIndex = 2L
                        },
                        new
                        {
                            Id = 3L,
                            Created = new DateTimeOffset(new DateTime(2024, 9, 10, 11, 9, 7, 159, DateTimeKind.Unspecified).AddTicks(9693), new TimeSpan(0, 3, 30, 0, 0)),
                            DisplayName = "منتظر بازنگری",
                            ERPCode = -3L,
                            EnableRecord = true,
                            GuidRecord = new Guid("8acd2600-35c6-478f-b2ac-b276ac78bf2a"),
                            Name = "Editing",
                            SortIndex = 3L
                        },
                        new
                        {
                            Id = 4L,
                            Created = new DateTimeOffset(new DateTime(2024, 9, 10, 11, 9, 7, 159, DateTimeKind.Unspecified).AddTicks(9696), new TimeSpan(0, 3, 30, 0, 0)),
                            DisplayName = "تایید شده",
                            ERPCode = -4L,
                            EnableRecord = true,
                            GuidRecord = new Guid("9d8c4478-6063-43dc-9b21-b1a4e5aadfa7"),
                            Name = "Approved",
                            SortIndex = 4L
                        },
                        new
                        {
                            Id = 5L,
                            Created = new DateTimeOffset(new DateTime(2024, 9, 10, 11, 9, 7, 159, DateTimeKind.Unspecified).AddTicks(9699), new TimeSpan(0, 3, 30, 0, 0)),
                            DisplayName = "عدم تایید",
                            ERPCode = -5L,
                            EnableRecord = true,
                            GuidRecord = new Guid("d7877bcb-2eef-4384-b46b-1846863e791a"),
                            Name = "Rejected",
                            SortIndex = 5L
                        },
                        new
                        {
                            Id = 6L,
                            Created = new DateTimeOffset(new DateTime(2024, 9, 10, 11, 9, 7, 159, DateTimeKind.Unspecified).AddTicks(9702), new TimeSpan(0, 3, 30, 0, 0)),
                            DisplayName = "ابطال شده",
                            ERPCode = -6L,
                            EnableRecord = true,
                            GuidRecord = new Guid("2d137940-b499-4400-b111-631f2121230e"),
                            Name = "Aborted",
                            SortIndex = 6L
                        });
                });

            modelBuilder.Entity("Cheetah.Core.Aggregates.CaseAggregate.Dimentions.D_WorkItemState", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnOrder(1)
                        .HasComment("The unique key of each record")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<DateTimeOffset?>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetimeoffset")
                        .HasColumnOrder(6)
                        .HasDefaultValueSql("GETDATE()")
                        .HasComment("Record creation date");

                    b.Property<string>("CreatedBy")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(512)
                        .HasColumnType("nvarchar(512)")
                        .HasDefaultValue("")
                        .HasColumnOrder(12)
                        .HasComment("Created by what user?");

                    b.Property<string>("Description")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(512)
                        .HasColumnType("nvarchar(512)")
                        .HasDefaultValue("")
                        .HasColumnOrder(5)
                        .HasComment("Additional description of each record");

                    b.Property<string>("DisplayName")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(512)
                        .HasColumnType("nvarchar(512)")
                        .HasDefaultValue("")
                        .HasColumnOrder(4)
                        .HasComment("The localized name of each record");

                    b.Property<long?>("ERPCode")
                        .HasColumnType("bigint")
                        .HasColumnOrder(10)
                        .HasComment("ID of this record in ERP");

                    b.Property<bool>("EnableRecord")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasColumnOrder(9)
                        .HasDefaultValueSql("1")
                        .HasComment("Active status of the record");

                    b.Property<Guid?>("GuidRecord")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnOrder(8)
                        .HasDefaultValueSql("NEWSEQUENTIALID ()")
                        .HasComment("Unique GUID identifier");

                    b.Property<DateTimeOffset?>("LastModified")
                        .HasColumnType("datetimeoffset")
                        .HasColumnOrder(7)
                        .HasComment("The date the record was last updated");

                    b.Property<string>("LastModifiedBy")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(512)
                        .HasColumnType("nvarchar(512)")
                        .HasDefaultValue("")
                        .HasColumnOrder(11)
                        .HasComment("By which user has it been updated?");

                    b.Property<string>("Name")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(512)
                        .HasColumnType("nvarchar(512)")
                        .HasDefaultValue("")
                        .HasColumnOrder(3)
                        .HasComment("English name of each record");

                    b.Property<long?>("SortIndex")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasDefaultValue(0L)
                        .HasColumnOrder(2)
                        .HasComment("The sort index of the record");

                    b.HasKey("Id");

                    b.HasIndex("Created")
                        .IsDescending();

                    b.HasIndex("ERPCode")
                        .IsDescending();

                    b.HasIndex("EnableRecord")
                        .IsDescending();

                    b.HasIndex("LastModified")
                        .IsDescending();

                    b.HasIndex("Name")
                        .IsDescending();

                    b.ToTable("D_WorkItemState", "Dimentions", t =>
                        {
                            t.HasComment("State of the WorkItem");
                        });

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            Created = new DateTimeOffset(new DateTime(2024, 9, 10, 11, 9, 7, 160, DateTimeKind.Unspecified).AddTicks(1443), new TimeSpan(0, 3, 30, 0, 0)),
                            DisplayName = "صندوق ورودی",
                            ERPCode = -1L,
                            EnableRecord = true,
                            GuidRecord = new Guid("9b5aff5e-8616-46dd-bd0e-eefd6ca0a86f"),
                            Name = "Inbox",
                            SortIndex = 1L
                        },
                        new
                        {
                            Id = 2L,
                            Created = new DateTimeOffset(new DateTime(2024, 9, 10, 11, 9, 7, 160, DateTimeKind.Unspecified).AddTicks(1450), new TimeSpan(0, 3, 30, 0, 0)),
                            DisplayName = "ارسال شده",
                            ERPCode = -2L,
                            EnableRecord = true,
                            GuidRecord = new Guid("41e60492-dc98-4137-9547-a2d6e21afe34"),
                            Name = "Sent",
                            SortIndex = 2L
                        },
                        new
                        {
                            Id = 3L,
                            Created = new DateTimeOffset(new DateTime(2024, 9, 10, 11, 9, 7, 160, DateTimeKind.Unspecified).AddTicks(1453), new TimeSpan(0, 3, 30, 0, 0)),
                            DisplayName = "خروج",
                            ERPCode = -3L,
                            EnableRecord = true,
                            GuidRecord = new Guid("ae651a75-16e8-4465-b5b5-991e5cf225ee"),
                            Name = "Exit",
                            SortIndex = 3L
                        },
                        new
                        {
                            Id = 4L,
                            Created = new DateTimeOffset(new DateTime(2024, 9, 10, 11, 9, 7, 160, DateTimeKind.Unspecified).AddTicks(1458), new TimeSpan(0, 3, 30, 0, 0)),
                            DisplayName = "آینده",
                            ERPCode = -4L,
                            EnableRecord = true,
                            GuidRecord = new Guid("f35e9d3a-b26f-4b38-ae01-d7595b5eb3e8"),
                            Name = "Future",
                            SortIndex = 4L
                        });
                });

            modelBuilder.Entity("Cheetah.Core.Aggregates.CaseAggregate.Facts.F_Case", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnOrder(1)
                        .HasComment("The unique key of each record")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<long?>("CaseStateId")
                        .HasColumnType("bigint")
                        .HasColumnOrder(110);

                    b.Property<DateTimeOffset?>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetimeoffset")
                        .HasColumnOrder(6)
                        .HasDefaultValueSql("GETDATE()")
                        .HasComment("Record creation date");

                    b.Property<string>("CreatedBy")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(512)
                        .HasColumnType("nvarchar(512)")
                        .HasDefaultValue("")
                        .HasColumnOrder(12)
                        .HasComment("Created by what user?");

                    b.Property<long?>("CreatorId")
                        .HasColumnType("bigint")
                        .HasColumnOrder(107);

                    b.Property<string>("Description")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(512)
                        .HasColumnType("nvarchar(512)")
                        .HasDefaultValue("")
                        .HasColumnOrder(5)
                        .HasComment("Additional description of each record");

                    b.Property<string>("DisplayName")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(512)
                        .HasColumnType("nvarchar(512)")
                        .HasDefaultValue("")
                        .HasColumnOrder(4)
                        .HasComment("The localized name of each record");

                    b.Property<long?>("ERPCode")
                        .HasColumnType("bigint")
                        .HasColumnOrder(10)
                        .HasComment("ID of this record in ERP");

                    b.Property<bool>("EnableRecord")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasColumnOrder(9)
                        .HasDefaultValueSql("1")
                        .HasComment("Active status of the record");

                    b.Property<Guid?>("GuidRecord")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnOrder(8)
                        .HasDefaultValueSql("NEWSEQUENTIALID ()")
                        .HasComment("Unique GUID identifier");

                    b.Property<DateTimeOffset?>("LastModified")
                        .HasColumnType("datetimeoffset")
                        .HasColumnOrder(7)
                        .HasComment("The date the record was last updated");

                    b.Property<string>("LastModifiedBy")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(512)
                        .HasColumnType("nvarchar(512)")
                        .HasDefaultValue("")
                        .HasColumnOrder(11)
                        .HasComment("By which user has it been updated?");

                    b.Property<string>("Name")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(512)
                        .HasColumnType("nvarchar(512)")
                        .HasDefaultValue("")
                        .HasColumnOrder(3)
                        .HasComment("English name of each record");

                    b.Property<long?>("ProcessId")
                        .HasColumnType("bigint")
                        .HasColumnOrder(111);

                    b.Property<long?>("RequestorId")
                        .HasColumnType("bigint")
                        .HasColumnOrder(106);

                    b.Property<long?>("SelectedScenarioId")
                        .HasColumnType("bigint")
                        .HasColumnOrder(113);

                    b.Property<long?>("SortIndex")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasDefaultValue(0L)
                        .HasColumnOrder(2)
                        .HasComment("The sort index of the record");

                    b.HasKey("Id");

                    b.HasIndex("CaseStateId");

                    b.HasIndex("Created")
                        .IsDescending();

                    b.HasIndex("CreatorId");

                    b.HasIndex("ERPCode")
                        .IsDescending();

                    b.HasIndex("EnableRecord")
                        .IsDescending();

                    b.HasIndex("LastModified")
                        .IsDescending();

                    b.HasIndex("Name")
                        .IsDescending();

                    b.HasIndex("ProcessId");

                    b.HasIndex("RequestorId");

                    b.HasIndex("SelectedScenarioId");

                    b.ToTable("F_Case", "Facts", t =>
                        {
                            t.HasComment("Each request create one record in this table");
                        });
                });

            modelBuilder.Entity("Cheetah.Core.Aggregates.CaseAggregate.Facts.F_WorkItem", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnOrder(1)
                        .HasComment("The unique key of each record")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<long?>("CaseId")
                        .HasColumnType("bigint")
                        .HasColumnOrder(103);

                    b.Property<DateTimeOffset?>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetimeoffset")
                        .HasColumnOrder(6)
                        .HasDefaultValueSql("GETDATE()")
                        .HasComment("Record creation date");

                    b.Property<string>("CreatedBy")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(512)
                        .HasColumnType("nvarchar(512)")
                        .HasDefaultValue("")
                        .HasColumnOrder(12)
                        .HasComment("Created by what user?");

                    b.Property<string>("Description")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(512)
                        .HasColumnType("nvarchar(512)")
                        .HasDefaultValue("")
                        .HasColumnOrder(5)
                        .HasComment("Additional description of each record");

                    b.Property<string>("DisplayName")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(512)
                        .HasColumnType("nvarchar(512)")
                        .HasDefaultValue("")
                        .HasColumnOrder(4)
                        .HasComment("The localized name of each record");

                    b.Property<long?>("ERPCode")
                        .HasColumnType("bigint")
                        .HasColumnOrder(10)
                        .HasComment("ID of this record in ERP");

                    b.Property<bool>("EnableRecord")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasColumnOrder(9)
                        .HasDefaultValueSql("1")
                        .HasComment("Active status of the record");

                    b.Property<long?>("F_CaseId")
                        .HasColumnType("bigint");

                    b.Property<Guid?>("GuidRecord")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnOrder(8)
                        .HasDefaultValueSql("NEWSEQUENTIALID ()")
                        .HasComment("Unique GUID identifier");

                    b.Property<DateTimeOffset?>("LastModified")
                        .HasColumnType("datetimeoffset")
                        .HasColumnOrder(7)
                        .HasComment("The date the record was last updated");

                    b.Property<string>("LastModifiedBy")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(512)
                        .HasColumnType("nvarchar(512)")
                        .HasDefaultValue("")
                        .HasColumnOrder(11)
                        .HasComment("By which user has it been updated?");

                    b.Property<string>("Name")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(512)
                        .HasColumnType("nvarchar(512)")
                        .HasDefaultValue("")
                        .HasColumnOrder(3)
                        .HasComment("English name of each record");

                    b.Property<long?>("SortIndex")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasDefaultValue(0L)
                        .HasColumnOrder(2)
                        .HasComment("The sort index of the record");

                    b.Property<long?>("TaskId")
                        .HasColumnType("bigint")
                        .HasColumnOrder(101);

                    b.Property<long?>("UserId")
                        .HasColumnType("bigint")
                        .HasColumnOrder(102);

                    b.Property<long?>("WorkItemStateId")
                        .HasColumnType("bigint")
                        .HasColumnOrder(105);

                    b.HasKey("Id");

                    b.HasIndex("CaseId");

                    b.HasIndex("Created")
                        .IsDescending();

                    b.HasIndex("ERPCode")
                        .IsDescending();

                    b.HasIndex("EnableRecord")
                        .IsDescending();

                    b.HasIndex("F_CaseId");

                    b.HasIndex("LastModified")
                        .IsDescending();

                    b.HasIndex("Name")
                        .IsDescending();

                    b.HasIndex("TaskId");

                    b.HasIndex("UserId");

                    b.HasIndex("WorkItemStateId");

                    b.ToTable("F_WorkItem", "Facts", t =>
                        {
                            t.HasComment("Numeric, Text, Date, binary");
                        });
                });

            modelBuilder.Entity("Cheetah.Core.Aggregates.CaseAggregate.Links.L_CaseCondition", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnOrder(1)
                        .HasComment("The unique key of each record")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<DateTimeOffset?>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetimeoffset")
                        .HasColumnOrder(6)
                        .HasDefaultValueSql("GETDATE()")
                        .HasComment("Record creation date");

                    b.Property<string>("CreatedBy")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(512)
                        .HasColumnType("nvarchar(512)")
                        .HasDefaultValue("")
                        .HasColumnOrder(12)
                        .HasComment("Created by what user?");

                    b.Property<string>("Description")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(512)
                        .HasColumnType("nvarchar(512)")
                        .HasDefaultValue("")
                        .HasColumnOrder(5)
                        .HasComment("Additional description of each record");

                    b.Property<string>("DisplayName")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(512)
                        .HasColumnType("nvarchar(512)")
                        .HasDefaultValue("")
                        .HasColumnOrder(4)
                        .HasComment("The localized name of each record");

                    b.Property<long?>("ERPCode")
                        .HasColumnType("bigint")
                        .HasColumnOrder(10)
                        .HasComment("ID of this record in ERP");

                    b.Property<bool>("EnableRecord")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasColumnOrder(9)
                        .HasDefaultValueSql("1")
                        .HasComment("Active status of the record");

                    b.Property<long?>("FifthId")
                        .HasColumnType("bigint")
                        .HasColumnOrder(104);

                    b.Property<long?>("FirstId")
                        .HasColumnType("bigint")
                        .HasColumnOrder(100);

                    b.Property<long?>("FourthId")
                        .HasColumnType("bigint")
                        .HasColumnOrder(103);

                    b.Property<Guid?>("GuidRecord")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnOrder(8)
                        .HasDefaultValueSql("NEWSEQUENTIALID ()")
                        .HasComment("Unique GUID identifier");

                    b.Property<DateTimeOffset?>("LastModified")
                        .HasColumnType("datetimeoffset")
                        .HasColumnOrder(7)
                        .HasComment("The date the record was last updated");

                    b.Property<string>("LastModifiedBy")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(512)
                        .HasColumnType("nvarchar(512)")
                        .HasDefaultValue("")
                        .HasColumnOrder(11)
                        .HasComment("By which user has it been updated?");

                    b.Property<string>("Name")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(512)
                        .HasColumnType("nvarchar(512)")
                        .HasDefaultValue("")
                        .HasColumnOrder(3)
                        .HasComment("English name of each record");

                    b.Property<long?>("SecondId")
                        .HasColumnType("bigint")
                        .HasColumnOrder(101);

                    b.Property<long?>("SortIndex")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasDefaultValue(0L)
                        .HasColumnOrder(2)
                        .HasComment("The sort index of the record");

                    b.Property<long?>("ThirdId")
                        .HasColumnType("bigint")
                        .HasColumnOrder(102);

                    b.HasKey("Id");

                    b.HasIndex("Created")
                        .IsDescending();

                    b.HasIndex("ERPCode")
                        .IsDescending();

                    b.HasIndex("EnableRecord")
                        .IsDescending();

                    b.HasIndex("FifthId")
                        .IsDescending();

                    b.HasIndex("FirstId")
                        .IsDescending();

                    b.HasIndex("FourthId")
                        .IsDescending();

                    b.HasIndex("LastModified")
                        .IsDescending();

                    b.HasIndex("Name")
                        .IsDescending();

                    b.HasIndex("SecondId")
                        .IsDescending();

                    b.HasIndex("ThirdId")
                        .IsDescending();

                    b.ToTable("L_CaseCondition", "Links", t =>
                        {
                            t.HasComment("Conditions of each case for selecting correct scenario");
                        });
                });

            modelBuilder.Entity("Cheetah.Core.Aggregates.CaseAggregate.Links.L_CaseTaskUser", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnOrder(1)
                        .HasComment("The unique key of each record")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<DateTimeOffset?>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetimeoffset")
                        .HasColumnOrder(6)
                        .HasDefaultValueSql("GETDATE()")
                        .HasComment("Record creation date");

                    b.Property<string>("CreatedBy")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(512)
                        .HasColumnType("nvarchar(512)")
                        .HasDefaultValue("")
                        .HasColumnOrder(12)
                        .HasComment("Created by what user?");

                    b.Property<string>("Description")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(512)
                        .HasColumnType("nvarchar(512)")
                        .HasDefaultValue("")
                        .HasColumnOrder(5)
                        .HasComment("Additional description of each record");

                    b.Property<string>("DisplayName")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(512)
                        .HasColumnType("nvarchar(512)")
                        .HasDefaultValue("")
                        .HasColumnOrder(4)
                        .HasComment("The localized name of each record");

                    b.Property<long?>("ERPCode")
                        .HasColumnType("bigint")
                        .HasColumnOrder(10)
                        .HasComment("ID of this record in ERP");

                    b.Property<bool>("EnableRecord")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasColumnOrder(9)
                        .HasDefaultValueSql("1")
                        .HasComment("Active status of the record");

                    b.Property<long?>("FifthId")
                        .HasColumnType("bigint")
                        .HasColumnOrder(104);

                    b.Property<long?>("FirstId")
                        .HasColumnType("bigint")
                        .HasColumnOrder(100);

                    b.Property<long?>("FourthId")
                        .HasColumnType("bigint")
                        .HasColumnOrder(103);

                    b.Property<Guid?>("GuidRecord")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnOrder(8)
                        .HasDefaultValueSql("NEWSEQUENTIALID ()")
                        .HasComment("Unique GUID identifier");

                    b.Property<DateTimeOffset?>("LastModified")
                        .HasColumnType("datetimeoffset")
                        .HasColumnOrder(7)
                        .HasComment("The date the record was last updated");

                    b.Property<string>("LastModifiedBy")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(512)
                        .HasColumnType("nvarchar(512)")
                        .HasDefaultValue("")
                        .HasColumnOrder(11)
                        .HasComment("By which user has it been updated?");

                    b.Property<string>("Name")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(512)
                        .HasColumnType("nvarchar(512)")
                        .HasDefaultValue("")
                        .HasColumnOrder(3)
                        .HasComment("English name of each record");

                    b.Property<long?>("SecondId")
                        .HasColumnType("bigint")
                        .HasColumnOrder(101);

                    b.Property<long?>("SortIndex")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasDefaultValue(0L)
                        .HasColumnOrder(2)
                        .HasComment("The sort index of the record");

                    b.Property<long?>("TaskId")
                        .HasColumnType("bigint");

                    b.Property<long?>("ThirdId")
                        .HasColumnType("bigint")
                        .HasColumnOrder(102);

                    b.Property<long?>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("Created")
                        .IsDescending();

                    b.HasIndex("ERPCode")
                        .IsDescending();

                    b.HasIndex("EnableRecord")
                        .IsDescending();

                    b.HasIndex("FifthId")
                        .IsDescending();

                    b.HasIndex("FirstId")
                        .IsDescending();

                    b.HasIndex("FourthId")
                        .IsDescending();

                    b.HasIndex("LastModified")
                        .IsDescending();

                    b.HasIndex("Name")
                        .IsDescending();

                    b.HasIndex("SecondId")
                        .IsDescending();

                    b.HasIndex("TaskId");

                    b.HasIndex("ThirdId")
                        .IsDescending();

                    b.HasIndex("UserId");

                    b.ToTable("L_CaseTaskUser", "Links", t =>
                        {
                            t.HasComment("Manual choosing performer");
                        });
                });

            modelBuilder.Entity("Cheetah.Core.Aggregates.CaseAggregate.Links.L_WorkItemCondition", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnOrder(1)
                        .HasComment("The unique key of each record")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<DateTimeOffset?>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetimeoffset")
                        .HasColumnOrder(6)
                        .HasDefaultValueSql("GETDATE()")
                        .HasComment("Record creation date");

                    b.Property<string>("CreatedBy")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(512)
                        .HasColumnType("nvarchar(512)")
                        .HasDefaultValue("")
                        .HasColumnOrder(12)
                        .HasComment("Created by what user?");

                    b.Property<string>("Description")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(512)
                        .HasColumnType("nvarchar(512)")
                        .HasDefaultValue("")
                        .HasColumnOrder(5)
                        .HasComment("Additional description of each record");

                    b.Property<string>("DisplayName")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(512)
                        .HasColumnType("nvarchar(512)")
                        .HasDefaultValue("")
                        .HasColumnOrder(4)
                        .HasComment("The localized name of each record");

                    b.Property<long?>("ERPCode")
                        .HasColumnType("bigint")
                        .HasColumnOrder(10)
                        .HasComment("ID of this record in ERP");

                    b.Property<bool>("EnableRecord")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasColumnOrder(9)
                        .HasDefaultValueSql("1")
                        .HasComment("Active status of the record");

                    b.Property<long?>("FifthId")
                        .HasColumnType("bigint")
                        .HasColumnOrder(104);

                    b.Property<long?>("FirstId")
                        .HasColumnType("bigint")
                        .HasColumnOrder(100);

                    b.Property<long?>("FourthId")
                        .HasColumnType("bigint")
                        .HasColumnOrder(103);

                    b.Property<Guid?>("GuidRecord")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnOrder(8)
                        .HasDefaultValueSql("NEWSEQUENTIALID ()")
                        .HasComment("Unique GUID identifier");

                    b.Property<DateTimeOffset?>("LastModified")
                        .HasColumnType("datetimeoffset")
                        .HasColumnOrder(7)
                        .HasComment("The date the record was last updated");

                    b.Property<string>("LastModifiedBy")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(512)
                        .HasColumnType("nvarchar(512)")
                        .HasDefaultValue("")
                        .HasColumnOrder(11)
                        .HasComment("By which user has it been updated?");

                    b.Property<string>("Name")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(512)
                        .HasColumnType("nvarchar(512)")
                        .HasDefaultValue("")
                        .HasColumnOrder(3)
                        .HasComment("English name of each record");

                    b.Property<long?>("SecondId")
                        .HasColumnType("bigint")
                        .HasColumnOrder(101);

                    b.Property<long?>("SortIndex")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasDefaultValue(0L)
                        .HasColumnOrder(2)
                        .HasComment("The sort index of the record");

                    b.Property<long?>("ThirdId")
                        .HasColumnType("bigint")
                        .HasColumnOrder(102);

                    b.HasKey("Id");

                    b.HasIndex("Created")
                        .IsDescending();

                    b.HasIndex("ERPCode")
                        .IsDescending();

                    b.HasIndex("EnableRecord")
                        .IsDescending();

                    b.HasIndex("FifthId")
                        .IsDescending();

                    b.HasIndex("FirstId")
                        .IsDescending();

                    b.HasIndex("FourthId")
                        .IsDescending();

                    b.HasIndex("LastModified")
                        .IsDescending();

                    b.HasIndex("Name")
                        .IsDescending();

                    b.HasIndex("SecondId")
                        .IsDescending();

                    b.HasIndex("ThirdId")
                        .IsDescending();

                    b.ToTable("L_WorkItemCondition", "Links", t =>
                        {
                            t.HasComment("Conditionals of each workitem");
                        });
                });

            modelBuilder.Entity("Cheetah.Core.Aggregates.Common.Dimentions.D_Entity", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnOrder(1)
                        .HasComment("The unique key of each record")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<DateTimeOffset?>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetimeoffset")
                        .HasColumnOrder(6)
                        .HasDefaultValueSql("GETDATE()")
                        .HasComment("Record creation date");

                    b.Property<string>("CreatedBy")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(512)
                        .HasColumnType("nvarchar(512)")
                        .HasDefaultValue("")
                        .HasColumnOrder(12)
                        .HasComment("Created by what user?");

                    b.Property<string>("Description")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(512)
                        .HasColumnType("nvarchar(512)")
                        .HasDefaultValue("")
                        .HasColumnOrder(5)
                        .HasComment("Additional description of each record");

                    b.Property<bool?>("Display")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true)
                        .HasColumnOrder(100);

                    b.Property<string>("DisplayName")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(512)
                        .HasColumnType("nvarchar(512)")
                        .HasDefaultValue("")
                        .HasColumnOrder(4)
                        .HasComment("The localized name of each record");

                    b.Property<long?>("ERPCode")
                        .HasColumnType("bigint")
                        .HasColumnOrder(10)
                        .HasComment("ID of this record in ERP");

                    b.Property<bool>("EnableRecord")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasColumnOrder(9)
                        .HasDefaultValueSql("1")
                        .HasComment("Active status of the record");

                    b.Property<Guid?>("GuidRecord")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnOrder(8)
                        .HasDefaultValueSql("NEWSEQUENTIALID ()")
                        .HasComment("Unique GUID identifier");

                    b.Property<DateTimeOffset?>("LastModified")
                        .HasColumnType("datetimeoffset")
                        .HasColumnOrder(7)
                        .HasComment("The date the record was last updated");

                    b.Property<string>("LastModifiedBy")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(512)
                        .HasColumnType("nvarchar(512)")
                        .HasDefaultValue("")
                        .HasColumnOrder(11)
                        .HasComment("By which user has it been updated?");

                    b.Property<string>("Name")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(512)
                        .HasColumnType("nvarchar(512)")
                        .HasDefaultValue("")
                        .HasColumnOrder(3)
                        .HasComment("English name of each record");

                    b.Property<long?>("SortIndex")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasDefaultValue(0L)
                        .HasColumnOrder(2)
                        .HasComment("The sort index of the record");

                    b.Property<bool?>("Sync")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("Created")
                        .IsDescending();

                    b.HasIndex("Display");

                    b.HasIndex("ERPCode")
                        .IsDescending();

                    b.HasIndex("EnableRecord")
                        .IsDescending();

                    b.HasIndex("LastModified")
                        .IsDescending();

                    b.HasIndex("Name")
                        .IsDescending();

                    b.ToTable("D_Entity", "Dimentions", t =>
                        {
                            t.HasComment("Table's name in the Cheetah");
                        });

                    b.HasData(
                        new
                        {
                            Id = 101L,
                            Created = new DateTimeOffset(new DateTime(2024, 9, 10, 11, 9, 7, 158, DateTimeKind.Unspecified).AddTicks(3824), new TimeSpan(0, 3, 30, 0, 0)),
                            Display = false,
                            DisplayName = "نوع تگ‌ها(Dimentions)",
                            ERPCode = 101L,
                            EnableRecord = true,
                            GuidRecord = new Guid("7edf4211-87cf-48fe-99d8-6f6e93d3a705"),
                            Name = "D_TagType",
                            SortIndex = 101L,
                            Sync = false
                        },
                        new
                        {
                            Id = 102L,
                            Created = new DateTimeOffset(new DateTime(2024, 9, 10, 11, 9, 7, 159, DateTimeKind.Unspecified).AddTicks(5926), new TimeSpan(0, 3, 30, 0, 0)),
                            Display = false,
                            DisplayName = "عملگرها(Dimentions)",
                            ERPCode = 102L,
                            EnableRecord = true,
                            GuidRecord = new Guid("b65a7b13-7b46-4574-b0b7-c137181df717"),
                            Name = "D_Operand",
                            SortIndex = 102L,
                            Sync = false
                        },
                        new
                        {
                            Id = 103L,
                            Created = new DateTimeOffset(new DateTime(2024, 9, 10, 11, 9, 7, 159, DateTimeKind.Unspecified).AddTicks(5961), new TimeSpan(0, 3, 30, 0, 0)),
                            Display = false,
                            DisplayName = "تگ‌ها(Dimentions)",
                            ERPCode = 103L,
                            EnableRecord = true,
                            GuidRecord = new Guid("1cb30138-5a0f-47d5-976f-32f74f83c2c4"),
                            Name = "D_Tag",
                            SortIndex = 103L,
                            Sync = false
                        },
                        new
                        {
                            Id = 104L,
                            Created = new DateTimeOffset(new DateTime(2024, 9, 10, 11, 9, 7, 159, DateTimeKind.Unspecified).AddTicks(6046), new TimeSpan(0, 3, 30, 0, 0)),
                            Display = false,
                            DisplayName = "وضعیت فرآیندها(Dimentions)",
                            ERPCode = 104L,
                            EnableRecord = true,
                            GuidRecord = new Guid("457ab9b8-2ded-4a6c-a0a0-ecdf4edc0f42"),
                            Name = "D_CaseState",
                            SortIndex = 104L,
                            Sync = false
                        },
                        new
                        {
                            Id = 105L,
                            Created = new DateTimeOffset(new DateTime(2024, 9, 10, 11, 9, 7, 159, DateTimeKind.Unspecified).AddTicks(6055), new TimeSpan(0, 3, 30, 0, 0)),
                            Display = true,
                            DisplayName = "فرآیند‌ها(Dimentions)",
                            ERPCode = 105L,
                            EnableRecord = true,
                            GuidRecord = new Guid("41d89072-bf1c-4a0a-afe3-cab38abbf0a8"),
                            Name = "D_Process",
                            SortIndex = 105L,
                            Sync = false
                        },
                        new
                        {
                            Id = 106L,
                            Created = new DateTimeOffset(new DateTime(2024, 9, 10, 11, 9, 7, 159, DateTimeKind.Unspecified).AddTicks(6061), new TimeSpan(0, 3, 30, 0, 0)),
                            Display = false,
                            DisplayName = "کاربران(Dimentions)",
                            ERPCode = 106L,
                            EnableRecord = true,
                            GuidRecord = new Guid("0eccf1d0-0a71-4208-9042-be8317dccdee"),
                            Name = "D_User",
                            SortIndex = 106L,
                            Sync = false
                        },
                        new
                        {
                            Id = 107L,
                            Created = new DateTimeOffset(new DateTime(2024, 9, 10, 11, 9, 7, 159, DateTimeKind.Unspecified).AddTicks(6080), new TimeSpan(0, 3, 30, 0, 0)),
                            Display = false,
                            DisplayName = "اطلاعات کاربرها(Dimentions)",
                            ERPCode = 107L,
                            EnableRecord = true,
                            GuidRecord = new Guid("6d2eb953-94b5-456c-8986-1dbca9f6925d"),
                            Name = "D_UserInformation",
                            SortIndex = 107L,
                            Sync = false
                        },
                        new
                        {
                            Id = 108L,
                            Created = new DateTimeOffset(new DateTime(2024, 9, 10, 11, 9, 7, 159, DateTimeKind.Unspecified).AddTicks(6093), new TimeSpan(0, 3, 30, 0, 0)),
                            Display = false,
                            DisplayName = "تمام تاییدها(Facts)",
                            ERPCode = 108L,
                            EnableRecord = true,
                            GuidRecord = new Guid("1fb48a39-59d4-49cc-912d-313075950d03"),
                            Name = "F_WorkItem",
                            SortIndex = 108L,
                            Sync = false
                        },
                        new
                        {
                            Id = 109L,
                            Created = new DateTimeOffset(new DateTime(2024, 9, 10, 11, 9, 7, 159, DateTimeKind.Unspecified).AddTicks(6106), new TimeSpan(0, 3, 30, 0, 0)),
                            Display = false,
                            DisplayName = "ضمیمه‌ها(Facts)",
                            ERPCode = 109L,
                            EnableRecord = true,
                            GuidRecord = new Guid("92ebf09e-3b06-48b1-8f36-5fe632379d39"),
                            Name = "F_Attachment",
                            SortIndex = 109L,
                            Sync = false
                        },
                        new
                        {
                            Id = 110L,
                            Created = new DateTimeOffset(new DateTime(2024, 9, 10, 11, 9, 7, 159, DateTimeKind.Unspecified).AddTicks(6114), new TimeSpan(0, 3, 30, 0, 0)),
                            Display = false,
                            DisplayName = "لیست تخصیص‌ها(Facts)",
                            ERPCode = 110L,
                            EnableRecord = true,
                            GuidRecord = new Guid("ba9faa2c-ca6f-4255-98c1-94514ee4ad6d"),
                            Name = "F_Task",
                            SortIndex = 110L,
                            Sync = false
                        },
                        new
                        {
                            Id = 111L,
                            Created = new DateTimeOffset(new DateTime(2024, 9, 10, 11, 9, 7, 159, DateTimeKind.Unspecified).AddTicks(6120), new TimeSpan(0, 3, 30, 0, 0)),
                            Display = true,
                            DisplayName = "لیست شرط‌ها(Facts)",
                            ERPCode = 111L,
                            EnableRecord = true,
                            GuidRecord = new Guid("07ace0b8-f6ed-4493-99e9-0f8e8c211b50"),
                            Name = "F_Condition",
                            SortIndex = 111L,
                            Sync = false
                        },
                        new
                        {
                            Id = 112L,
                            Created = new DateTimeOffset(new DateTime(2024, 9, 10, 11, 9, 7, 159, DateTimeKind.Unspecified).AddTicks(6126), new TimeSpan(0, 3, 30, 0, 0)),
                            Display = false,
                            DisplayName = "اطلاعات درخواست‌ها(Dimentions)",
                            ERPCode = 112L,
                            EnableRecord = true,
                            GuidRecord = new Guid("43363177-929e-4f42-8994-445fc0771a3e"),
                            Name = "F_Case",
                            SortIndex = 112L,
                            Sync = false
                        },
                        new
                        {
                            Id = 113L,
                            Created = new DateTimeOffset(new DateTime(2024, 9, 10, 11, 9, 7, 159, DateTimeKind.Unspecified).AddTicks(6131), new TimeSpan(0, 3, 30, 0, 0)),
                            Display = true,
                            DisplayName = "سناریوها(Dimentions)",
                            ERPCode = 113L,
                            EnableRecord = true,
                            GuidRecord = new Guid("1876914c-651e-4154-9a2b-f3384f8db8a8"),
                            Name = "F_Scenario",
                            SortIndex = 113L,
                            Sync = false
                        },
                        new
                        {
                            Id = 114L,
                            Created = new DateTimeOffset(new DateTime(2024, 9, 10, 11, 9, 7, 159, DateTimeKind.Unspecified).AddTicks(6137), new TimeSpan(0, 3, 30, 0, 0)),
                            Display = false,
                            DisplayName = "سناریوها(Links)",
                            ERPCode = 114L,
                            EnableRecord = true,
                            GuidRecord = new Guid("e9e14f51-6794-4c59-aa7c-83f6d70dcc3d"),
                            Name = "L_ProcessScenario",
                            SortIndex = 114L,
                            Sync = false
                        },
                        new
                        {
                            Id = 115L,
                            Created = new DateTimeOffset(new DateTime(2024, 9, 10, 11, 9, 7, 159, DateTimeKind.Unspecified).AddTicks(6804), new TimeSpan(0, 3, 30, 0, 0)),
                            Display = false,
                            DisplayName = "فرم‌ها(Facts)",
                            ERPCode = 115L,
                            EnableRecord = true,
                            GuidRecord = new Guid("8e7d429c-b883-461e-b662-2b09b5a32221"),
                            Name = "F_Form",
                            SortIndex = 115L,
                            Sync = true
                        });
                });

            modelBuilder.Entity("Cheetah.Core.Aggregates.ConditionAggregate.Dimentions.D_Operand", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnOrder(1)
                        .HasComment("The unique key of each record")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<DateTimeOffset?>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetimeoffset")
                        .HasColumnOrder(6)
                        .HasDefaultValueSql("GETDATE()")
                        .HasComment("Record creation date");

                    b.Property<string>("CreatedBy")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(512)
                        .HasColumnType("nvarchar(512)")
                        .HasDefaultValue("")
                        .HasColumnOrder(12)
                        .HasComment("Created by what user?");

                    b.Property<string>("Description")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(512)
                        .HasColumnType("nvarchar(512)")
                        .HasDefaultValue("")
                        .HasColumnOrder(5)
                        .HasComment("Additional description of each record");

                    b.Property<string>("DisplayName")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(512)
                        .HasColumnType("nvarchar(512)")
                        .HasDefaultValue("")
                        .HasColumnOrder(4)
                        .HasComment("The localized name of each record");

                    b.Property<long?>("ERPCode")
                        .HasColumnType("bigint")
                        .HasColumnOrder(10)
                        .HasComment("ID of this record in ERP");

                    b.Property<bool>("EnableRecord")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasColumnOrder(9)
                        .HasDefaultValueSql("1")
                        .HasComment("Active status of the record");

                    b.Property<Guid?>("GuidRecord")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnOrder(8)
                        .HasDefaultValueSql("NEWSEQUENTIALID ()")
                        .HasComment("Unique GUID identifier");

                    b.Property<DateTimeOffset?>("LastModified")
                        .HasColumnType("datetimeoffset")
                        .HasColumnOrder(7)
                        .HasComment("The date the record was last updated");

                    b.Property<string>("LastModifiedBy")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(512)
                        .HasColumnType("nvarchar(512)")
                        .HasDefaultValue("")
                        .HasColumnOrder(11)
                        .HasComment("By which user has it been updated?");

                    b.Property<string>("Name")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(512)
                        .HasColumnType("nvarchar(512)")
                        .HasDefaultValue("")
                        .HasColumnOrder(3)
                        .HasComment("English name of each record");

                    b.Property<long?>("SortIndex")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasDefaultValue(0L)
                        .HasColumnOrder(2)
                        .HasComment("The sort index of the record");

                    b.HasKey("Id");

                    b.HasIndex("Created")
                        .IsDescending();

                    b.HasIndex("ERPCode")
                        .IsDescending();

                    b.HasIndex("EnableRecord")
                        .IsDescending();

                    b.HasIndex("LastModified")
                        .IsDescending();

                    b.HasIndex("Name")
                        .IsDescending();

                    b.ToTable("D_Operand", "Dimentions", t =>
                        {
                            t.HasComment("Operand name, like equal, greater, etc.");
                        });

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            Created = new DateTimeOffset(new DateTime(2024, 9, 10, 11, 9, 7, 157, DateTimeKind.Unspecified).AddTicks(3207), new TimeSpan(0, 3, 30, 0, 0)),
                            DisplayName = "مساوی",
                            ERPCode = -1L,
                            EnableRecord = true,
                            GuidRecord = new Guid("b9ecd5f9-5cd5-48c6-a766-192d7ea27ffc"),
                            Name = "Equals",
                            SortIndex = 1L
                        },
                        new
                        {
                            Id = 2L,
                            Created = new DateTimeOffset(new DateTime(2024, 9, 10, 11, 9, 7, 157, DateTimeKind.Unspecified).AddTicks(3219), new TimeSpan(0, 3, 30, 0, 0)),
                            DisplayName = "مخالف",
                            ERPCode = -2L,
                            EnableRecord = true,
                            GuidRecord = new Guid("7df74515-0cc0-4be0-860a-ab5593032013"),
                            Name = "NotEquals",
                            SortIndex = 2L
                        },
                        new
                        {
                            Id = 3L,
                            Created = new DateTimeOffset(new DateTime(2024, 9, 10, 11, 9, 7, 157, DateTimeKind.Unspecified).AddTicks(3223), new TimeSpan(0, 3, 30, 0, 0)),
                            DisplayName = "بزگتر از",
                            ERPCode = -3L,
                            EnableRecord = true,
                            GuidRecord = new Guid("c4647ae9-8aac-47fe-a655-d7f316b4ac3d"),
                            Name = "Greater",
                            SortIndex = 3L
                        },
                        new
                        {
                            Id = 4L,
                            Created = new DateTimeOffset(new DateTime(2024, 9, 10, 11, 9, 7, 157, DateTimeKind.Unspecified).AddTicks(3226), new TimeSpan(0, 3, 30, 0, 0)),
                            DisplayName = "بزرگتر و مساوی",
                            ERPCode = -4L,
                            EnableRecord = true,
                            GuidRecord = new Guid("3223ce6d-37f4-405a-9070-ffa7a6d8cdf2"),
                            Name = "EqualAndGreater",
                            SortIndex = 4L
                        },
                        new
                        {
                            Id = 5L,
                            Created = new DateTimeOffset(new DateTime(2024, 9, 10, 11, 9, 7, 157, DateTimeKind.Unspecified).AddTicks(3229), new TimeSpan(0, 3, 30, 0, 0)),
                            DisplayName = "کوچکتر از",
                            ERPCode = -5L,
                            EnableRecord = true,
                            GuidRecord = new Guid("d4acb27e-aa79-4c84-907a-d90e47ec2054"),
                            Name = "LessThan",
                            SortIndex = 5L
                        },
                        new
                        {
                            Id = 6L,
                            Created = new DateTimeOffset(new DateTime(2024, 9, 10, 11, 9, 7, 157, DateTimeKind.Unspecified).AddTicks(3232), new TimeSpan(0, 3, 30, 0, 0)),
                            DisplayName = "کوچکتر و مساوی",
                            ERPCode = -6L,
                            EnableRecord = true,
                            GuidRecord = new Guid("107d9432-5937-4c2a-a1da-91c9a60028ca"),
                            Name = "LessThanOrEqual",
                            SortIndex = 6L
                        });
                });

            modelBuilder.Entity("Cheetah.Core.Aggregates.ConditionAggregate.Dimentions.D_Tag", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnOrder(1)
                        .HasComment("The unique key of each record")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<DateTimeOffset?>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetimeoffset")
                        .HasColumnOrder(6)
                        .HasDefaultValueSql("GETDATE()")
                        .HasComment("Record creation date");

                    b.Property<string>("CreatedBy")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(512)
                        .HasColumnType("nvarchar(512)")
                        .HasDefaultValue("")
                        .HasColumnOrder(12)
                        .HasComment("Created by what user?");

                    b.Property<string>("Description")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(512)
                        .HasColumnType("nvarchar(512)")
                        .HasDefaultValue("")
                        .HasColumnOrder(5)
                        .HasComment("Additional description of each record");

                    b.Property<string>("DisplayName")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(512)
                        .HasColumnType("nvarchar(512)")
                        .HasDefaultValue("")
                        .HasColumnOrder(4)
                        .HasComment("The localized name of each record");

                    b.Property<long?>("ERPCode")
                        .HasColumnType("bigint")
                        .HasColumnOrder(10)
                        .HasComment("ID of this record in ERP");

                    b.Property<bool>("EnableRecord")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasColumnOrder(9)
                        .HasDefaultValueSql("1")
                        .HasComment("Active status of the record");

                    b.Property<Guid?>("GuidRecord")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnOrder(8)
                        .HasDefaultValueSql("NEWSEQUENTIALID ()")
                        .HasComment("Unique GUID identifier");

                    b.Property<DateTimeOffset?>("LastModified")
                        .HasColumnType("datetimeoffset")
                        .HasColumnOrder(7)
                        .HasComment("The date the record was last updated");

                    b.Property<string>("LastModifiedBy")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(512)
                        .HasColumnType("nvarchar(512)")
                        .HasDefaultValue("")
                        .HasColumnOrder(11)
                        .HasComment("By which user has it been updated?");

                    b.Property<string>("Name")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(512)
                        .HasColumnType("nvarchar(512)")
                        .HasDefaultValue("")
                        .HasColumnOrder(3)
                        .HasComment("English name of each record");

                    b.Property<long?>("SortIndex")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasDefaultValue(0L)
                        .HasColumnOrder(2)
                        .HasComment("The sort index of the record");

                    b.Property<long?>("TagCategoryId")
                        .HasColumnType("bigint")
                        .HasColumnOrder(101);

                    b.Property<long?>("TagTypeId")
                        .HasColumnType("bigint")
                        .HasColumnOrder(100);

                    b.HasKey("Id");

                    b.HasIndex("Created")
                        .IsDescending();

                    b.HasIndex("ERPCode")
                        .IsDescending();

                    b.HasIndex("EnableRecord")
                        .IsDescending();

                    b.HasIndex("LastModified")
                        .IsDescending();

                    b.HasIndex("Name")
                        .IsDescending();

                    b.HasIndex("TagCategoryId");

                    b.HasIndex("TagTypeId");

                    b.ToTable("D_Tag", "Dimentions", t =>
                        {
                            t.HasComment("Entities like position, role, etc.");
                        });

                    b.HasData(
                        new
                        {
                            Id = 4L,
                            Created = new DateTimeOffset(new DateTime(2024, 9, 10, 11, 9, 7, 156, DateTimeKind.Unspecified).AddTicks(4341), new TimeSpan(0, 3, 30, 0, 0)),
                            Description = "حروف",
                            DisplayName = "موقعیت",
                            ERPCode = -4L,
                            EnableRecord = true,
                            GuidRecord = new Guid("b030ecc5-6e6c-4ae5-b3d2-655c6130fab9"),
                            Name = "Location",
                            SortIndex = 4L,
                            TagCategoryId = 1L,
                            TagTypeId = 4L
                        },
                        new
                        {
                            Id = 5L,
                            Created = new DateTimeOffset(new DateTime(2024, 9, 10, 11, 9, 7, 156, DateTimeKind.Unspecified).AddTicks(8224), new TimeSpan(0, 3, 30, 0, 0)),
                            Description = "حروف",
                            DisplayName = "نقش",
                            ERPCode = -5L,
                            EnableRecord = true,
                            GuidRecord = new Guid("bc21b6aa-e839-4d36-a1da-7f5a821a4e5a"),
                            Name = "Role",
                            SortIndex = 5L,
                            TagCategoryId = 1L,
                            TagTypeId = 4L
                        },
                        new
                        {
                            Id = 6L,
                            Created = new DateTimeOffset(new DateTime(2024, 9, 10, 11, 9, 7, 156, DateTimeKind.Unspecified).AddTicks(8231), new TimeSpan(0, 3, 30, 0, 0)),
                            Description = "حروف",
                            DisplayName = "سمت",
                            ERPCode = -6L,
                            EnableRecord = true,
                            GuidRecord = new Guid("895bc44c-9926-4d62-b1dc-24d369ad73ca"),
                            Name = "Position",
                            SortIndex = 6L,
                            TagCategoryId = 1L,
                            TagTypeId = 4L
                        },
                        new
                        {
                            Id = 7L,
                            Created = new DateTimeOffset(new DateTime(2024, 9, 10, 11, 9, 7, 156, DateTimeKind.Unspecified).AddTicks(8237), new TimeSpan(0, 3, 30, 0, 0)),
                            Description = "حروف",
                            DisplayName = "مدیر این پرسنل",
                            ERPCode = -7L,
                            EnableRecord = true,
                            GuidRecord = new Guid("2d4f16a4-48d3-40ab-9462-f39b126d42b6"),
                            Name = "Employees",
                            SortIndex = 7L,
                            TagCategoryId = 1L,
                            TagTypeId = 4L
                        },
                        new
                        {
                            Id = 8L,
                            Created = new DateTimeOffset(new DateTime(2024, 9, 10, 11, 9, 7, 156, DateTimeKind.Unspecified).AddTicks(8243), new TimeSpan(0, 3, 30, 0, 0)),
                            Description = "عددی",
                            DisplayName = "مبلغ",
                            ERPCode = -8L,
                            EnableRecord = true,
                            GuidRecord = new Guid("947a3984-b7e8-4b99-a267-279c73ae11a3"),
                            Name = "Price",
                            SortIndex = 8L,
                            TagCategoryId = 2L,
                            TagTypeId = 1L
                        },
                        new
                        {
                            Id = 12L,
                            Created = new DateTimeOffset(new DateTime(2024, 9, 10, 11, 9, 7, 156, DateTimeKind.Unspecified).AddTicks(8248), new TimeSpan(0, 3, 30, 0, 0)),
                            Description = "حروف",
                            DisplayName = "وضعیت بررسی",
                            ERPCode = -12L,
                            EnableRecord = true,
                            GuidRecord = new Guid("c06985db-7ea4-4f62-8c23-ff1d0760fcd2"),
                            Name = "ReviewState",
                            SortIndex = 12L,
                            TagCategoryId = 2L,
                            TagTypeId = 4L
                        },
                        new
                        {
                            Id = 13L,
                            Created = new DateTimeOffset(new DateTime(2024, 9, 10, 11, 9, 7, 156, DateTimeKind.Unspecified).AddTicks(8253), new TimeSpan(0, 3, 30, 0, 0)),
                            Description = "حروف",
                            DisplayName = "حرفه",
                            ERPCode = -13L,
                            EnableRecord = true,
                            GuidRecord = new Guid("02e29e6a-a79f-4dbf-9b61-4f3570f9ed31"),
                            Name = "Skill",
                            SortIndex = 13L,
                            TagCategoryId = 1L,
                            TagTypeId = 4L
                        });
                });

            modelBuilder.Entity("Cheetah.Core.Aggregates.ConditionAggregate.Dimentions.D_TagCategory", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnOrder(1)
                        .HasComment("The unique key of each record")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<DateTimeOffset?>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetimeoffset")
                        .HasColumnOrder(6)
                        .HasDefaultValueSql("GETDATE()")
                        .HasComment("Record creation date");

                    b.Property<string>("CreatedBy")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(512)
                        .HasColumnType("nvarchar(512)")
                        .HasDefaultValue("")
                        .HasColumnOrder(12)
                        .HasComment("Created by what user?");

                    b.Property<string>("Description")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(512)
                        .HasColumnType("nvarchar(512)")
                        .HasDefaultValue("")
                        .HasColumnOrder(5)
                        .HasComment("Additional description of each record");

                    b.Property<string>("DisplayName")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(512)
                        .HasColumnType("nvarchar(512)")
                        .HasDefaultValue("")
                        .HasColumnOrder(4)
                        .HasComment("The localized name of each record");

                    b.Property<long?>("ERPCode")
                        .HasColumnType("bigint")
                        .HasColumnOrder(10)
                        .HasComment("ID of this record in ERP");

                    b.Property<bool>("EnableRecord")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasColumnOrder(9)
                        .HasDefaultValueSql("1")
                        .HasComment("Active status of the record");

                    b.Property<Guid?>("GuidRecord")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnOrder(8)
                        .HasDefaultValueSql("NEWSEQUENTIALID ()")
                        .HasComment("Unique GUID identifier");

                    b.Property<DateTimeOffset?>("LastModified")
                        .HasColumnType("datetimeoffset")
                        .HasColumnOrder(7)
                        .HasComment("The date the record was last updated");

                    b.Property<string>("LastModifiedBy")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(512)
                        .HasColumnType("nvarchar(512)")
                        .HasDefaultValue("")
                        .HasColumnOrder(11)
                        .HasComment("By which user has it been updated?");

                    b.Property<string>("Name")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(512)
                        .HasColumnType("nvarchar(512)")
                        .HasDefaultValue("")
                        .HasColumnOrder(3)
                        .HasComment("English name of each record");

                    b.Property<long?>("SortIndex")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasDefaultValue(0L)
                        .HasColumnOrder(2)
                        .HasComment("The sort index of the record");

                    b.HasKey("Id");

                    b.HasIndex("Created")
                        .IsDescending();

                    b.HasIndex("ERPCode")
                        .IsDescending();

                    b.HasIndex("EnableRecord")
                        .IsDescending();

                    b.HasIndex("LastModified")
                        .IsDescending();

                    b.HasIndex("Name")
                        .IsDescending();

                    b.ToTable("D_TagCategory", "Dimentions", t =>
                        {
                            t.HasComment("Action, Performer");
                        });

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            Created = new DateTimeOffset(new DateTime(2024, 9, 10, 11, 9, 7, 156, DateTimeKind.Unspecified).AddTicks(7122), new TimeSpan(0, 3, 30, 0, 0)),
                            DisplayName = "Performer",
                            ERPCode = -1L,
                            EnableRecord = true,
                            GuidRecord = new Guid("64df5ebe-b6c5-44c5-94c2-37a0d5ea993b"),
                            Name = "Performer",
                            SortIndex = 1L
                        },
                        new
                        {
                            Id = 2L,
                            Created = new DateTimeOffset(new DateTime(2024, 9, 10, 11, 9, 7, 156, DateTimeKind.Unspecified).AddTicks(7135), new TimeSpan(0, 3, 30, 0, 0)),
                            DisplayName = "Action",
                            ERPCode = -2L,
                            EnableRecord = true,
                            GuidRecord = new Guid("2cc87d88-7289-4d6f-9e48-a8c7849a9d01"),
                            Name = "Action",
                            SortIndex = 2L
                        });
                });

            modelBuilder.Entity("Cheetah.Core.Aggregates.ConditionAggregate.Dimentions.D_TagType", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnOrder(1)
                        .HasComment("The unique key of each record")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<DateTimeOffset?>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetimeoffset")
                        .HasColumnOrder(6)
                        .HasDefaultValueSql("GETDATE()")
                        .HasComment("Record creation date");

                    b.Property<string>("CreatedBy")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(512)
                        .HasColumnType("nvarchar(512)")
                        .HasDefaultValue("")
                        .HasColumnOrder(12)
                        .HasComment("Created by what user?");

                    b.Property<string>("Description")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(512)
                        .HasColumnType("nvarchar(512)")
                        .HasDefaultValue("")
                        .HasColumnOrder(5)
                        .HasComment("Additional description of each record");

                    b.Property<string>("DisplayName")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(512)
                        .HasColumnType("nvarchar(512)")
                        .HasDefaultValue("")
                        .HasColumnOrder(4)
                        .HasComment("The localized name of each record");

                    b.Property<long?>("ERPCode")
                        .HasColumnType("bigint")
                        .HasColumnOrder(10)
                        .HasComment("ID of this record in ERP");

                    b.Property<bool>("EnableRecord")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasColumnOrder(9)
                        .HasDefaultValueSql("1")
                        .HasComment("Active status of the record");

                    b.Property<Guid?>("GuidRecord")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnOrder(8)
                        .HasDefaultValueSql("NEWSEQUENTIALID ()")
                        .HasComment("Unique GUID identifier");

                    b.Property<DateTimeOffset?>("LastModified")
                        .HasColumnType("datetimeoffset")
                        .HasColumnOrder(7)
                        .HasComment("The date the record was last updated");

                    b.Property<string>("LastModifiedBy")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(512)
                        .HasColumnType("nvarchar(512)")
                        .HasDefaultValue("")
                        .HasColumnOrder(11)
                        .HasComment("By which user has it been updated?");

                    b.Property<string>("Name")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(512)
                        .HasColumnType("nvarchar(512)")
                        .HasDefaultValue("")
                        .HasColumnOrder(3)
                        .HasComment("English name of each record");

                    b.Property<long?>("SortIndex")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasDefaultValue(0L)
                        .HasColumnOrder(2)
                        .HasComment("The sort index of the record");

                    b.HasKey("Id");

                    b.HasIndex("Created")
                        .IsDescending();

                    b.HasIndex("ERPCode")
                        .IsDescending();

                    b.HasIndex("EnableRecord")
                        .IsDescending();

                    b.HasIndex("LastModified")
                        .IsDescending();

                    b.HasIndex("Name")
                        .IsDescending();

                    b.ToTable("D_TagType", "Dimentions", t =>
                        {
                            t.HasComment("Numeric, Text, Date, binary");
                        });

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            Created = new DateTimeOffset(new DateTime(2024, 9, 10, 11, 9, 7, 156, DateTimeKind.Unspecified).AddTicks(5837), new TimeSpan(0, 3, 30, 0, 0)),
                            DisplayName = "عددی",
                            ERPCode = -1L,
                            EnableRecord = true,
                            GuidRecord = new Guid("3fbd8a4c-cadd-455c-90b0-19987799de52"),
                            Name = "Numberic",
                            SortIndex = 1L
                        },
                        new
                        {
                            Id = 2L,
                            Created = new DateTimeOffset(new DateTime(2024, 9, 10, 11, 9, 7, 156, DateTimeKind.Unspecified).AddTicks(5847), new TimeSpan(0, 3, 30, 0, 0)),
                            DisplayName = "دودویی",
                            ERPCode = -2L,
                            EnableRecord = true,
                            GuidRecord = new Guid("a602ac3c-61f0-4610-baa3-fa119d80904e"),
                            Name = "Boolean",
                            SortIndex = 2L
                        },
                        new
                        {
                            Id = 3L,
                            Created = new DateTimeOffset(new DateTime(2024, 9, 10, 11, 9, 7, 156, DateTimeKind.Unspecified).AddTicks(5851), new TimeSpan(0, 3, 30, 0, 0)),
                            DisplayName = "دودویی",
                            ERPCode = -3L,
                            EnableRecord = true,
                            GuidRecord = new Guid("b12bb1ac-7ae5-46f8-a8a7-2d610cee6158"),
                            Name = "Date",
                            SortIndex = 3L
                        },
                        new
                        {
                            Id = 4L,
                            Created = new DateTimeOffset(new DateTime(2024, 9, 10, 11, 9, 7, 156, DateTimeKind.Unspecified).AddTicks(5854), new TimeSpan(0, 3, 30, 0, 0)),
                            DisplayName = "حروف",
                            ERPCode = -4L,
                            EnableRecord = true,
                            GuidRecord = new Guid("834c978b-c5e8-4898-b48d-d0a784ecad64"),
                            Name = "String",
                            SortIndex = 4L
                        });
                });

            modelBuilder.Entity("Cheetah.Core.Aggregates.ConditionAggregate.Facts.F_Condition", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnOrder(1)
                        .HasComment("The unique key of each record")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<bool>("CheckValidation")
                        .HasColumnType("bit")
                        .HasColumnOrder(103);

                    b.Property<DateTimeOffset?>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetimeoffset")
                        .HasColumnOrder(6)
                        .HasDefaultValueSql("GETDATE()")
                        .HasComment("Record creation date");

                    b.Property<string>("CreatedBy")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(512)
                        .HasColumnType("nvarchar(512)")
                        .HasDefaultValue("")
                        .HasColumnOrder(12)
                        .HasComment("Created by what user?");

                    b.Property<string>("Description")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(512)
                        .HasColumnType("nvarchar(512)")
                        .HasDefaultValue("")
                        .HasColumnOrder(5)
                        .HasComment("Additional description of each record");

                    b.Property<string>("DisplayName")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(512)
                        .HasColumnType("nvarchar(512)")
                        .HasDefaultValue("")
                        .HasColumnOrder(4)
                        .HasComment("The localized name of each record");

                    b.Property<long?>("ERPCode")
                        .HasColumnType("bigint")
                        .HasColumnOrder(10)
                        .HasComment("ID of this record in ERP");

                    b.Property<bool>("EnableRecord")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasColumnOrder(9)
                        .HasDefaultValueSql("1")
                        .HasComment("Active status of the record");

                    b.Property<Guid?>("GuidRecord")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnOrder(8)
                        .HasDefaultValueSql("NEWSEQUENTIALID ()")
                        .HasComment("Unique GUID identifier");

                    b.Property<DateTimeOffset?>("LastModified")
                        .HasColumnType("datetimeoffset")
                        .HasColumnOrder(7)
                        .HasComment("The date the record was last updated");

                    b.Property<string>("LastModifiedBy")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(512)
                        .HasColumnType("nvarchar(512)")
                        .HasDefaultValue("")
                        .HasColumnOrder(11)
                        .HasComment("By which user has it been updated?");

                    b.Property<string>("Name")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(512)
                        .HasColumnType("nvarchar(512)")
                        .HasDefaultValue("")
                        .HasColumnOrder(3)
                        .HasComment("English name of each record");

                    b.Property<long?>("OperandId")
                        .HasColumnType("bigint")
                        .HasColumnOrder(101);

                    b.Property<long?>("SortIndex")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasDefaultValue(0L)
                        .HasColumnOrder(2)
                        .HasComment("The sort index of the record");

                    b.Property<long?>("TagId")
                        .HasColumnType("bigint")
                        .HasColumnOrder(100);

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnOrder(102);

                    b.HasKey("Id");

                    b.HasIndex("Created")
                        .IsDescending();

                    b.HasIndex("ERPCode")
                        .IsDescending();

                    b.HasIndex("EnableRecord")
                        .IsDescending();

                    b.HasIndex("LastModified")
                        .IsDescending();

                    b.HasIndex("Name")
                        .IsDescending();

                    b.HasIndex("OperandId");

                    b.HasIndex("TagId");

                    b.ToTable("F_Condition", "Facts", t =>
                        {
                            t.HasComment("Condition of each tag");
                        });

                    b.HasData(
                        new
                        {
                            Id = 20L,
                            CheckValidation = false,
                            Created = new DateTimeOffset(new DateTime(2024, 9, 10, 11, 9, 7, 155, DateTimeKind.Unspecified).AddTicks(9715), new TimeSpan(0, 3, 30, 0, 0)),
                            DisplayName = "تایید",
                            ERPCode = -20L,
                            EnableRecord = true,
                            GuidRecord = new Guid("81c1ec56-6828-4efb-8bc5-a16f24dad139"),
                            Name = "ReviewState = Approve",
                            OperandId = 1L,
                            SortIndex = 20L,
                            TagId = 12L,
                            Value = "Approve"
                        },
                        new
                        {
                            Id = 21L,
                            CheckValidation = false,
                            Created = new DateTimeOffset(new DateTime(2024, 9, 10, 11, 9, 7, 157, DateTimeKind.Unspecified).AddTicks(4074), new TimeSpan(0, 3, 30, 0, 0)),
                            DisplayName = "عدم تایید",
                            ERPCode = -21L,
                            EnableRecord = true,
                            GuidRecord = new Guid("b3273cc3-353a-4cd1-8aef-3e0f7981b998"),
                            Name = "ReviewState = Reject",
                            OperandId = 1L,
                            SortIndex = 21L,
                            TagId = 12L,
                            Value = "Reject"
                        },
                        new
                        {
                            Id = 22L,
                            CheckValidation = false,
                            Created = new DateTimeOffset(new DateTime(2024, 9, 10, 11, 9, 7, 157, DateTimeKind.Unspecified).AddTicks(4080), new TimeSpan(0, 3, 30, 0, 0)),
                            DisplayName = "بازنگری",
                            ERPCode = -22L,
                            EnableRecord = true,
                            GuidRecord = new Guid("56362279-53fc-4f94-8b01-16be323def6c"),
                            Name = "ReviewState = Revise",
                            OperandId = 1L,
                            SortIndex = 22L,
                            TagId = 12L,
                            Value = "Revise"
                        },
                        new
                        {
                            Id = 23L,
                            CheckValidation = false,
                            Created = new DateTimeOffset(new DateTime(2024, 9, 10, 11, 9, 7, 157, DateTimeKind.Unspecified).AddTicks(4086), new TimeSpan(0, 3, 30, 0, 0)),
                            DisplayName = "ارسال درخواست",
                            ERPCode = -23L,
                            EnableRecord = true,
                            GuidRecord = new Guid("4297e8c3-3ef0-4eef-95bd-d132a2f32a41"),
                            Name = "ReviewState = SendRequest",
                            OperandId = 1L,
                            SortIndex = 23L,
                            TagId = 12L,
                            Value = "SendRequest"
                        });
                });

            modelBuilder.Entity("Cheetah.Core.Aggregates.ProcessAggregate.Dimentions.D_Process", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnOrder(1)
                        .HasComment("The unique key of each record")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<DateTimeOffset?>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetimeoffset")
                        .HasColumnOrder(6)
                        .HasDefaultValueSql("GETDATE()")
                        .HasComment("Record creation date");

                    b.Property<string>("CreatedBy")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(512)
                        .HasColumnType("nvarchar(512)")
                        .HasDefaultValue("")
                        .HasColumnOrder(12)
                        .HasComment("Created by what user?");

                    b.Property<string>("Description")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(512)
                        .HasColumnType("nvarchar(512)")
                        .HasDefaultValue("")
                        .HasColumnOrder(5)
                        .HasComment("Additional description of each record");

                    b.Property<string>("DisplayName")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(512)
                        .HasColumnType("nvarchar(512)")
                        .HasDefaultValue("")
                        .HasColumnOrder(4)
                        .HasComment("The localized name of each record");

                    b.Property<bool?>("ERP")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true)
                        .HasColumnOrder(101);

                    b.Property<long?>("ERPCode")
                        .HasColumnType("bigint")
                        .HasColumnOrder(10)
                        .HasComment("ID of this record in ERP");

                    b.Property<bool>("EnableRecord")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasColumnOrder(9)
                        .HasDefaultValueSql("1")
                        .HasComment("Active status of the record");

                    b.Property<Guid?>("GuidRecord")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnOrder(8)
                        .HasDefaultValueSql("NEWSEQUENTIALID ()")
                        .HasComment("Unique GUID identifier");

                    b.Property<DateTimeOffset?>("LastModified")
                        .HasColumnType("datetimeoffset")
                        .HasColumnOrder(7)
                        .HasComment("The date the record was last updated");

                    b.Property<string>("LastModifiedBy")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(512)
                        .HasColumnType("nvarchar(512)")
                        .HasDefaultValue("")
                        .HasColumnOrder(11)
                        .HasComment("By which user has it been updated?");

                    b.Property<string>("Name")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(512)
                        .HasColumnType("nvarchar(512)")
                        .HasDefaultValue("")
                        .HasColumnOrder(3)
                        .HasComment("English name of each record");

                    b.Property<bool?>("RemoveRequestorApproval")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true)
                        .HasColumnOrder(102);

                    b.Property<bool?>("ShowSupport")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true)
                        .HasColumnOrder(110);

                    b.Property<long?>("SortIndex")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasDefaultValue(0L)
                        .HasColumnOrder(2)
                        .HasComment("The sort index of the record");

                    b.HasKey("Id");

                    b.HasIndex("Created")
                        .IsDescending();

                    b.HasIndex("ERPCode")
                        .IsDescending();

                    b.HasIndex("EnableRecord")
                        .IsDescending();

                    b.HasIndex("LastModified")
                        .IsDescending();

                    b.HasIndex("Name")
                        .IsDescending();

                    b.ToTable("D_Process", "Dimentions", t =>
                        {
                            t.HasComment("The name of the processes that the admin enters");
                        });

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            Created = new DateTimeOffset(new DateTime(2024, 9, 10, 11, 9, 7, 154, DateTimeKind.Unspecified).AddTicks(9669), new TimeSpan(0, 3, 30, 0, 0)),
                            DisplayName = "فرآیند نمونه",
                            ERP = true,
                            ERPCode = -1L,
                            EnableRecord = true,
                            GuidRecord = new Guid("2b262099-21da-4eab-b3bd-4142e2e08b04"),
                            Name = "SampleProcess",
                            RemoveRequestorApproval = true,
                            ShowSupport = true,
                            SortIndex = 1L
                        });
                });

            modelBuilder.Entity("Cheetah.Core.Aggregates.ProcessAggregate.Facts.F_Flow", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnOrder(1)
                        .HasComment("The unique key of each record")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<long?>("CaseStateId")
                        .HasColumnType("bigint");

                    b.Property<DateTimeOffset?>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetimeoffset")
                        .HasColumnOrder(6)
                        .HasDefaultValueSql("GETDATE()")
                        .HasComment("Record creation date");

                    b.Property<string>("CreatedBy")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(512)
                        .HasColumnType("nvarchar(512)")
                        .HasDefaultValue("")
                        .HasColumnOrder(12)
                        .HasComment("Created by what user?");

                    b.Property<string>("Description")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(512)
                        .HasColumnType("nvarchar(512)")
                        .HasDefaultValue("")
                        .HasColumnOrder(5)
                        .HasComment("Additional description of each record");

                    b.Property<string>("DisplayName")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(512)
                        .HasColumnType("nvarchar(512)")
                        .HasDefaultValue("")
                        .HasColumnOrder(4)
                        .HasComment("The localized name of each record");

                    b.Property<long?>("ERPCode")
                        .HasColumnType("bigint")
                        .HasColumnOrder(10)
                        .HasComment("ID of this record in ERP");

                    b.Property<bool>("EnableRecord")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasColumnOrder(9)
                        .HasDefaultValueSql("1")
                        .HasComment("Active status of the record");

                    b.Property<Guid?>("GuidRecord")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnOrder(8)
                        .HasDefaultValueSql("NEWSEQUENTIALID ()")
                        .HasComment("Unique GUID identifier");

                    b.Property<DateTimeOffset?>("LastModified")
                        .HasColumnType("datetimeoffset")
                        .HasColumnOrder(7)
                        .HasComment("The date the record was last updated");

                    b.Property<string>("LastModifiedBy")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(512)
                        .HasColumnType("nvarchar(512)")
                        .HasDefaultValue("")
                        .HasColumnOrder(11)
                        .HasComment("By which user has it been updated?");

                    b.Property<string>("Name")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(512)
                        .HasColumnType("nvarchar(512)")
                        .HasDefaultValue("")
                        .HasColumnOrder(3)
                        .HasComment("English name of each record");

                    b.Property<long?>("SortIndex")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasDefaultValue(0L)
                        .HasColumnOrder(2)
                        .HasComment("The sort index of the record");

                    b.HasKey("Id");

                    b.HasIndex("Created")
                        .IsDescending();

                    b.HasIndex("ERPCode")
                        .IsDescending();

                    b.HasIndex("EnableRecord")
                        .IsDescending();

                    b.HasIndex("LastModified")
                        .IsDescending();

                    b.HasIndex("Name")
                        .IsDescending();

                    b.ToTable("F_Flow", "Facts", t =>
                        {
                            t.HasComment("Flow of BPMN for transferring between tasks");
                        });
                });

            modelBuilder.Entity("Cheetah.Core.Aggregates.ProcessAggregate.Facts.F_Form", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnOrder(1)
                        .HasComment("The unique key of each record")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<DateTimeOffset?>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetimeoffset")
                        .HasColumnOrder(6)
                        .HasDefaultValueSql("GETDATE()")
                        .HasComment("Record creation date");

                    b.Property<string>("CreatedBy")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(512)
                        .HasColumnType("nvarchar(512)")
                        .HasDefaultValue("")
                        .HasColumnOrder(12)
                        .HasComment("Created by what user?");

                    b.Property<string>("Description")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(512)
                        .HasColumnType("nvarchar(512)")
                        .HasDefaultValue("")
                        .HasColumnOrder(5)
                        .HasComment("Additional description of each record");

                    b.Property<string>("DisplayName")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(512)
                        .HasColumnType("nvarchar(512)")
                        .HasDefaultValue("")
                        .HasColumnOrder(4)
                        .HasComment("The localized name of each record");

                    b.Property<long?>("ERPCode")
                        .HasColumnType("bigint")
                        .HasColumnOrder(10)
                        .HasComment("ID of this record in ERP");

                    b.Property<bool>("EnableRecord")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasColumnOrder(9)
                        .HasDefaultValueSql("1")
                        .HasComment("Active status of the record");

                    b.Property<Guid?>("GuidRecord")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnOrder(8)
                        .HasDefaultValueSql("NEWSEQUENTIALID ()")
                        .HasComment("Unique GUID identifier");

                    b.Property<DateTimeOffset?>("LastModified")
                        .HasColumnType("datetimeoffset")
                        .HasColumnOrder(7)
                        .HasComment("The date the record was last updated");

                    b.Property<string>("LastModifiedBy")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(512)
                        .HasColumnType("nvarchar(512)")
                        .HasDefaultValue("")
                        .HasColumnOrder(11)
                        .HasComment("By which user has it been updated?");

                    b.Property<string>("Name")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(512)
                        .HasColumnType("nvarchar(512)")
                        .HasDefaultValue("")
                        .HasColumnOrder(3)
                        .HasComment("English name of each record");

                    b.Property<long?>("SortIndex")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasDefaultValue(0L)
                        .HasColumnOrder(2)
                        .HasComment("The sort index of the record");

                    b.HasKey("Id");

                    b.HasIndex("Created")
                        .IsDescending();

                    b.HasIndex("ERPCode")
                        .IsDescending();

                    b.HasIndex("EnableRecord")
                        .IsDescending();

                    b.HasIndex("LastModified")
                        .IsDescending();

                    b.HasIndex("Name")
                        .IsDescending();

                    b.ToTable("F_Form", "Facts", t =>
                        {
                            t.HasComment("Entitiy for forms");
                        });

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            Created = new DateTimeOffset(new DateTime(2024, 9, 10, 11, 9, 7, 155, DateTimeKind.Unspecified).AddTicks(3979), new TimeSpan(0, 3, 30, 0, 0)),
                            DisplayName = "اقدام کارشناسی",
                            ERPCode = -1L,
                            EnableRecord = true,
                            GuidRecord = new Guid("c0141896-4b40-4748-86b2-849edced1350"),
                            Name = "ExpertForm",
                            SortIndex = 1L
                        },
                        new
                        {
                            Id = 2L,
                            Created = new DateTimeOffset(new DateTime(2024, 9, 10, 11, 9, 7, 155, DateTimeKind.Unspecified).AddTicks(3988), new TimeSpan(0, 3, 30, 0, 0)),
                            DisplayName = "بررسی درخواست",
                            ERPCode = -2L,
                            EnableRecord = true,
                            GuidRecord = new Guid("6dc807d2-6806-474a-a811-3102542fe3c7"),
                            Name = "ReviewForm",
                            SortIndex = 2L
                        });
                });

            modelBuilder.Entity("Cheetah.Core.Aggregates.ProcessAggregate.Facts.F_Scenario", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnOrder(1)
                        .HasComment("The unique key of each record")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<DateTimeOffset?>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetimeoffset")
                        .HasColumnOrder(6)
                        .HasDefaultValueSql("GETDATE()")
                        .HasComment("Record creation date");

                    b.Property<string>("CreatedBy")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(512)
                        .HasColumnType("nvarchar(512)")
                        .HasDefaultValue("")
                        .HasColumnOrder(12)
                        .HasComment("Created by what user?");

                    b.Property<string>("Description")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(512)
                        .HasColumnType("nvarchar(512)")
                        .HasDefaultValue("")
                        .HasColumnOrder(5)
                        .HasComment("Additional description of each record");

                    b.Property<string>("DisplayName")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(512)
                        .HasColumnType("nvarchar(512)")
                        .HasDefaultValue("")
                        .HasColumnOrder(4)
                        .HasComment("The localized name of each record");

                    b.Property<long?>("ERPCode")
                        .HasColumnType("bigint")
                        .HasColumnOrder(10)
                        .HasComment("ID of this record in ERP");

                    b.Property<bool>("EnableRecord")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasColumnOrder(9)
                        .HasDefaultValueSql("1")
                        .HasComment("Active status of the record");

                    b.Property<Guid?>("GuidRecord")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnOrder(8)
                        .HasDefaultValueSql("NEWSEQUENTIALID ()")
                        .HasComment("Unique GUID identifier");

                    b.Property<DateTimeOffset?>("LastModified")
                        .HasColumnType("datetimeoffset")
                        .HasColumnOrder(7)
                        .HasComment("The date the record was last updated");

                    b.Property<string>("LastModifiedBy")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(512)
                        .HasColumnType("nvarchar(512)")
                        .HasDefaultValue("")
                        .HasColumnOrder(11)
                        .HasComment("By which user has it been updated?");

                    b.Property<string>("Name")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(512)
                        .HasColumnType("nvarchar(512)")
                        .HasDefaultValue("")
                        .HasColumnOrder(3)
                        .HasComment("English name of each record");

                    b.Property<long?>("SortIndex")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasDefaultValue(0L)
                        .HasColumnOrder(2)
                        .HasComment("The sort index of the record");

                    b.HasKey("Id");

                    b.HasIndex("Created")
                        .IsDescending();

                    b.HasIndex("ERPCode")
                        .IsDescending();

                    b.HasIndex("EnableRecord")
                        .IsDescending();

                    b.HasIndex("LastModified")
                        .IsDescending();

                    b.HasIndex("Name")
                        .IsDescending();

                    b.ToTable("F_Scenario", "Facts", t =>
                        {
                            t.HasComment("Scenario of processes");
                        });

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            Created = new DateTimeOffset(new DateTime(2024, 9, 10, 11, 9, 7, 155, DateTimeKind.Unspecified).AddTicks(2097), new TimeSpan(0, 3, 30, 0, 0)),
                            DisplayName = "سناریو نمونه",
                            ERPCode = -1L,
                            EnableRecord = true,
                            GuidRecord = new Guid("964d5ffd-69c6-4a7d-9390-a306bf9af4a7"),
                            Name = "SampleScenario",
                            SortIndex = 1L
                        });
                });

            modelBuilder.Entity("Cheetah.Core.Aggregates.ProcessAggregate.Facts.F_Task", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnOrder(1)
                        .HasComment("The unique key of each record")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<DateTimeOffset?>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetimeoffset")
                        .HasColumnOrder(6)
                        .HasDefaultValueSql("GETDATE()")
                        .HasComment("Record creation date");

                    b.Property<string>("CreatedBy")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(512)
                        .HasColumnType("nvarchar(512)")
                        .HasDefaultValue("")
                        .HasColumnOrder(12)
                        .HasComment("Created by what user?");

                    b.Property<string>("Description")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(512)
                        .HasColumnType("nvarchar(512)")
                        .HasDefaultValue("")
                        .HasColumnOrder(5)
                        .HasComment("Additional description of each record");

                    b.Property<string>("DisplayName")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(512)
                        .HasColumnType("nvarchar(512)")
                        .HasDefaultValue("")
                        .HasColumnOrder(4)
                        .HasComment("The localized name of each record");

                    b.Property<long?>("ERPCode")
                        .HasColumnType("bigint")
                        .HasColumnOrder(10)
                        .HasComment("ID of this record in ERP");

                    b.Property<bool>("EnableRecord")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasColumnOrder(9)
                        .HasDefaultValueSql("1")
                        .HasComment("Active status of the record");

                    b.Property<long?>("FormId")
                        .HasColumnType("bigint")
                        .HasColumnOrder(102);

                    b.Property<Guid?>("GuidRecord")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnOrder(8)
                        .HasDefaultValueSql("NEWSEQUENTIALID ()")
                        .HasComment("Unique GUID identifier");

                    b.Property<DateTimeOffset?>("LastModified")
                        .HasColumnType("datetimeoffset")
                        .HasColumnOrder(7)
                        .HasComment("The date the record was last updated");

                    b.Property<string>("LastModifiedBy")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(512)
                        .HasColumnType("nvarchar(512)")
                        .HasDefaultValue("")
                        .HasColumnOrder(11)
                        .HasComment("By which user has it been updated?");

                    b.Property<string>("Name")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(512)
                        .HasColumnType("nvarchar(512)")
                        .HasDefaultValue("")
                        .HasColumnOrder(3)
                        .HasComment("English name of each record");

                    b.Property<long?>("ScenarioId")
                        .HasColumnType("bigint")
                        .HasColumnOrder(101);

                    b.Property<long?>("SortIndex")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasDefaultValue(0L)
                        .HasColumnOrder(2)
                        .HasComment("The sort index of the record");

                    b.HasKey("Id");

                    b.HasIndex("Created")
                        .IsDescending();

                    b.HasIndex("ERPCode")
                        .IsDescending();

                    b.HasIndex("EnableRecord")
                        .IsDescending();

                    b.HasIndex("FormId");

                    b.HasIndex("LastModified")
                        .IsDescending();

                    b.HasIndex("Name")
                        .IsDescending();

                    b.HasIndex("ScenarioId");

                    b.ToTable("F_Task", "Facts", t =>
                        {
                            t.HasComment("Entities like position, role, etc.");
                        });

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            Created = new DateTimeOffset(new DateTime(2024, 9, 10, 11, 9, 7, 155, DateTimeKind.Unspecified).AddTicks(6386), new TimeSpan(0, 3, 30, 0, 0)),
                            DisplayName = "ثبت درخواست",
                            ERPCode = -1L,
                            EnableRecord = true,
                            GuidRecord = new Guid("df2fe686-d84c-4996-9184-746e3d2c4284"),
                            Name = "Sample_Scenario_Requestor",
                            ScenarioId = 1L,
                            SortIndex = 1L
                        },
                        new
                        {
                            Id = 2L,
                            Created = new DateTimeOffset(new DateTime(2024, 9, 10, 11, 9, 7, 155, DateTimeKind.Unspecified).AddTicks(6844), new TimeSpan(0, 3, 30, 0, 0)),
                            DisplayName = "بررسی درخواست",
                            ERPCode = -2L,
                            EnableRecord = true,
                            GuidRecord = new Guid("2cb550cd-e59d-4cff-baed-63b56bf4ecff"),
                            Name = "Sample_Scenario_RequestorManager",
                            ScenarioId = 1L,
                            SortIndex = 2L
                        });
                });

            modelBuilder.Entity("Cheetah.Core.Aggregates.ProcessAggregate.Links.L_FlowCondition", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnOrder(1)
                        .HasComment("The unique key of each record")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<DateTimeOffset?>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetimeoffset")
                        .HasColumnOrder(6)
                        .HasDefaultValueSql("GETDATE()")
                        .HasComment("Record creation date");

                    b.Property<string>("CreatedBy")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(512)
                        .HasColumnType("nvarchar(512)")
                        .HasDefaultValue("")
                        .HasColumnOrder(12)
                        .HasComment("Created by what user?");

                    b.Property<string>("Description")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(512)
                        .HasColumnType("nvarchar(512)")
                        .HasDefaultValue("")
                        .HasColumnOrder(5)
                        .HasComment("Additional description of each record");

                    b.Property<string>("DisplayName")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(512)
                        .HasColumnType("nvarchar(512)")
                        .HasDefaultValue("")
                        .HasColumnOrder(4)
                        .HasComment("The localized name of each record");

                    b.Property<long?>("ERPCode")
                        .HasColumnType("bigint")
                        .HasColumnOrder(10)
                        .HasComment("ID of this record in ERP");

                    b.Property<bool>("EnableRecord")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasColumnOrder(9)
                        .HasDefaultValueSql("1")
                        .HasComment("Active status of the record");

                    b.Property<long?>("FifthId")
                        .HasColumnType("bigint")
                        .HasColumnOrder(104);

                    b.Property<long?>("FirstId")
                        .HasColumnType("bigint")
                        .HasColumnOrder(100);

                    b.Property<long?>("FourthId")
                        .HasColumnType("bigint")
                        .HasColumnOrder(103);

                    b.Property<Guid?>("GuidRecord")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnOrder(8)
                        .HasDefaultValueSql("NEWSEQUENTIALID ()")
                        .HasComment("Unique GUID identifier");

                    b.Property<DateTimeOffset?>("LastModified")
                        .HasColumnType("datetimeoffset")
                        .HasColumnOrder(7)
                        .HasComment("The date the record was last updated");

                    b.Property<string>("LastModifiedBy")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(512)
                        .HasColumnType("nvarchar(512)")
                        .HasDefaultValue("")
                        .HasColumnOrder(11)
                        .HasComment("By which user has it been updated?");

                    b.Property<string>("Name")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(512)
                        .HasColumnType("nvarchar(512)")
                        .HasDefaultValue("")
                        .HasColumnOrder(3)
                        .HasComment("English name of each record");

                    b.Property<long?>("SecondId")
                        .HasColumnType("bigint")
                        .HasColumnOrder(101);

                    b.Property<long?>("SortIndex")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasDefaultValue(0L)
                        .HasColumnOrder(2)
                        .HasComment("The sort index of the record");

                    b.Property<long?>("ThirdId")
                        .HasColumnType("bigint")
                        .HasColumnOrder(102);

                    b.HasKey("Id");

                    b.HasIndex("Created")
                        .IsDescending();

                    b.HasIndex("ERPCode")
                        .IsDescending();

                    b.HasIndex("EnableRecord")
                        .IsDescending();

                    b.HasIndex("FifthId")
                        .IsDescending();

                    b.HasIndex("FirstId")
                        .IsDescending();

                    b.HasIndex("FourthId")
                        .IsDescending();

                    b.HasIndex("LastModified")
                        .IsDescending();

                    b.HasIndex("Name")
                        .IsDescending();

                    b.HasIndex("SecondId")
                        .IsDescending();

                    b.HasIndex("ThirdId")
                        .IsDescending();

                    b.ToTable("L_FlowCondition", "Links", t =>
                        {
                            t.HasComment("Conditionals of each flow");
                        });
                });

            modelBuilder.Entity("Cheetah.Core.Aggregates.ProcessAggregate.Links.L_FlowTask", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnOrder(1)
                        .HasComment("The unique key of each record")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<DateTimeOffset?>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetimeoffset")
                        .HasColumnOrder(6)
                        .HasDefaultValueSql("GETDATE()")
                        .HasComment("Record creation date");

                    b.Property<string>("CreatedBy")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(512)
                        .HasColumnType("nvarchar(512)")
                        .HasDefaultValue("")
                        .HasColumnOrder(12)
                        .HasComment("Created by what user?");

                    b.Property<string>("Description")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(512)
                        .HasColumnType("nvarchar(512)")
                        .HasDefaultValue("")
                        .HasColumnOrder(5)
                        .HasComment("Additional description of each record");

                    b.Property<string>("DisplayName")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(512)
                        .HasColumnType("nvarchar(512)")
                        .HasDefaultValue("")
                        .HasColumnOrder(4)
                        .HasComment("The localized name of each record");

                    b.Property<long?>("ERPCode")
                        .HasColumnType("bigint")
                        .HasColumnOrder(10)
                        .HasComment("ID of this record in ERP");

                    b.Property<bool>("EnableRecord")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasColumnOrder(9)
                        .HasDefaultValueSql("1")
                        .HasComment("Active status of the record");

                    b.Property<long?>("FifthId")
                        .HasColumnType("bigint")
                        .HasColumnOrder(104);

                    b.Property<long?>("FirstId")
                        .HasColumnType("bigint")
                        .HasColumnOrder(100);

                    b.Property<long?>("FourthId")
                        .HasColumnType("bigint")
                        .HasColumnOrder(103);

                    b.Property<Guid?>("GuidRecord")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnOrder(8)
                        .HasDefaultValueSql("NEWSEQUENTIALID ()")
                        .HasComment("Unique GUID identifier");

                    b.Property<DateTimeOffset?>("LastModified")
                        .HasColumnType("datetimeoffset")
                        .HasColumnOrder(7)
                        .HasComment("The date the record was last updated");

                    b.Property<string>("LastModifiedBy")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(512)
                        .HasColumnType("nvarchar(512)")
                        .HasDefaultValue("")
                        .HasColumnOrder(11)
                        .HasComment("By which user has it been updated?");

                    b.Property<string>("Name")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(512)
                        .HasColumnType("nvarchar(512)")
                        .HasDefaultValue("")
                        .HasColumnOrder(3)
                        .HasComment("English name of each record");

                    b.Property<long?>("SecondId")
                        .HasColumnType("bigint")
                        .HasColumnOrder(101);

                    b.Property<long?>("SortIndex")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasDefaultValue(0L)
                        .HasColumnOrder(2)
                        .HasComment("The sort index of the record");

                    b.Property<long?>("ThirdId")
                        .HasColumnType("bigint")
                        .HasColumnOrder(102);

                    b.HasKey("Id");

                    b.HasIndex("Created")
                        .IsDescending();

                    b.HasIndex("ERPCode")
                        .IsDescending();

                    b.HasIndex("EnableRecord")
                        .IsDescending();

                    b.HasIndex("FifthId")
                        .IsDescending();

                    b.HasIndex("FirstId")
                        .IsDescending();

                    b.HasIndex("FourthId")
                        .IsDescending();

                    b.HasIndex("LastModified")
                        .IsDescending();

                    b.HasIndex("Name")
                        .IsDescending();

                    b.HasIndex("SecondId")
                        .IsDescending();

                    b.HasIndex("ThirdId")
                        .IsDescending();

                    b.ToTable("L_FlowTask", "Links", t =>
                        {
                            t.HasComment("Exit tasks of each flow");
                        });
                });

            modelBuilder.Entity("Cheetah.Core.Aggregates.ProcessAggregate.Links.L_ProcessScenario", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnOrder(1)
                        .HasComment("The unique key of each record")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<DateTimeOffset?>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetimeoffset")
                        .HasColumnOrder(6)
                        .HasDefaultValueSql("GETDATE()")
                        .HasComment("Record creation date");

                    b.Property<string>("CreatedBy")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(512)
                        .HasColumnType("nvarchar(512)")
                        .HasDefaultValue("")
                        .HasColumnOrder(12)
                        .HasComment("Created by what user?");

                    b.Property<string>("Description")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(512)
                        .HasColumnType("nvarchar(512)")
                        .HasDefaultValue("")
                        .HasColumnOrder(5)
                        .HasComment("Additional description of each record");

                    b.Property<string>("DisplayName")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(512)
                        .HasColumnType("nvarchar(512)")
                        .HasDefaultValue("")
                        .HasColumnOrder(4)
                        .HasComment("The localized name of each record");

                    b.Property<long?>("ERPCode")
                        .HasColumnType("bigint")
                        .HasColumnOrder(10)
                        .HasComment("ID of this record in ERP");

                    b.Property<bool>("EnableRecord")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasColumnOrder(9)
                        .HasDefaultValueSql("1")
                        .HasComment("Active status of the record");

                    b.Property<long?>("FifthId")
                        .HasColumnType("bigint")
                        .HasColumnOrder(104);

                    b.Property<long?>("FirstId")
                        .HasColumnType("bigint")
                        .HasColumnOrder(100);

                    b.Property<long?>("FourthId")
                        .HasColumnType("bigint")
                        .HasColumnOrder(103);

                    b.Property<Guid?>("GuidRecord")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnOrder(8)
                        .HasDefaultValueSql("NEWSEQUENTIALID ()")
                        .HasComment("Unique GUID identifier");

                    b.Property<DateTimeOffset?>("LastModified")
                        .HasColumnType("datetimeoffset")
                        .HasColumnOrder(7)
                        .HasComment("The date the record was last updated");

                    b.Property<string>("LastModifiedBy")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(512)
                        .HasColumnType("nvarchar(512)")
                        .HasDefaultValue("")
                        .HasColumnOrder(11)
                        .HasComment("By which user has it been updated?");

                    b.Property<string>("Name")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(512)
                        .HasColumnType("nvarchar(512)")
                        .HasDefaultValue("")
                        .HasColumnOrder(3)
                        .HasComment("English name of each record");

                    b.Property<long?>("SecondId")
                        .HasColumnType("bigint")
                        .HasColumnOrder(101);

                    b.Property<long?>("SortIndex")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasDefaultValue(0L)
                        .HasColumnOrder(2)
                        .HasComment("The sort index of the record");

                    b.Property<long?>("ThirdId")
                        .HasColumnType("bigint")
                        .HasColumnOrder(102);

                    b.HasKey("Id");

                    b.HasIndex("Created")
                        .IsDescending();

                    b.HasIndex("ERPCode")
                        .IsDescending();

                    b.HasIndex("EnableRecord")
                        .IsDescending();

                    b.HasIndex("FifthId")
                        .IsDescending();

                    b.HasIndex("FirstId")
                        .IsDescending();

                    b.HasIndex("FourthId")
                        .IsDescending();

                    b.HasIndex("LastModified")
                        .IsDescending();

                    b.HasIndex("Name")
                        .IsDescending();

                    b.HasIndex("SecondId")
                        .IsDescending();

                    b.HasIndex("ThirdId")
                        .IsDescending();

                    b.ToTable("L_ProcessScenario", "Links", t =>
                        {
                            t.HasComment("Related scenarios of each flow");
                        });

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            Created = new DateTimeOffset(new DateTime(2024, 9, 10, 11, 9, 7, 154, DateTimeKind.Unspecified).AddTicks(8209), new TimeSpan(0, 3, 30, 0, 0)),
                            DisplayName = "فرآیند نمونه-سناریو نمونه",
                            ERPCode = -1L,
                            EnableRecord = true,
                            FirstId = 1L,
                            GuidRecord = new Guid("9ec16228-5295-4043-86ce-1bec1cee3cfc"),
                            Name = "SampleProcess_SampleScenario",
                            SecondId = 1L,
                            SortIndex = 1L
                        });
                });

            modelBuilder.Entity("Cheetah.Core.Aggregates.ProcessAggregate.Links.L_ScenarioCondition", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnOrder(1)
                        .HasComment("The unique key of each record")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<DateTimeOffset?>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetimeoffset")
                        .HasColumnOrder(6)
                        .HasDefaultValueSql("GETDATE()")
                        .HasComment("Record creation date");

                    b.Property<string>("CreatedBy")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(512)
                        .HasColumnType("nvarchar(512)")
                        .HasDefaultValue("")
                        .HasColumnOrder(12)
                        .HasComment("Created by what user?");

                    b.Property<string>("Description")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(512)
                        .HasColumnType("nvarchar(512)")
                        .HasDefaultValue("")
                        .HasColumnOrder(5)
                        .HasComment("Additional description of each record");

                    b.Property<string>("DisplayName")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(512)
                        .HasColumnType("nvarchar(512)")
                        .HasDefaultValue("")
                        .HasColumnOrder(4)
                        .HasComment("The localized name of each record");

                    b.Property<long?>("ERPCode")
                        .HasColumnType("bigint")
                        .HasColumnOrder(10)
                        .HasComment("ID of this record in ERP");

                    b.Property<bool>("EnableRecord")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasColumnOrder(9)
                        .HasDefaultValueSql("1")
                        .HasComment("Active status of the record");

                    b.Property<long?>("FifthId")
                        .HasColumnType("bigint")
                        .HasColumnOrder(104);

                    b.Property<long?>("FirstId")
                        .HasColumnType("bigint")
                        .HasColumnOrder(100);

                    b.Property<long?>("FourthId")
                        .HasColumnType("bigint")
                        .HasColumnOrder(103);

                    b.Property<Guid?>("GuidRecord")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnOrder(8)
                        .HasDefaultValueSql("NEWSEQUENTIALID ()")
                        .HasComment("Unique GUID identifier");

                    b.Property<DateTimeOffset?>("LastModified")
                        .HasColumnType("datetimeoffset")
                        .HasColumnOrder(7)
                        .HasComment("The date the record was last updated");

                    b.Property<string>("LastModifiedBy")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(512)
                        .HasColumnType("nvarchar(512)")
                        .HasDefaultValue("")
                        .HasColumnOrder(11)
                        .HasComment("By which user has it been updated?");

                    b.Property<string>("Name")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(512)
                        .HasColumnType("nvarchar(512)")
                        .HasDefaultValue("")
                        .HasColumnOrder(3)
                        .HasComment("English name of each record");

                    b.Property<long?>("SecondId")
                        .HasColumnType("bigint")
                        .HasColumnOrder(101);

                    b.Property<long?>("SortIndex")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasDefaultValue(0L)
                        .HasColumnOrder(2)
                        .HasComment("The sort index of the record");

                    b.Property<long?>("ThirdId")
                        .HasColumnType("bigint")
                        .HasColumnOrder(102);

                    b.HasKey("Id");

                    b.HasIndex("Created")
                        .IsDescending();

                    b.HasIndex("ERPCode")
                        .IsDescending();

                    b.HasIndex("EnableRecord")
                        .IsDescending();

                    b.HasIndex("FifthId")
                        .IsDescending();

                    b.HasIndex("FirstId")
                        .IsDescending();

                    b.HasIndex("FourthId")
                        .IsDescending();

                    b.HasIndex("LastModified")
                        .IsDescending();

                    b.HasIndex("Name")
                        .IsDescending();

                    b.HasIndex("SecondId")
                        .IsDescending();

                    b.HasIndex("ThirdId")
                        .IsDescending();

                    b.ToTable("L_ScenarioCondition", "Links", t =>
                        {
                            t.HasComment("Conditionals of each scenario");
                        });
                });

            modelBuilder.Entity("Cheetah.Core.Aggregates.ProcessAggregate.Links.L_TaskCondition", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnOrder(1)
                        .HasComment("The unique key of each record")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<DateTimeOffset?>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetimeoffset")
                        .HasColumnOrder(6)
                        .HasDefaultValueSql("GETDATE()")
                        .HasComment("Record creation date");

                    b.Property<string>("CreatedBy")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(512)
                        .HasColumnType("nvarchar(512)")
                        .HasDefaultValue("")
                        .HasColumnOrder(12)
                        .HasComment("Created by what user?");

                    b.Property<string>("Description")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(512)
                        .HasColumnType("nvarchar(512)")
                        .HasDefaultValue("")
                        .HasColumnOrder(5)
                        .HasComment("Additional description of each record");

                    b.Property<string>("DisplayName")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(512)
                        .HasColumnType("nvarchar(512)")
                        .HasDefaultValue("")
                        .HasColumnOrder(4)
                        .HasComment("The localized name of each record");

                    b.Property<long?>("ERPCode")
                        .HasColumnType("bigint")
                        .HasColumnOrder(10)
                        .HasComment("ID of this record in ERP");

                    b.Property<bool>("EnableRecord")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasColumnOrder(9)
                        .HasDefaultValueSql("1")
                        .HasComment("Active status of the record");

                    b.Property<long?>("FifthId")
                        .HasColumnType("bigint")
                        .HasColumnOrder(104);

                    b.Property<long?>("FirstId")
                        .HasColumnType("bigint")
                        .HasColumnOrder(100);

                    b.Property<long?>("FourthId")
                        .HasColumnType("bigint")
                        .HasColumnOrder(103);

                    b.Property<Guid?>("GuidRecord")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnOrder(8)
                        .HasDefaultValueSql("NEWSEQUENTIALID ()")
                        .HasComment("Unique GUID identifier");

                    b.Property<DateTimeOffset?>("LastModified")
                        .HasColumnType("datetimeoffset")
                        .HasColumnOrder(7)
                        .HasComment("The date the record was last updated");

                    b.Property<string>("LastModifiedBy")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(512)
                        .HasColumnType("nvarchar(512)")
                        .HasDefaultValue("")
                        .HasColumnOrder(11)
                        .HasComment("By which user has it been updated?");

                    b.Property<string>("Name")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(512)
                        .HasColumnType("nvarchar(512)")
                        .HasDefaultValue("")
                        .HasColumnOrder(3)
                        .HasComment("English name of each record");

                    b.Property<long?>("SecondId")
                        .HasColumnType("bigint")
                        .HasColumnOrder(101);

                    b.Property<long?>("SortIndex")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasDefaultValue(0L)
                        .HasColumnOrder(2)
                        .HasComment("The sort index of the record");

                    b.Property<long?>("ThirdId")
                        .HasColumnType("bigint")
                        .HasColumnOrder(102);

                    b.HasKey("Id");

                    b.HasIndex("Created")
                        .IsDescending();

                    b.HasIndex("ERPCode")
                        .IsDescending();

                    b.HasIndex("EnableRecord")
                        .IsDescending();

                    b.HasIndex("FifthId")
                        .IsDescending();

                    b.HasIndex("FirstId")
                        .IsDescending();

                    b.HasIndex("FourthId")
                        .IsDescending();

                    b.HasIndex("LastModified")
                        .IsDescending();

                    b.HasIndex("Name")
                        .IsDescending();

                    b.HasIndex("SecondId")
                        .IsDescending();

                    b.HasIndex("ThirdId")
                        .IsDescending();

                    b.ToTable("L_TaskCondition", "Links", t =>
                        {
                            t.HasComment("Conditionals of each task");
                        });
                });

            modelBuilder.Entity("Cheetah.Core.Aggregates.ProcessAggregate.Links.L_TaskFlow", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnOrder(1)
                        .HasComment("The unique key of each record")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<DateTimeOffset?>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetimeoffset")
                        .HasColumnOrder(6)
                        .HasDefaultValueSql("GETDATE()")
                        .HasComment("Record creation date");

                    b.Property<string>("CreatedBy")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(512)
                        .HasColumnType("nvarchar(512)")
                        .HasDefaultValue("")
                        .HasColumnOrder(12)
                        .HasComment("Created by what user?");

                    b.Property<string>("Description")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(512)
                        .HasColumnType("nvarchar(512)")
                        .HasDefaultValue("")
                        .HasColumnOrder(5)
                        .HasComment("Additional description of each record");

                    b.Property<string>("DisplayName")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(512)
                        .HasColumnType("nvarchar(512)")
                        .HasDefaultValue("")
                        .HasColumnOrder(4)
                        .HasComment("The localized name of each record");

                    b.Property<long?>("ERPCode")
                        .HasColumnType("bigint")
                        .HasColumnOrder(10)
                        .HasComment("ID of this record in ERP");

                    b.Property<bool>("EnableRecord")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasColumnOrder(9)
                        .HasDefaultValueSql("1")
                        .HasComment("Active status of the record");

                    b.Property<long?>("FifthId")
                        .HasColumnType("bigint")
                        .HasColumnOrder(104);

                    b.Property<long?>("FirstId")
                        .HasColumnType("bigint")
                        .HasColumnOrder(100);

                    b.Property<long?>("FourthId")
                        .HasColumnType("bigint")
                        .HasColumnOrder(103);

                    b.Property<Guid?>("GuidRecord")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnOrder(8)
                        .HasDefaultValueSql("NEWSEQUENTIALID ()")
                        .HasComment("Unique GUID identifier");

                    b.Property<DateTimeOffset?>("LastModified")
                        .HasColumnType("datetimeoffset")
                        .HasColumnOrder(7)
                        .HasComment("The date the record was last updated");

                    b.Property<string>("LastModifiedBy")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(512)
                        .HasColumnType("nvarchar(512)")
                        .HasDefaultValue("")
                        .HasColumnOrder(11)
                        .HasComment("By which user has it been updated?");

                    b.Property<string>("Name")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(512)
                        .HasColumnType("nvarchar(512)")
                        .HasDefaultValue("")
                        .HasColumnOrder(3)
                        .HasComment("English name of each record");

                    b.Property<long?>("SecondId")
                        .HasColumnType("bigint")
                        .HasColumnOrder(101);

                    b.Property<long?>("SortIndex")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasDefaultValue(0L)
                        .HasColumnOrder(2)
                        .HasComment("The sort index of the record");

                    b.Property<long?>("ThirdId")
                        .HasColumnType("bigint")
                        .HasColumnOrder(102);

                    b.HasKey("Id");

                    b.HasIndex("Created")
                        .IsDescending();

                    b.HasIndex("ERPCode")
                        .IsDescending();

                    b.HasIndex("EnableRecord")
                        .IsDescending();

                    b.HasIndex("FifthId")
                        .IsDescending();

                    b.HasIndex("FirstId")
                        .IsDescending();

                    b.HasIndex("FourthId")
                        .IsDescending();

                    b.HasIndex("LastModified")
                        .IsDescending();

                    b.HasIndex("Name")
                        .IsDescending();

                    b.HasIndex("SecondId")
                        .IsDescending();

                    b.HasIndex("ThirdId")
                        .IsDescending();

                    b.ToTable("L_TaskFlow", "Links", t =>
                        {
                            t.HasComment("Exit flows of each task");
                        });
                });

            modelBuilder.Entity("Cheetah.Core.Aggregates.UserAggregate.Dimentions.D_User", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnOrder(1)
                        .HasComment("The unique key of each record")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("Core")
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)")
                        .HasColumnOrder(102);

                    b.Property<DateTimeOffset?>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetimeoffset")
                        .HasColumnOrder(6)
                        .HasDefaultValueSql("GETDATE()")
                        .HasComment("Record creation date");

                    b.Property<string>("CreatedBy")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(512)
                        .HasColumnType("nvarchar(512)")
                        .HasDefaultValue("")
                        .HasColumnOrder(12)
                        .HasComment("Created by what user?");

                    b.Property<bool?>("CreatedCasesSkipAssigRules")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false)
                        .HasColumnOrder(105);

                    b.Property<bool?>("DelegateEnabled")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false)
                        .HasColumnOrder(104);

                    b.Property<long?>("DelegateId")
                        .HasColumnType("bigint")
                        .HasColumnOrder(109);

                    b.Property<string>("Description")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(512)
                        .HasColumnType("nvarchar(512)")
                        .HasDefaultValue("")
                        .HasColumnOrder(5)
                        .HasComment("Additional description of each record");

                    b.Property<string>("DisplayName")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(512)
                        .HasColumnType("nvarchar(512)")
                        .HasDefaultValue("")
                        .HasColumnOrder(4)
                        .HasComment("The localized name of each record");

                    b.Property<long?>("ERPCode")
                        .HasColumnType("bigint")
                        .HasColumnOrder(10)
                        .HasComment("ID of this record in ERP");

                    b.Property<bool>("EnableRecord")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasColumnOrder(9)
                        .HasDefaultValueSql("1")
                        .HasComment("Active status of the record");

                    b.Property<bool?>("EnabledForAssignation")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true)
                        .HasColumnOrder(103);

                    b.Property<Guid?>("GuidRecord")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnOrder(8)
                        .HasDefaultValueSql("NEWSEQUENTIALID ()")
                        .HasComment("Unique GUID identifier");

                    b.Property<string>("IDPersonel")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)")
                        .HasColumnOrder(106);

                    b.Property<string>("LDAPDescription")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnOrder(107);

                    b.Property<DateTimeOffset?>("LastModified")
                        .HasColumnType("datetimeoffset")
                        .HasColumnOrder(7)
                        .HasComment("The date the record was last updated");

                    b.Property<string>("LastModifiedBy")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(512)
                        .HasColumnType("nvarchar(512)")
                        .HasDefaultValue("")
                        .HasColumnOrder(11)
                        .HasComment("By which user has it been updated?");

                    b.Property<string>("Name")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(512)
                        .HasColumnType("nvarchar(512)")
                        .HasDefaultValue("")
                        .HasColumnOrder(3)
                        .HasComment("English name of each record");

                    b.Property<long?>("Parent_Id")
                        .HasColumnType("bigint");

                    b.Property<long?>("SortIndex")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasDefaultValue(0L)
                        .HasColumnOrder(2)
                        .HasComment("The sort index of the record");

                    b.Property<long?>("UserInformationId")
                        .HasColumnType("bigint")
                        .HasColumnOrder(110);

                    b.HasKey("Id");

                    b.HasIndex("Created")
                        .IsDescending();

                    b.HasIndex("DelegateId")
                        .IsUnique()
                        .HasFilter("[DelegateId] IS NOT NULL");

                    b.HasIndex("ERPCode")
                        .IsDescending();

                    b.HasIndex("EnableRecord")
                        .IsDescending();

                    b.HasIndex("LastModified")
                        .IsDescending();

                    b.HasIndex("Name")
                        .IsDescending();

                    b.HasIndex("Parent_Id");

                    b.HasIndex("UserInformationId");

                    b.ToTable("D_User", "Dimentions", t =>
                        {
                            t.HasComment("Cheetah's user");
                        });

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            Created = new DateTimeOffset(new DateTime(2024, 9, 10, 11, 9, 7, 126, DateTimeKind.Unspecified).AddTicks(7245), new TimeSpan(0, 3, 30, 0, 0)),
                            DisplayName = "محمد شریفی",
                            ERPCode = -1L,
                            EnableRecord = true,
                            GuidRecord = new Guid("567d73f6-f917-427c-a3b5-5cf8e201eae6"),
                            Name = "m.sharifi",
                            SortIndex = 1L
                        },
                        new
                        {
                            Id = 2L,
                            Created = new DateTimeOffset(new DateTime(2024, 9, 10, 11, 9, 7, 154, DateTimeKind.Unspecified).AddTicks(2020), new TimeSpan(0, 3, 30, 0, 0)),
                            DisplayName = "امین شریفی",
                            ERPCode = -2L,
                            EnableRecord = true,
                            GuidRecord = new Guid("032bfdfa-932f-423f-8355-b7af66c30984"),
                            Name = "a.sharifi",
                            SortIndex = 2L
                        });
                });

            modelBuilder.Entity("Cheetah.Core.Aggregates.UserAggregate.Dimentions.D_UserInformation", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnOrder(1)
                        .HasComment("The unique key of each record")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("Address")
                        .HasMaxLength(512)
                        .HasColumnType("nvarchar(512)")
                        .HasColumnOrder(112);

                    b.Property<DateTime?>("Birthdate")
                        .HasColumnType("datetime2")
                        .HasColumnOrder(110);

                    b.Property<string>("ContactCell")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnOrder(107);

                    b.Property<string>("ContactEmail")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnOrder(105);

                    b.Property<string>("ContactMessenger")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnOrder(106);

                    b.Property<DateTimeOffset?>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetimeoffset")
                        .HasColumnOrder(6)
                        .HasDefaultValueSql("GETDATE()")
                        .HasComment("Record creation date");

                    b.Property<string>("CreatedBy")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(512)
                        .HasColumnType("nvarchar(512)")
                        .HasDefaultValue("")
                        .HasColumnOrder(12)
                        .HasComment("Created by what user?");

                    b.Property<string>("Description")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(512)
                        .HasColumnType("nvarchar(512)")
                        .HasDefaultValue("")
                        .HasColumnOrder(5)
                        .HasComment("Additional description of each record");

                    b.Property<string>("DisplayName")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(512)
                        .HasColumnType("nvarchar(512)")
                        .HasDefaultValue("")
                        .HasColumnOrder(4)
                        .HasComment("The localized name of each record");

                    b.Property<long?>("ERPCode")
                        .HasColumnType("bigint")
                        .HasColumnOrder(10)
                        .HasComment("ID of this record in ERP");

                    b.Property<bool>("EnableRecord")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasColumnOrder(9)
                        .HasDefaultValueSql("1")
                        .HasComment("Active status of the record");

                    b.Property<string>("FirstName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnOrder(100);

                    b.Property<Guid?>("GuidRecord")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnOrder(8)
                        .HasDefaultValueSql("NEWSEQUENTIALID ()")
                        .HasComment("Unique GUID identifier");

                    b.Property<string>("InternalPhone")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnOrder(111);

                    b.Property<DateTimeOffset?>("LastModified")
                        .HasColumnType("datetimeoffset")
                        .HasColumnOrder(7)
                        .HasComment("The date the record was last updated");

                    b.Property<string>("LastModifiedBy")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(512)
                        .HasColumnType("nvarchar(512)")
                        .HasDefaultValue("")
                        .HasColumnOrder(11)
                        .HasComment("By which user has it been updated?");

                    b.Property<string>("LastName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnOrder(101);

                    b.Property<string>("Name")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(512)
                        .HasColumnType("nvarchar(512)")
                        .HasDefaultValue("")
                        .HasColumnOrder(3)
                        .HasComment("English name of each record");

                    b.Property<string>("NationalCode")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnOrder(109);

                    b.Property<bool?>("NotifByCell")
                        .HasColumnType("bit")
                        .HasColumnOrder(104);

                    b.Property<bool?>("NotifByEmail")
                        .HasColumnType("bit")
                        .HasColumnOrder(102);

                    b.Property<bool?>("NotifByMessenger")
                        .HasColumnType("bit")
                        .HasColumnOrder(103);

                    b.Property<string>("RegistrationNumber")
                        .HasMaxLength(215)
                        .HasColumnType("nvarchar(215)")
                        .HasColumnOrder(113);

                    b.Property<long?>("SortIndex")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasDefaultValue(0L)
                        .HasColumnOrder(2)
                        .HasComment("The sort index of the record");

                    b.Property<byte[]>("UserPicture")
                        .HasColumnType("varbinary(max)")
                        .HasColumnOrder(108);

                    b.HasKey("Id");

                    b.HasIndex("Created")
                        .IsDescending();

                    b.HasIndex("ERPCode")
                        .IsDescending();

                    b.HasIndex("EnableRecord")
                        .IsDescending();

                    b.HasIndex("LastModified")
                        .IsDescending();

                    b.HasIndex("Name")
                        .IsDescending();

                    b.ToTable("D_UserInformation", "Dimentions", t =>
                        {
                            t.HasComment("Additional user information");
                        });
                });

            modelBuilder.Entity("Cheetah.Core.Aggregates.UserAggregate.Links.L_UserCondition", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnOrder(1)
                        .HasComment("The unique key of each record")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<DateTimeOffset?>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetimeoffset")
                        .HasColumnOrder(6)
                        .HasDefaultValueSql("GETDATE()")
                        .HasComment("Record creation date");

                    b.Property<string>("CreatedBy")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(512)
                        .HasColumnType("nvarchar(512)")
                        .HasDefaultValue("")
                        .HasColumnOrder(12)
                        .HasComment("Created by what user?");

                    b.Property<string>("Description")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(512)
                        .HasColumnType("nvarchar(512)")
                        .HasDefaultValue("")
                        .HasColumnOrder(5)
                        .HasComment("Additional description of each record");

                    b.Property<string>("DisplayName")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(512)
                        .HasColumnType("nvarchar(512)")
                        .HasDefaultValue("")
                        .HasColumnOrder(4)
                        .HasComment("The localized name of each record");

                    b.Property<long?>("ERPCode")
                        .HasColumnType("bigint")
                        .HasColumnOrder(10)
                        .HasComment("ID of this record in ERP");

                    b.Property<bool>("EnableRecord")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasColumnOrder(9)
                        .HasDefaultValueSql("1")
                        .HasComment("Active status of the record");

                    b.Property<long?>("FifthId")
                        .HasColumnType("bigint")
                        .HasColumnOrder(104);

                    b.Property<long?>("FirstId")
                        .HasColumnType("bigint")
                        .HasColumnOrder(100);

                    b.Property<long?>("FourthId")
                        .HasColumnType("bigint")
                        .HasColumnOrder(103);

                    b.Property<Guid?>("GuidRecord")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnOrder(8)
                        .HasDefaultValueSql("NEWSEQUENTIALID ()")
                        .HasComment("Unique GUID identifier");

                    b.Property<DateTimeOffset?>("LastModified")
                        .HasColumnType("datetimeoffset")
                        .HasColumnOrder(7)
                        .HasComment("The date the record was last updated");

                    b.Property<string>("LastModifiedBy")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(512)
                        .HasColumnType("nvarchar(512)")
                        .HasDefaultValue("")
                        .HasColumnOrder(11)
                        .HasComment("By which user has it been updated?");

                    b.Property<string>("Name")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(512)
                        .HasColumnType("nvarchar(512)")
                        .HasDefaultValue("")
                        .HasColumnOrder(3)
                        .HasComment("English name of each record");

                    b.Property<long?>("SecondId")
                        .HasColumnType("bigint")
                        .HasColumnOrder(101);

                    b.Property<long?>("SortIndex")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasDefaultValue(0L)
                        .HasColumnOrder(2)
                        .HasComment("The sort index of the record");

                    b.Property<long?>("ThirdId")
                        .HasColumnType("bigint")
                        .HasColumnOrder(102);

                    b.HasKey("Id");

                    b.HasIndex("Created")
                        .IsDescending();

                    b.HasIndex("ERPCode")
                        .IsDescending();

                    b.HasIndex("EnableRecord")
                        .IsDescending();

                    b.HasIndex("FifthId")
                        .IsDescending();

                    b.HasIndex("FirstId")
                        .IsDescending();

                    b.HasIndex("FourthId")
                        .IsDescending();

                    b.HasIndex("LastModified")
                        .IsDescending();

                    b.HasIndex("Name")
                        .IsDescending();

                    b.HasIndex("SecondId")
                        .IsDescending();

                    b.HasIndex("ThirdId")
                        .IsDescending();

                    b.ToTable("L_UserCondition", "Links", t =>
                        {
                            t.HasComment("Conditionals of each user");
                        });
                });

            modelBuilder.Entity("Cheetah.Core.Aggregates.CaseAggregate.Facts.F_Case", b =>
                {
                    b.HasOne("Cheetah.Core.Aggregates.CaseAggregate.Dimentions.D_CaseState", "CaseState")
                        .WithMany()
                        .HasForeignKey("CaseStateId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Cheetah.Core.Aggregates.UserAggregate.Dimentions.D_User", null)
                        .WithMany()
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Cheetah.Core.Aggregates.ProcessAggregate.Dimentions.D_Process", null)
                        .WithMany()
                        .HasForeignKey("ProcessId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Cheetah.Core.Aggregates.UserAggregate.Dimentions.D_User", null)
                        .WithMany()
                        .HasForeignKey("RequestorId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Cheetah.Core.Aggregates.ProcessAggregate.Facts.F_Scenario", null)
                        .WithMany()
                        .HasForeignKey("SelectedScenarioId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("CaseState");
                });

            modelBuilder.Entity("Cheetah.Core.Aggregates.CaseAggregate.Facts.F_WorkItem", b =>
                {
                    b.HasOne("Cheetah.Core.Aggregates.CaseAggregate.Facts.F_Case", "Case")
                        .WithMany()
                        .HasForeignKey("CaseId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Cheetah.Core.Aggregates.CaseAggregate.Facts.F_Case", null)
                        .WithMany("WorkItems")
                        .HasForeignKey("F_CaseId");

                    b.HasOne("Cheetah.Core.Aggregates.ProcessAggregate.Facts.F_Task", null)
                        .WithMany()
                        .HasForeignKey("TaskId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Cheetah.Core.Aggregates.UserAggregate.Dimentions.D_User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Cheetah.Core.Aggregates.CaseAggregate.Dimentions.D_WorkItemState", "WorkItemState")
                        .WithMany()
                        .HasForeignKey("WorkItemStateId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Case");

                    b.Navigation("WorkItemState");
                });

            modelBuilder.Entity("Cheetah.Core.Aggregates.CaseAggregate.Links.L_CaseCondition", b =>
                {
                    b.HasOne("Cheetah.Core.Aggregates.CaseAggregate.Facts.F_Case", "Case")
                        .WithMany("CaseConditions")
                        .HasForeignKey("FirstId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Cheetah.Core.Aggregates.ConditionAggregate.Facts.F_Condition", null)
                        .WithMany()
                        .HasForeignKey("SecondId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Case");
                });

            modelBuilder.Entity("Cheetah.Core.Aggregates.CaseAggregate.Links.L_CaseTaskUser", b =>
                {
                    b.HasOne("Cheetah.Core.Aggregates.CaseAggregate.Facts.F_Case", "Case")
                        .WithMany("CaseTaskUsers")
                        .HasForeignKey("FirstId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Cheetah.Core.Aggregates.ProcessAggregate.Facts.F_Task", null)
                        .WithMany()
                        .HasForeignKey("SecondId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Cheetah.Core.Aggregates.ProcessAggregate.Facts.F_Task", "Task")
                        .WithMany()
                        .HasForeignKey("TaskId");

                    b.HasOne("Cheetah.Core.Aggregates.UserAggregate.Dimentions.D_User", null)
                        .WithMany()
                        .HasForeignKey("ThirdId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Cheetah.Core.Aggregates.UserAggregate.Dimentions.D_User", "User")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.Navigation("Case");

                    b.Navigation("Task");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Cheetah.Core.Aggregates.CaseAggregate.Links.L_WorkItemCondition", b =>
                {
                    b.HasOne("Cheetah.Core.Aggregates.CaseAggregate.Facts.F_WorkItem", "WorkItem")
                        .WithMany("WorkItemConditions")
                        .HasForeignKey("FirstId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Cheetah.Core.Aggregates.ConditionAggregate.Facts.F_Condition", null)
                        .WithMany()
                        .HasForeignKey("SecondId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("WorkItem");
                });

            modelBuilder.Entity("Cheetah.Core.Aggregates.ConditionAggregate.Dimentions.D_Tag", b =>
                {
                    b.HasOne("Cheetah.Core.Aggregates.ConditionAggregate.Dimentions.D_TagCategory", "TagCategory")
                        .WithMany()
                        .HasForeignKey("TagCategoryId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Cheetah.Core.Aggregates.ConditionAggregate.Dimentions.D_TagType", "TagType")
                        .WithMany()
                        .HasForeignKey("TagTypeId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("TagCategory");

                    b.Navigation("TagType");
                });

            modelBuilder.Entity("Cheetah.Core.Aggregates.ConditionAggregate.Facts.F_Condition", b =>
                {
                    b.HasOne("Cheetah.Core.Aggregates.ConditionAggregate.Dimentions.D_Operand", "Operand")
                        .WithMany()
                        .HasForeignKey("OperandId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Cheetah.Core.Aggregates.ConditionAggregate.Dimentions.D_Tag", "Tag")
                        .WithMany()
                        .HasForeignKey("TagId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Operand");

                    b.Navigation("Tag");
                });

            modelBuilder.Entity("Cheetah.Core.Aggregates.ProcessAggregate.Facts.F_Task", b =>
                {
                    b.HasOne("Cheetah.Core.Aggregates.ProcessAggregate.Facts.F_Form", "Form")
                        .WithMany()
                        .HasForeignKey("FormId");

                    b.HasOne("Cheetah.Core.Aggregates.ProcessAggregate.Facts.F_Scenario", "Scenario")
                        .WithMany("Tasks")
                        .HasForeignKey("ScenarioId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Form");

                    b.Navigation("Scenario");
                });

            modelBuilder.Entity("Cheetah.Core.Aggregates.ProcessAggregate.Links.L_FlowCondition", b =>
                {
                    b.HasOne("Cheetah.Core.Aggregates.ProcessAggregate.Facts.F_Flow", "Flow")
                        .WithMany("FlowConditions")
                        .HasForeignKey("FirstId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Cheetah.Core.Aggregates.ConditionAggregate.Facts.F_Condition", null)
                        .WithMany()
                        .HasForeignKey("SecondId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Flow");
                });

            modelBuilder.Entity("Cheetah.Core.Aggregates.ProcessAggregate.Links.L_FlowTask", b =>
                {
                    b.HasOne("Cheetah.Core.Aggregates.ProcessAggregate.Facts.F_Flow", "Flow")
                        .WithMany("FlowTasks")
                        .HasForeignKey("FirstId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Cheetah.Core.Aggregates.ProcessAggregate.Facts.F_Task", "Task")
                        .WithMany("FlowTasks")
                        .HasForeignKey("SecondId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Flow");

                    b.Navigation("Task");
                });

            modelBuilder.Entity("Cheetah.Core.Aggregates.ProcessAggregate.Links.L_ProcessScenario", b =>
                {
                    b.HasOne("Cheetah.Core.Aggregates.ProcessAggregate.Dimentions.D_Process", "Process")
                        .WithMany("ProcessScenarios")
                        .HasForeignKey("FirstId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Cheetah.Core.Aggregates.ProcessAggregate.Facts.F_Scenario", "Scenario")
                        .WithMany("ProcessScenarios")
                        .HasForeignKey("SecondId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Process");

                    b.Navigation("Scenario");
                });

            modelBuilder.Entity("Cheetah.Core.Aggregates.ProcessAggregate.Links.L_ScenarioCondition", b =>
                {
                    b.HasOne("Cheetah.Core.Aggregates.ProcessAggregate.Facts.F_Scenario", "Scenario")
                        .WithMany("ScenarioConditions")
                        .HasForeignKey("FirstId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Cheetah.Core.Aggregates.ConditionAggregate.Facts.F_Condition", null)
                        .WithMany()
                        .HasForeignKey("SecondId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Scenario");
                });

            modelBuilder.Entity("Cheetah.Core.Aggregates.ProcessAggregate.Links.L_TaskCondition", b =>
                {
                    b.HasOne("Cheetah.Core.Aggregates.ProcessAggregate.Facts.F_Task", "Task")
                        .WithMany("TaskConditions")
                        .HasForeignKey("FirstId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Cheetah.Core.Aggregates.ConditionAggregate.Facts.F_Condition", null)
                        .WithMany()
                        .HasForeignKey("SecondId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Task");
                });

            modelBuilder.Entity("Cheetah.Core.Aggregates.ProcessAggregate.Links.L_TaskFlow", b =>
                {
                    b.HasOne("Cheetah.Core.Aggregates.ProcessAggregate.Facts.F_Task", "Task")
                        .WithMany("TaskFlows")
                        .HasForeignKey("FirstId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Cheetah.Core.Aggregates.ProcessAggregate.Facts.F_Flow", "Flow")
                        .WithMany("TaskFlows")
                        .HasForeignKey("SecondId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Flow");

                    b.Navigation("Task");
                });

            modelBuilder.Entity("Cheetah.Core.Aggregates.UserAggregate.Dimentions.D_User", b =>
                {
                    b.HasOne("Cheetah.Core.Aggregates.UserAggregate.Dimentions.D_User", "Delegate")
                        .WithOne()
                        .HasForeignKey("Cheetah.Core.Aggregates.UserAggregate.Dimentions.D_User", "DelegateId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Cheetah.Core.Aggregates.UserAggregate.Dimentions.D_User", "Parent")
                        .WithMany("Childs")
                        .HasForeignKey("Parent_Id");

                    b.HasOne("Cheetah.Core.Aggregates.UserAggregate.Dimentions.D_UserInformation", "UserInformation")
                        .WithMany()
                        .HasForeignKey("UserInformationId");

                    b.Navigation("Delegate");

                    b.Navigation("Parent");

                    b.Navigation("UserInformation");
                });

            modelBuilder.Entity("Cheetah.Core.Aggregates.UserAggregate.Links.L_UserCondition", b =>
                {
                    b.HasOne("Cheetah.Core.Aggregates.UserAggregate.Dimentions.D_User", "User")
                        .WithMany("UserConditions")
                        .HasForeignKey("FirstId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Cheetah.Core.Aggregates.ConditionAggregate.Facts.F_Condition", null)
                        .WithMany()
                        .HasForeignKey("SecondId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("User");
                });

            modelBuilder.Entity("Cheetah.Core.Aggregates.CaseAggregate.Facts.F_Case", b =>
                {
                    b.Navigation("CaseConditions");

                    b.Navigation("CaseTaskUsers");

                    b.Navigation("WorkItems");
                });

            modelBuilder.Entity("Cheetah.Core.Aggregates.CaseAggregate.Facts.F_WorkItem", b =>
                {
                    b.Navigation("WorkItemConditions");
                });

            modelBuilder.Entity("Cheetah.Core.Aggregates.ProcessAggregate.Dimentions.D_Process", b =>
                {
                    b.Navigation("ProcessScenarios");
                });

            modelBuilder.Entity("Cheetah.Core.Aggregates.ProcessAggregate.Facts.F_Flow", b =>
                {
                    b.Navigation("FlowConditions");

                    b.Navigation("FlowTasks");

                    b.Navigation("TaskFlows");
                });

            modelBuilder.Entity("Cheetah.Core.Aggregates.ProcessAggregate.Facts.F_Scenario", b =>
                {
                    b.Navigation("ProcessScenarios");

                    b.Navigation("ScenarioConditions");

                    b.Navigation("Tasks");
                });

            modelBuilder.Entity("Cheetah.Core.Aggregates.ProcessAggregate.Facts.F_Task", b =>
                {
                    b.Navigation("FlowTasks");

                    b.Navigation("TaskConditions");

                    b.Navigation("TaskFlows");
                });

            modelBuilder.Entity("Cheetah.Core.Aggregates.UserAggregate.Dimentions.D_User", b =>
                {
                    b.Navigation("Childs");

                    b.Navigation("UserConditions");
                });
#pragma warning restore 612, 618
        }
    }
}
