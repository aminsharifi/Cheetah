@inject ISimpleClassRepository simpleClassRepository;
@inject NavigationManager _NavigationManager;
@inject CNavigation _CNavigation;
@inject IJSRuntime _JsRuntime;
@if (!IsInline)
{
    <NavigationComponent _CNavigation="@_CNavigation"></NavigationComponent>
}
@if (!IsLoading)
{
    <CEditDimentions Record="@Record" ParentCallback="@LoadDTO"
                 Name="@Name" Title="@Title" IsLoading="@IsLoading"
                 UpdateLink="@UpdateLink" IsInline="@IsInline"
                 Id="@Id">
        <RowTemplate>
            <LinkComponent Records="@simpleLinkClassDTO"
                       reference="@reference"
                       Title="@($"کاربرانی که در واحد {Record.PDisplayName} هستند")">
            </LinkComponent>
        </RowTemplate>

    </CEditDimentions>
}
@code {

    [Parameter]
    public long Id { get; set; } = 0;

    [Parameter]
    public String Name { get; set; } = "D_Area";

    [Parameter]
    public String? reference { get; set; }

    [Parameter]
    public Boolean IsInline { get; set; } = false;

    [Parameter]
    public EventCallback ParentCallback { get; set; }

    public D_Area Record { get; set; }

    private String Title { get; set; } = "ایجاد";

    public Boolean IsLoading { get; set; } = true;

    public SimpleLinkClassDTO simpleLinkClassDTO = new();

    public async Task UpdateLink()
    {
        await simpleClassRepository.UpdateLink(simpleLinkClassDTO);
    }
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender && Record is null)
        {
            Title = (Id > 0) ? "ذخیره" : "ایجاد";
            await LoadDTO();
        }
        if (reference is null || firstRender)
        {
            if (!IsInline)
            {
                reference = _CNavigation.LoadNavigation(Address: $"Dimentions/{((Id > 0) ? "Edit" : "Create")}/{Name}/{((Id > 0) ? Id : String.Empty)}",
                RowDescription: Record.PDisplayName,
                RowId: Record.Id, Reference: reference);
            }

            IsLoading = false;
            StateHasChanged();
        }
    }

    private async Task SelectedProcessesChanged(ChangeEventArgs e)
    {
        if (Id > 0 && e.Value is not null)
        {
            var Area_UnitTypeId = Int64.Parse(e.Value.ToString());
        }
    }

    private async Task LoadDTO()
    {
        try
        {
            Record = await simpleClassRepository.Get(Name, Id) as D_Area;
            var d_User = await simpleClassRepository.GetAllByName("D_User");
            var l_UserArea = await simpleClassRepository.GetAllLink("L_UserArea", SD.Second, Id);


            simpleLinkClassDTO = new SimpleLinkClassDTO()
                {
                    linkType = "L_UserArea",
                    firstType = "D_User",
                    secondType = "D_Area",
                    fixedId = Id,
                    sd_Status = SD.Second,
                    floatState = d_User.Select(x => new KeyValuePair<Tuple<long, string>, Boolean>(
                        new Tuple<long, string>(x.Id, x.PDisplayName),
                        l_UserArea.Any(y => y.FirstId == x.Id && y.SecondId == Id)))
                                                                .ToDictionary(x => x.Key, x => x.Value)
                };

            if (ParentCallback.HasDelegate)
            {
                ParentCallback.InvokeAsync();
            }
        }
        catch (Exception ex)
        {
            await _JsRuntime.ToastrError(ex.InnerException.Message);
        }
    }
}