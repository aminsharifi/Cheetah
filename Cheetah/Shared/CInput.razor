@using System.Linq.Expressions;

<div class="shadow rounded p-3 form-group me-1 mb-2 col-sm-11 @((CFieldType != FieldType.CSelect)?"col-md-5":"col-md-10" )"
     style="@((LValue < 1 && (CFieldType == FieldType.CID))? "display: none;" : "")">



    <div class="input-group d-flex justify-content-end" style="direction:ltr">
        @if (CFieldType == FieldType.CID)
        {
            <InputNumber @bind-Value="LValue" disabled="disabled" @attributes=CapturedAttributes
                         class="form-control" aria-describedby="basic-addon2" lang="fa" dir="rtl">
            </InputNumber>
        }
        else if (CFieldType == FieldType.CInt)
        {
            <InputNumber @attributes=CapturedAttributes
                     @bind-Value="LValue" class="form-control"
                         aria-describedby="basic-addon2" lang="fa" dir="rtl"
                         data-bs-toggle="tooltip" data-bs-placement="top"
                         data-bs-custom-class="custom-tooltip"
                         data-bs-delay='{"show":100, "hide":100}'
                         data-bs-animation="true"
                         data-bs-trigger="hover"
                         data-bs-title="@CDescription">
            </InputNumber>
        }
        else if (CFieldType == FieldType.CNInt)
        {
            <InputNumber @attributes=CapturedAttributes
                     @bind-Value="NLValue" class="form-control"
                         aria-describedby="basic-addon2" lang="fa" dir="rtl"
                         data-bs-toggle="tooltip" data-bs-placement="top"
                         data-bs-custom-class="custom-tooltip"
                         data-bs-delay='{"show":100, "hide":100}'
                         data-bs-animation="true"
                         data-bs-trigger="hover"
                         data-bs-title="@CDescription">
            </InputNumber>
        }
        else if (CFieldType == FieldType.CString)
        {
            <InputText @attributes=CapturedAttributes
                   @bind-Value="SValue" class="form-control"
                       aria-describedby="basic-addon2" lang="fa" dir="rtl"
                       data-bs-toggle="tooltip" data-bs-placement="top"
                       data-bs-custom-class="custom-tooltip"
                       data-bs-delay='{"show":100, "hide":100}'
                       data-bs-animation="true"
                       data-bs-trigger="hover"
                       data-bs-title="@CDescription">
            </InputText>
        }
        else if (CFieldType == FieldType.CBool)
        {
            <div class="form-check form-switch">
                <InputCheckbox @attributes=CapturedAttributes
                               class="form-check-input" type="checkbox" role="switch"
                           @bind-Value="BValue"
                               style="width:5em;height: 100%;border-radius: revert;margin-top: 0px;">
                </InputCheckbox>
            </div>
        }
        else if (CFieldType == FieldType.CSelect)
        {
            <InputSelect @attributes=CapturedAttributes
                     @bind-Value="LValue" style="direction:rtl" @oninput="SelectedProcessesChanged"
                         disabled="@Disabled" class="col-6">
                @if (LValue < 1)
                {
                    <option selected value="">لطفا یک مورد را انتخاب نمایید</option>
                }
                @foreach (var d_User in Records)
                {
                    <option value="@d_User.Id">شناسه: @d_User.Id | نام: @d_User.PName | نام فارسی: @d_User.PDisplayName</option>
                }
            </InputSelect>
        }
        <div class="input-group-prepend @((CFieldType != FieldType.CSelect)?"col-4":"col-6")">
            <span class="input-group-text" style="border-radius:revert"
                  lang="fa" dir="rtl"><strong>@CDisplayName</strong></span>
        </div>
    </div>
</div>

@code {


    [Parameter(CaptureUnmatchedValues = true)]
    public Dictionary<string, object> CapturedAttributes { get; set; }

    [Parameter]
    public EventCallback<ChangeEventArgs> SelectedProcessesChanged { get; set; }

    [Parameter]
    public Boolean Disabled { get; set; } = false;

    [Parameter]
    public SimpleClass Record { get; set; }

    [Parameter]
    public IEnumerable<SimpleClass> Records { get; set; } = new List<SimpleClass>();

    private String _Svalue;
    [Parameter]
    public String SValue
    {
        get => _Svalue;
        set
        {
            if (_Svalue == value) return;
            _Svalue = value;
            SValueChanged.InvokeAsync(value);
        }
    }
    [Parameter]
    public EventCallback<String> SValueChanged { get; set; }

    private long? _NLvalue;
    [Parameter]
    public long? NLValue
    {
        get => _NLvalue;
        set
        {
            if (_NLvalue == value) return;
            _NLvalue = value;
            NLValueChanged.InvokeAsync(value);
        }
    }
    [Parameter]
    public EventCallback<long?> NLValueChanged { get; set; }


    private long _Lvalue;
    [Parameter]
    public long LValue
    {
        get => _Lvalue;
        set
        {
            if (_Lvalue == value) return;
            _Lvalue = value;
            LValueChanged.InvokeAsync(value);
        }
    }
    [Parameter]
    public EventCallback<long> LValueChanged { get; set; }


    private Boolean _Bvalue;
    [Parameter]
    public Boolean BValue
    {
        get => _Bvalue;
        set
        {
            if (_Bvalue == value) return;
            _Bvalue = value;
            BValueChanged.InvokeAsync(value);
        }
    }
    [Parameter]
    public EventCallback<Boolean> BValueChanged { get; set; }

    //[Parameter]
    //public Expression<Func<object>> MessageValue { get; set; }
    [Parameter]
    public FieldType CFieldType { get; set; }

    [Parameter]
    public String CDisplayName { get; set; }
    [Parameter]
    public String CDescription { get; set; }


}
