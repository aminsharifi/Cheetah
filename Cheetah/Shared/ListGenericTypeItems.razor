@inherits SharedPage
@inject IDialogService DialogService

@if (Records != null && Records.Any())
{
    <MudItem xs="12" Class="pt-0">
        <MudDataGrid T="SimpleClass" Items="@Records" Bordered="true" Striped="true">
            <Columns>
                <PropertyColumn Property="x => x.Id" Title="شناسه" />
                <PropertyColumn Property="x => x.SortIndex" Title="ایندکس" />
                <PropertyColumn Property="x => x.Name" Title="نام" />
                <PropertyColumn Property="x => x.DisplayName" Title="نام نمایشی" />
                <PropertyColumn Property="x => x.Description" Title="متن راهنما" />
                <PropertyColumn Property="x => x.DsblRecord" Title="غیرفعال" />
                <TemplateColumn CellClass="d-flex justify-end">
                    <CellTemplate>
                        <MudButtonGroup OverrideStyles="false">
                            <MudButton Color="Color.Info"
                                       Variant="Variant.Filled"
                                       StartIcon="@Icons.Material.Filled.Edit"
                                       OnClick="@(()=>PrepareLink(@context.Item.Id, CrudOperation.Update))">
                                ویرایش
                            </MudButton>
                            <MudButton Color="Color.Error"
                                       Variant="Variant.Filled"
                                       StartIcon="@Icons.Material.Filled.DeleteForever"
                                       OnClick="@(()=>HandleDelete(@context.Item.Id))">
                                حذف
                            </MudButton>
                        </MudButtonGroup>
                    </CellTemplate>
                </TemplateColumn>
            </Columns>
        </MudDataGrid>
    </MudItem>

    <MudMessageBox @ref="mbox" Title="هشدار" CancelText="انصراف">
        <MessageContent>
            آیا از حذف ردیف اطمینان دارید؟
        </MessageContent>
        <YesButton>
            <MudButton Variant="Variant.Filled" Color="Color.Error"
                       StartIcon="@Icons.Material.Filled.DeleteForever">حذف</MudButton>
        </YesButton>
    </MudMessageBox>
}
<style>
    .my-custom-class {
        backdrop-filter: blur(10px);
    }
</style>
@code {

    MudDialog C_MudDialog { get; set; }
    MudMessageBox mbox { get; set; }    

    public async Task PrepareLink(long? getId, CrudOperation getCrudOperation)
    {

        LoadData = true;
        Id = getId;
        if (getCrudOperation == CrudOperation.Create)
        {
            Href = $"/Dimentions/Create/{Name}/{reference}";
        }
        else
        {
            if (String.IsNullOrEmpty(type))
            {
                Href = $"Dimentions/Edit/{Name}/{Id}/{reference}";
            }
            else
            {
                Href = $"Links/Edit/{Name}/{type}/{Id}/{reference}";
            }
        }

        Title = new UpsertStatus().GetPageTitle(Id).Value;

        var options = new DialogOptions
            {
                ClassBackground = "my-custom-class",
                MaxWidth = MaxWidth.Medium
            };

        var parameters = new DialogParameters<Dialog>();

        parameters.Add(x => x.Name, Name);
        parameters.Add(x => x.ParentCallback, ParentCallback);
        parameters.Add(x => x.Id, Id);
        parameters.Add(x => x.LoadData, LoadData);
        parameters.Add(x => x.IsLoading, IsLoading);
        parameters.Add(x => x.reference, reference);
        parameters.Add(x => x.Href, Href);
        parameters.Add(x => x.Title, Title);
        parameters.Add(x => x.ButtonText, "ذخیره");
        parameters.Add(x => x.Color, Color.Success);

        var dialogresult = await DialogService.ShowAsync<Dialog>("ویرایش ردیف", parameters, options);

        var result = await dialogresult.Result;

        if (!result.Cancelled && bool.TryParse(result.Data.ToString(), out bool resultbool))
        {
            await ParentCallback.InvokeAsync();
            StateHasChanged();
        }
    }

    private async Task HandleDelete(long? DeletedState)
    {
        Id = DeletedState;
        bool? result = await mbox.Show();
        if (result.HasValue && result.Value)
        {
            await simpleClassRepository.delete(Name, Id);
        }
    }
}