@typeparam TEntity
<div>
    @if (Records != null && Records.Any())
    {
        <table class="table table-bordered table table-striped">
            <thead>
                <tr>
                    @HeaderContent
                    @foreach (var CProperties1 in Records.First().GetType().GetProperties()
                   .Where(x => x.CustomAttributes
                   .Any(z => z.AttributeType == typeof(DescriptionAttribute)))
                   .Select(x => x.CustomAttributes
                   .Where(y => y.AttributeType == typeof(DescriptionAttribute))
                   .FirstOrDefault().ConstructorArguments[0].Value).ToList())
                    {
                        <th>@CProperties1</th>
                    }
                    <th>اقدام</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var item in Records as IEnumerable<SimpleClass>)
                {
                    <tr>
                        @foreach (var CProperties1 in Records.First().GetType().GetProperties()
                       .Where(x => x.CustomAttributes
                       .Any(z => z.AttributeType == typeof(DescriptionAttribute))).Select(x => x.Name)
                       .ToList())
                        {
                            <td>
                                @if (
                               item.GetType().GetProperty(CProperties1).GetValue(item, null) != null &&
                               (item.GetType().GetProperty(CProperties1).GetValue(item, null).ToString() == "True" ||
                               item.GetType().GetProperty(CProperties1).GetValue(item, null).ToString() == "False"))
                                {
                                    <div class="form-check form-switch">
                                        <input class="form-check-input" type="checkbox" role="switch" disabled
                               style="width:3em"
                               checked="@(item.GetType().GetProperty(CProperties1).GetValue(item, null))">
                                    </div>
                                }
                                else
                                {
                                    @(item.GetType().GetProperty(CProperties1).GetValue(item, null))
                                }
                            </td>
                        }
                        @*<td>@((item as BaseClass<TEntity>).Id)</td>*@
                        @BodyContent
                        <td>
                            <div class="btn-group" role="group" aria-label="Basic example" style="direction: ltr;width: 10em;">
                                <button class="btn btn-danger" @onclick="()=>HandleDelete((item as SimpleClass).Id)">حذف</button>
                                @if (item.GetType().BaseType.Name.StartsWith("Base"))
                                {
                                    <NavLink href="@($"Dimentions/Edit/{item.GetType().Name}/{(item as SimpleClass).Id}/{reference}")" class="btn-primary btn">ویرایش</NavLink>
                                }
                                else if (type == SD.First || type == SD.Second)
                                {
                                    <a href="@($"/Upsert_Link/Edit/{item.GetType().BaseType.Name}/{type}/{(item as SimpleClass).Id}/{reference}")" class="btn btn-primary btn">ویرایش</a>
                                }
                                else
                                {
                                    <NavLink href="@($"Dimentions/Edit/{item.GetType().BaseType.Name}/{(item as SimpleClass).Id}/{reference}")" class="btn-primary btn">ویرایش</NavLink>
                                }
                            </div>
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    }
</div>


@code {
    [Parameter]
    public IEnumerable<TEntity>? Records { get; set; }
    [Parameter]
    public String? type { get; set; }
    [Parameter]
    public String? reference { get; set; }
    [Parameter]
    public EventCallback<long> ConfirmationDelete { get; set; }
    [Parameter]
    public RenderFragment HeaderContent { get; set; }
    [Parameter]
    public RenderFragment BodyContent { get; set; }
    public String CurrentState { get; set; }
    private async Task HandleDelete(long DeletedState)
    {
        await ConfirmationDelete.InvokeAsync(DeletedState);
    }
}