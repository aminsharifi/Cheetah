@typeparam TEntity where TEntity : SimpleClass
@inject ISimpleClassRepository simpleClassRepository;
@inject NavigationManager _NavigationManager;
@inject IJSRuntime _JsRuntime
@inject CNavigation _CNavigation;

<div class="row my-4" style="direction:rtl">
    <div class="alert alert-primary mb-3 ml-3" role="alert">
        @Title @Name
    </div>

    <div class="col-12">
        @if (!IsLoading)
        {
            <EditForm Model="Record" OnValidSubmit="UpsertTask">
                <DataAnnotationsValidator />
                <ValidationSummary />
                <div class="row">
                    <CInput @bind-LValue="Record.Id"
                        CDescription="شناسه یکتا سیستمی"
                        CDisplayName="شناسه" CFieldType="@(FieldType.CID)"></CInput>
                    <CInput @bind-BValue="Record.DsblRecord"
                        CDescription="جهت غیرفعال سازی"
                        CDisplayName="غیرفعال" CFieldType="@(FieldType.CBool)"></CInput>
                    @if (RowTemplate is not null)
                    {
                        @RowTemplate
                    }
                </div>
                <div class="form-group py-2 col-lg-4 col-lg-offset-4" style="direction: ltr">
                    <div class="btn-group" role="group" aria-label="Basic example" style="width: 20em;">
                        <button class="btn btn-primary">@Title</button>
                        <div type="button" class="btn btn-secondary"
                         @onclick="@(e => _CNavigation.BackNavigation(_NavigationManager))">
                            برگشت
                        </div>
                    </div>
                </div>
            </EditForm>
        }
    </div>
</div>
<CLoading IsLoading="@IsLoading" AnyRecord="@true"></CLoading>

@code {
    [Parameter]
    public Boolean IsLoading { get; set; } = true;
    [Parameter]
    public long? Id { get; set; }
    [Parameter]
    public long? LinkId { get; set; } = 0;
    [Parameter]
    public TEntity Record { get; set; }
    [Parameter]
    public String? reference { get; set; }
    [Parameter]
    public String? Name { get; set; }
    [Parameter]
    public String? type { get; set; }
    [Parameter]
    public String? Title { get; set; }
    [Parameter]
    public RenderFragment? RowTemplate { get; set; }

    protected override void OnAfterRender(bool firstRender)
    {
        base.OnAfterRender(firstRender);
        //_JsRuntime.InvokeVoidAsync("CreateToolTip");
    }


    private async Task UpsertTask()
    {
        if (Record.Id > 0)
        {
            Record = await simpleClassRepository.Update(Record) as TEntity;
            await _JsRuntime.ToastrSuccess($"ردیف {Record.PDescription} با موفقیت ذخیره شد");
        }
        else
        {
            Record = await simpleClassRepository.Create(Record) as TEntity;
            await _JsRuntime.ToastrSuccess("ردیف با موفقیت ایجاد شد");
        }
        _CNavigation.BackNavigation(_NavigationManager);

    }

}
