@using Cheetah_DataAccess.Data
@using System.ComponentModel;
@typeparam TEntity where TEntity : BaseClass<TEntity>
@inject IGeneralRepository<D_ParameterType> iGeneralRepository;
@inject IGeneralRepository<D_FieldType> iD_FieldTypeRepository;
@inject IGeneralRepository<D_Operand> iD_OperandRepository;
@inject NavigationManager _NavigationManager;
<div>
    <EditForm Model="Record" OnValidSubmit="UpsertTask">
        <DataAnnotationsValidator />
        <ValidationSummary />
        <div class="form-group">
            <label>شناسه</label>
            <input @bind="Record.Id" disabled="disabled" class="form-control"></input>
            <label>کد</label>
            <InputNumber @bind-Value="Record.PCode" class="form-control"></InputNumber>
            <ValidationMessage For="@(() => Record.PCode)" />
            <label>ایندکس</label>
            <InputNumber @bind-Value="Record.PIndex" class="form-control"></InputNumber>
            <ValidationMessage For="@(() => Record.PIndex)" />
            <label>نام</label>
            <InputText @bind-Value="Record.PName" class="form-control"></InputText>
            <ValidationMessage For="@(() => Record.PName)" />
            <label>نام نمایشی</label>
            <InputText @bind-Value="Record.PDescription" class="form-control"></InputText>
            <ValidationMessage For="@(() => Record.PDescription)" />
            @*<label>نوع پارامترها</label>
            @foreach (var item in p_ParameterListDTO.PL_ParameterType)
            {
            <InputText @bind-Value="item.PName" class="form-control"></InputText>
            }*@
        </div>
        <div class="form-group  py-2">
            <button class="btn btn-primary">@Title</button>
            <NavLink href="@($"Dimentions/Parameters/List/{Name}")"
                     class="btn btn-secondary">برگشت</NavLink>
        </div>
    </EditForm>
</div>


@code {
    [Parameter]
    public TEntity Record { get; set; }
    [Parameter]
    public String? Name { get; set; }
    [Parameter]
    public String? Title { get; set; }

    private async Task UpsertTask()
    {
        if (Record.Id > 0)
        {
            switch (Name)
            {
                case "D_ParameterType":
                    //Record = await iGeneralRepository.Update(Record);
                    await iGeneralRepository.Update(Record as D_ParameterType);
                    break;
                case "D_FieldType":
                    //Record = await iD_FieldTypeRepository.Update(Record);
                    break;
                case "D_Operand":
                    //Record = await iD_OperandRepository.Update(Record);
                    break;
                default:
                    //Record = await iGeneralRepository.Update(Record);
                    break;
            }
        }
        else
        {
            switch (Name)
            {
                case "D_ParameterType":
                    //Record = await iGeneralRepository.Create(Record);
                    await iGeneralRepository.Create(Record as D_ParameterType);
                    break;
                case "D_FieldType":
                    //Record = await iD_FieldTypeRepository.Update(Record);
                    break;
                case "D_Operand":
                    //Record = await iD_OperandRepository.Update(Record);
                    break;
                default:
                    //Record = await iGeneralRepository.Update(Record);
                    break;
            }
        }
        _NavigationManager.NavigateTo($"/Dimentions/Parameters/List/{Name}");
    }
}