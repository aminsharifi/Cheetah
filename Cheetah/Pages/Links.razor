@page "/Links/{Name}/{type}/{Id:long}/{reference}"
@using System.Web;

@inject ISimpleClassRepository simpleClassRepository;
@inject IJSRuntime _jSRuntime;
@inject NavigationManager _NavigationManager;
@inject CNavigation _CNavigation;
<NavigationComponent _CNavigation="@_CNavigation" />
<div style="direction:rtl">
    <div class="col-12">
        @if (Records != null)
        {
            <br />
            <div class="col-2 offset-2 btn-group" role="group"
                 aria-label="Basic example" style="width: 20em;direction: ltr">
                <div type="button" class="btn btn-secondary"
                 @onclick="@(e => _CNavigation.BackNavigation(_NavigationManager))">
                    برگشت
                </div>
                <br />
                <a href="@($"/Links/Create/{Name}/{type}/{Id}/{reference}")" class="btn btn-primary">افزودن</a>
            </div>
            <br />
            <ListGenericTypeItems Records="@Records" Name="@Name"
                              ConfirmationDelete="ConfirmDelete_Click"
                              type="@type" reference="@reference">
            </ListGenericTypeItems>
        }
        <CLoading IsLoading="@IsLoading" AnyRecord="@Records.Any()"></CLoading>
    </div>
</div>
@code {

    [Parameter]
    public long? Id { get; set; }

    [Parameter]
    public String Name { get; set; }

    [Parameter]
    public String? type { get; set; }

    [Parameter]
    public String? reference { get; set; }

    public Boolean IsLoading { get; set; } = true;

    public long DeleteidRole { get; set; }

    public IEnumerable<SimpleClass> Records { get; set; } = new List<SimpleClass>();

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await LoadRecords();
        }
        if (reference is null || firstRender)
        {
            reference = _CNavigation.LoadNavigation(Address: $"Links/{Name}/{type}/{Id}", RowDescription: Name,
                RowId: null, Reference: reference);

            IsLoading = false;
            StateHasChanged();
        }
    }

    private async Task LoadRecords()
    {
        Records = await simpleClassRepository.GetAllLink(Name, type, Id.Value);
    }

    public async Task ConfirmDelete_Click()
    {
        IsLoading = true;
        await LoadRecords();
        IsLoading = false;
    }
}
