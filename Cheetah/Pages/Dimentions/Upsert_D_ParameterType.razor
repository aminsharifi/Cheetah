@page "/Dimentions/Create/D_ParameterType/{reference}"
@page "/Dimentions/Edit/D_ParameterType/{Id:long}/{reference}"

@inject ISimpleClassRepository simpleClassRepository;
@inject NavigationManager _NavigationManager;
@inject CNavigation _CNavigation;
@inject IJSRuntime _JsRuntime;

<NavigationComponent _CNavigation="@_CNavigation"></NavigationComponent>
@if (!IsLoading)
{
    <CEditDimentions Record="@Record"
                 Name="@Name" Title="@Title" IsLoading="@IsLoading">
        <RowTemplate>
            <CInput @bind-LValue="Record.PT_P_FieldTypeId"
                Records="@PT_P_FieldTypes"
                CDescription="نوع واحد"
                Record="@(Record.PT_P_FieldType)"
                SelectedProcessesChanged="@SelectedProcessesChanged"
                CDisplayName="نوع واحد"
                CFieldType="@(FieldType.CSelect)"
                reference="@reference"></CInput>

            <NavLink href="@($"Links/L_UserArea/{SD.Second}/{Record.Id}/{reference}")"
                     class="link-primary my-1">
                <strong>لیست کاربرانی که این واحد را دارند</strong>
            </NavLink>
        </RowTemplate>
    </CEditDimentions>
}
@code {

    [Parameter]
    public long Id { get; set; } = 0;

    [Parameter]
    public String Name { get; set; } = "D_Area";

    [Parameter]
    public String? reference { get; set; }

    public D_ParameterType Record { get; set; }

    public IEnumerable<SimpleClass> PT_P_FieldTypes { get; set; }

    private String Title { get; set; } = "ایجاد";

    public Boolean IsLoading { get; set; } = true;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender && Record is null)
        {
            Title = (Id > 0) ? "ذخیره" : "ایجاد";
            await LoadDTO();
        }
        if (reference is null || firstRender)
        {
            reference = _CNavigation.LoadNavigation(
                Address: $"Dimentions/{((Id > 0) ? "Edit" : "Create")}/{Name}/{((Id > 0) ? Id : String.Empty)}",

            RowDescription: Record.PDisplayName,

            RowId: Record.Id, Reference: reference);

            IsLoading = false;

            StateHasChanged();
        }
    }

    private async Task SelectedProcessesChanged(ChangeEventArgs e)
    {
        if (Id > 0 && e.Value is not null)
        {
            var D_FieldTypeId = Int64.Parse(e.Value.ToString());
            Record.PT_P_FieldType = PT_P_FieldTypes.First(x => x.Id == D_FieldTypeId) as D_FieldType;
        }
    }

    private async Task LoadDTO()
    {
        try
        {
            Record = await simpleClassRepository.Get(Name, Id) as D_ParameterType;
            PT_P_FieldTypes = await simpleClassRepository.GetAllByName("D_FieldType");
        }
        catch (Exception ex)
        {
            await _JsRuntime.ToastrError(ex.InnerException.Message);
        }
    }
}