@page "/Dimentions/Create/D_Area"
@page "/Dimentions/Edit/D_Area/{Id:long}"
@using Cheetah_Common;
@using Cheetah_DataAccess.Dimentions;
@using Cheetah_DataAccess.Links;
@using Cheetah_DataAccess.Facts;

@inject IGeneralRepository<D_Area> iGeneralRepository;
@inject IGeneralRepository<D_UnitType> iUnitTypeRepository;
@inject IGeneralLinkRepository<L_UserArea> iUserAreaRepository;
@inject NavigationManager _NavigationManager;

<FormGenericTypeItems Record="@Record"
                      Name="@Name" Title="@Title" IsLoading="@IsLoading">
    <RowTemplate>
        <label>نوع واحد</label>
        <InputSelect @bind-Value="Record.Area_UnitTypeId" class="form-control">
            @if (Record.Area_UnitType is null)
            {
                <option selected value="">لطفا یک مورد را انتخاب نمایید</option>
            }
            @foreach (var unitType in unitTypes)
            {
                <option value="@unitType.Id">شناسه: @unitType.Id | نام: @unitType.PName | نام فارسی: @unitType.PDescription</option>
            }
            <ValidationMessage For="@(() => Record.Area_UnitType)" />
        </InputSelect>
        <NavLink href="@($"Dimentions/Parameters/List/L_UserArea/{SD.Second}/{Record.Id}")"
                 class="btn btn-secondary">لیست کاربرانی که این واحد را دارند</NavLink>
    </RowTemplate>
</FormGenericTypeItems>

@code {
    [Parameter]
    public long Id { get; set; } = 0;
    [Parameter]
    public String? Name { get; set; } = "D_Area";

    public D_Area Record { get; set; }

    public IEnumerable<D_UnitType> unitTypes { get; set; }

    public IEnumerable<L_UserArea> UserAreas { get; set; }

    private String Title { get; set; } = "ایجاد";

    public Boolean IsLoading { get; set; } = true;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            Title = (Id > 0) ? "ویرایش" : "ایجاد";
            await LoadDTO();
        }
    }

    private async Task LoadDTO()
    {
        IsLoading = true;
        StateHasChanged();
        Record = await iGeneralRepository.Get(Id);
        unitTypes = await iUnitTypeRepository.GetAll();
        IsLoading = false;
        StateHasChanged();
    }
}