@page "/Dimentions/Create/D_Area/{reference}"
@page "/Dimentions/Edit/D_Area/{Id:long}/{reference}"

@inject ISimpleClassRepository simpleClassRepository;
@inject NavigationManager _NavigationManager;
@inject CNavigation _CNavigation;

<NavigationComponent _CNavigation="@_CNavigation"></NavigationComponent>
@if (!IsLoading)
{
    <CEditDimentions Record="@Record"
                 Name="@Name" Title="@Title" IsLoading="@IsLoading">
        <RowTemplate>
            <CInput @bind-LValue="Record.Area_UnitTypeId"
                Records="@unitTypes" CDescription="واحد"
                Record="@(Record.Area_UnitType)"
                SelectedProcessesChanged="@SelectedProcessesChanged"
                CDisplayName="واحد" CFieldType="@(FieldType.CSelect)"></CInput>
            <div class="form-group m-1 col-sm-11 col-md-5">
                <NavLink href="@($"Links/L_UserArea/{SD.Second}/{Record.Id}/{reference}")"
                         class="btn btn-secondary">لیست کاربرانی که این واحد را دارند</NavLink>
            </div>
        </RowTemplate>
    </CEditDimentions>
}
@code {
    [Parameter]
    public long Id { get; set; } = 0;
    [Parameter]
    public String Name { get; set; } = "D_Area";
    [Parameter]
    public String? reference { get; set; }

    public D_Area Record { get; set; }

    public IEnumerable<SimpleClass> unitTypes { get; set; }

    public IEnumerable<SimpleClass> UserAreas { get; set; }

    private String Title { get; set; } = "ایجاد";

    public Boolean IsLoading { get; set; } = true;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender && Record is null)
        {
            Title = (Id > 0) ? "ذخیره" : "ایجاد";
            await LoadDTO();
        }
        if (reference is null || firstRender)
        {
            reference = _CNavigation.LoadNavigation(Address: $"Dimentions/{((Id > 0) ? "Edit" : "Create")}/{Name}/{((Id > 0) ? Id : String.Empty)}",
            RowDescription: Record.PDescription,
            RowId: Record.Id, Reference: reference);

            IsLoading = false;
            StateHasChanged();
        }
    }
    private async Task SelectedProcessesChanged(ChangeEventArgs e)
    {
        if (Id > 0 && e.Value is not null)
        {
            var Area_UnitTypeId = Int64.Parse(e.Value.ToString());
            Record.Area_UnitType = unitTypes.First(x => x.Id == Area_UnitTypeId) as D_UnitType;
        }
    }
    private async Task LoadDTO()
    {
        Record = await simpleClassRepository.Get("D_Area", Id) as D_Area;
        unitTypes = await simpleClassRepository.GetAllByName("D_UnitType");
    }
}