@page "/Dimentions/Create/D_Area"
@page "/Dimentions/Edit/D_Area/{Id:long}"

@inject ISimpleClassRepository simpleClassRepository;
@inject NavigationManager _NavigationManager;

<FormGenericTypeItems Record="@Record"
                      Name="@Name" Title="@Title" IsLoading="@IsLoading">
    <RowTemplate>

        <label>نوع واحد</label>

        <select @bind-value="Record.Area_UnitTypeId" @bind-value:event="oninput"
                @onchange="SelectedProcessesChanged" class="form-control">

            @if (Record.Area_UnitType == null)
            {
                <option selected value="">لطفا یک مورد را انتخاب نمایید</option>
            }
            @foreach (var unitType in unitTypes)
            {
                <option value="@unitType.Id">شناسه: @unitType.Id | نام: @unitType.PName | نام فارسی: @unitType.PDescription</option>
            }
        </select>
        <ValidationMessage For="@(() => Record.Area_UnitTypeId)" />

        <NavLink href="@($"Dimentions/Parameters/List/L_UserArea/{SD.Second}/{Record.Id}/Dimentions*Edit*{Name}*{Id}")"
                 class="btn btn-secondary">لیست کاربرانی که این واحد را دارند</NavLink>
    </RowTemplate>
</FormGenericTypeItems>

@code {
    [Parameter]
    public long Id { get; set; } = 0;
    [Parameter]
    public String Name { get; set; } = "D_Area";

    public D_Area Record { get; set; }

    public IEnumerable<SimpleClass> unitTypes { get; set; }

    public IEnumerable<SimpleClass> UserAreas { get; set; }

    private String Title { get; set; } = "ایجاد";

    public Boolean IsLoading { get; set; } = true;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender && Record is null)
        {
            Title = (Id > 0) ? "ذخیره" : "ایجاد";
            await LoadDTO();
        }
    }
    private async Task SelectedProcessesChanged(ChangeEventArgs e)
    {
        if (Id > 0 && e.Value is not null)
        {
            var Area_UnitTypeId = Int64.Parse(e.Value.ToString());
            Record.Area_UnitType = unitTypes.First(x => x.Id == Area_UnitTypeId) as D_UnitType;
        }
    }
    private async Task LoadDTO()
    {
        IsLoading = true;
        StateHasChanged();
        Record = await simpleClassRepository.Get("D_Area", Id) as D_Area;
        unitTypes = await simpleClassRepository.GetAllByName("D_UnitType");
        IsLoading = false;
        StateHasChanged();
    }
}