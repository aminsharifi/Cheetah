@page "/Links/Create/{Name}/{type}/{LinkId:long}/{reference}"
@page "/Links/Edit/{Name}/{type}/{Id:long}/{reference}"
@using System.Web;
@using System.Runtime.Serialization.Formatters.Binary;
@using System.Text;

@inject ISimpleClassRepository simpleClassRepository;
@inject NavigationManager _NavigationManager;
@inject CNavigation _CNavigation;
@inject IJSRuntime _JsRuntime;
<NavigationComponent _CNavigation="@_CNavigation" />
@if (!IsLoading)
{
    <CEditLinks Record="@Record" type="@type" LinkId="@LinkId"
            Id="@Id" Name="@Name" FirstName="D_User" SecondName="D_Area"
            Title="@Title" IsLoading="@IsLoading"
            reference="@reference">
        <RowTemplate>
            <CInput @bind-LValue="Record.FirstId" Records="@FirstClass"
                CDescription="@(FirstClassRecord.PDisplayName)" Disabled="@(type == SD.First)"
                CDisplayName="@(FirstClassRecord.PDisplayName)" CFieldType="@(FieldType.CSelect)"></CInput>

            <CInput @bind-LValue="Record.SecondId" Records="@SecondClass"
                CDescription="@(SecondClassRecord.PDisplayName)" Disabled="@(type == SD.Second)"
                CDisplayName="@(SecondClassRecord.PDisplayName)" CFieldType="@(FieldType.CSelect)"></CInput>
        </RowTemplate>
    </CEditLinks>
}

@code {
    [Parameter]
    public long? Id { get; set; }

    [Parameter]
    public long LinkId { get; set; } = 0;

    [Parameter]
    public String? Name { get; set; }

    [Parameter]
    public String? reference { get; set; }

    [Parameter]
    public String type { get; set; }


    public SimpleLinkClass Record { get; set; }

    public SimpleClass FirstClassRecord { get; set; }

    public SimpleClass SecondClassRecord { get; set; }

    public IEnumerable<SimpleClass> FirstClass { get; set; }

    public IEnumerable<SimpleClass> SecondClass { get; set; }

    private String Title { get; set; }

    public Boolean IsLoading { get; set; } = true;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await LoadDTO();
        }
        if (reference is null || firstRender)
        {
            reference = _CNavigation.LoadNavigation(Address: $"Links/{((Id > 0) ? "Edit" : "Create")}/{Name}/{type}/{((Id > 0) ? Id : LinkId)}",
            RowDescription: Record.PDisplayName, RowId: Record.Id, Reference: reference);

            IsLoading = false;
            StateHasChanged();
        }
    }
    private async Task LoadDTO()
    {
        try
        {
            Record = await simpleClassRepository.Get(Name, Id) as SimpleLinkClass;

            if (type == SD.First)
            {
                if (Record.FirstId == 0)
                    Record.FirstId = LinkId;
                else
                    LinkId = Record.FirstId;
            }
            else
            {
                if (Record.SecondId == 0)
                    Record.SecondId = LinkId;
                else
                    LinkId = Record.SecondId;
            }

            var _D_Entity = await simpleClassRepository.GetAllByName("D_Entity");

            var FirstClassName = Record.GetType().GetProperties()[0].PropertyType.Name;

            var SecondClassName = Record.GetType().GetProperties()[1].PropertyType.Name;

            FirstClassRecord = _D_Entity.Where(x => x.PName == FirstClassName).Single();

            SecondClassRecord = _D_Entity.Where(x => x.PName == SecondClassName).Single();

            FirstClass = await simpleClassRepository.GetAllByName(FirstClassName);

            SecondClass = await simpleClassRepository.GetAllByName(SecondClassName);

            Title = Record.Id > 0 ? "ویرایش" : "ایجاد";
        }
        catch (Exception ex)
        {
            await _JsRuntime.ToastrError(ex.InnerException.Message);
        }
    }
}