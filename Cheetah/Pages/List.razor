@page "/Dimentions/Parameters/List"
@page "/Dimentions/Parameters/List/{Name}"
@page "/Dimentions/Parameters/List/{Name}/{type}/{Id:long}/{reference}"
@using Cheetah_Common;
@using Cheetah_DataAccess.Data;
@using Cheetah_DataAccess.Dimentions;
@using Cheetah_DataAccess.Links;
@using System.Linq;
@using Microsoft.CodeAnalysis.CSharp.Scripting;

@inject ISimpleClassRepository simpleClassRepository;
@inject IJSRuntime _jSRuntime;
@inject NavigationManager _NavigationManager;

<_DeleteConfirmation IsParntComponentProcessing="IsLoading" ConfirmationChanged="ConfirmDelete_Click"></_DeleteConfirmation>

<div style="direction:rtl">
    @if (type != SD.First && type != SD.Second)
    {
        <div class="row mt-4">
            <div class="col-6">
                <h4 class="card-title text-primary">انتخاب پارامتر</h4>
                <select value=@Name bind=@Name @onchange="SelectedProcessesChanged">
                    <option value="">یک جدول را انتخاب نمایید</option>
                    <option value="D_Area">ناحیه</option>
                    <option value="D_FieldType">نوع فیلد</option>
                    <option value="D_Location">موقعیت</option>
                    <option value="D_Operand">عملگر</option>
                    <option value="D_ParameterList">لیست پارامتر</option>
                    <option value="D_ParameterType">نوع پارامتر</option>
                    <option value="D_Position">موقعیت</option>
                    <option value="D_ProcessEndorsement">تاییدها</option>
                    <option value="D_ProcessState">وضعیت فرآیند</option>
                    <option value="D_RequestTitle">نوع درخواست</option>
                    <option value="D_Role">نقش</option>
                    <option value="D_Skill">مهارت</option>
                    <option value="D_SubRequestTitle">زیرفرآیند</option>
                    <option value="D_UnitType">نوع واحد</option>
                    <option value="D_User">کاربر</option>
                </select>
            </div>
        </div>
    }
    <div class="col-12">
        @if (Records != null)
        {
            <br />
            <div class="col-2 offset-2">
                @if (type == SD.First || type == SD.Second)
                {
                    <a href="@($"/{reference.Replace("*","/")}")" class="btn btn-secondary form-control">برگشت</a>
                    <br />
                    <a href="@($"/Upsert_Link/Create/{Name}/{type}/0/{Id}/{reference}")" class="btn btn-primary form-control">افزودن</a>
                }
                else
                {
                    <a href="@($"/Dimentions/Create/{Name}")" class="btn btn-primary form-control">افزودن</a>
                }
            </div>
            <br />
            @if (Records.Count > 0)
            {
                <ListGenericTypeItems Records="@Records"
                              ConfirmationDelete="HandleDelete" type="@type" reference="@reference">
                </ListGenericTypeItems>
            }
        }
        @if (Records == null || Records.Count == 0)
        {
            if (IsLoading)
            {
                <h1>در حال بارگیری اطلاعات ...</h1>
                @*<img src="imeges/Loading_Symbol.gif" />*@
            }
            else
            {
                <h1>هیچ ورودی یافت نشد</h1>
            }
        }
    </div>
</div>
@code {

    [Parameter]
    public long? Id { get; set; }
    [Parameter]
    public String Name { get; set; }
    [Parameter]
    public String? type { get; set; }
    [Parameter]
    public String? reference { get; set; }

    public dynamic Records { get; set; }

    private async Task SelectedProcessesChanged(ChangeEventArgs e)
    {
        if (e.Value is not null)
        {
            Name = (string)e.Value;
            _NavigationManager.NavigateTo($"/Dimentions/Parameters/List/{Name}");
            await LoadRecords();
        }
    }

    public Boolean IsLoading { get; set; } = false;
    public long DeleteidRole { get; set; }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
            await LoadRecords();
    }

    private async Task LoadRecords()
    {
        IsLoading = true;
        StateHasChanged();
        if (!String.IsNullOrEmpty(Name))
        {
            Records = await simpleClassRepository.GetAllByName(Name);
        }
        IsLoading = false;
        StateHasChanged();
    }
    private async void HandleDelete(long id)
    {
        DeleteidRole = id;
        var isConfirmed = await _jSRuntime.InvokeAsync<bool>
    ("confirm", "آیا مطمئن هستید؟"); // Confirm
        if (isConfirmed)
        {
            IsLoading = true;
            if (isConfirmed && DeleteidRole != 0)
            {
                await simpleClassRepository.delete(Name, DeleteidRole);
                await LoadRecords();
                await _jSRuntime.InvokeVoidAsync("HideDeleteConfirmationModal");
            }
            IsLoading = false;
        }
    }
    public async Task ConfirmDelete_Click(bool isConfirmed)
    {
        IsLoading = true;
        if (isConfirmed && DeleteidRole != 0)
        {
            await simpleClassRepository.delete(Name, DeleteidRole);
            await LoadRecords();
            await _jSRuntime.InvokeVoidAsync("HideDeleteConfirmationModal");
        }
        IsLoading = false;
    }
}
