@page "/List"
@page "/List/{Name}"
@page "/List/{Name}/{reference}"
@using System.Web;

@inject ISimpleClassRepository simpleClassRepository;
@inject IJSRuntime _jSRuntime;
@inject NavigationManager _NavigationManager;
@inject CNavigation _CNavigation;
<NavigationComponent _CNavigation="@_CNavigation"></NavigationComponent>
<div style="direction:rtl">

    <div class="row mt-4">
        <div class="col-6">
            <div class="form-group">
                <div class="alert alert-primary" role="alert">
                    انتخاب پارامتر
                </div>
                <select class="form-select" value=@Name bind=@Name
                        @onchange="SelectedProcessesChanged">
                    @foreach (var item in keyValuePair)
                    {
                        <option value="@item.Key">@item.Value</option>
                    }
                </select>
            </div>
        </div>
    </div>

    <div class="col-12">
        @if (!String.IsNullOrEmpty(Name))
        {
            <div class="col-2 offset-2 btn-group m-2" role="group"
             aria-label="Basic example" style="width: 20em;direction: ltr">
                <a href="@($"/Dimentions/Create/{Name}/{reference}")" class="btn btn-primary">افزودن</a>
            </div>
            <ListGenericTypeItems Records="@Records" ConfirmationDelete="ConfirmDelete_Click"
                              reference="@reference" Name="@Name">
        </ListGenericTypeItems>
        }
        <CLoading IsLoading="@IsLoading" AnyRecord="@Records.Any()"></CLoading>
    </div>
</div>
@code {

    [Parameter]
    public long? Id { get; set; }

    [Parameter]
    public String Name { get; set; }

    [Parameter]
    public String? reference { get; set; }

    public Boolean IsLoading { get; set; } = true;

    public long DeleteidRole { get; set; }

    public IEnumerable<SimpleClass> Records { get; set; } = new List<SimpleClass>();

    public IEnumerable<KeyValuePair<string, string>> keyValuePair { get; set; } = new List<KeyValuePair<string, string>>();

    private async Task SelectedProcessesChanged(ChangeEventArgs e)
    {
        if (e.Value is not null)
        {
            Name = (string)e.Value;
            _NavigationManager.NavigateTo($"/List/{Name}");
            await FirstLoadRecords();
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await FirstLoadRecords();
        }
        if (reference is null || firstRender)
        {
            _CNavigation.NavigationList.Clear();

            _CNavigation.LoadNavigation(TableName: Name, RowDescription: null,
                RowId: Id, reference: reference);

            if (String.IsNullOrEmpty(reference))
            {
                reference = _CNavigation.Serialize();
            }
            IsLoading = false;
            StateHasChanged();
        }
    }

    private async Task FirstLoadRecords()
    {
        keyValuePair = await simpleClassRepository.GetAllTableName("Dimentions");

        if (Name == null)
        {
            Name = keyValuePair.First().Value;
            _NavigationManager.NavigateTo($"/List/{Name}");
        }
        await LoadRecords();
    }

    private async Task LoadRecords()
    {
        Records = await simpleClassRepository.GetAllByName(Name);
    }
    public async Task ConfirmDelete_Click()
    {
        IsLoading = true;
        await LoadRecords();
        IsLoading = false;
    }
}
