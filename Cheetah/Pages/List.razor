@page "/List"
@page "/List/{Name}"
@page "/List/{Name}/{reference}"
@page "/List/{Name}/{FilterTableName}/{FilterTableId:long}/{reference}"


@inject ISimpleClassRepository simpleClassRepository;
@inject IJSRuntime _JsRuntime;
@inject NavigationManager _NavigationManager;
@inject CNavigation _CNavigation;

<NavigationComponent _CNavigation="@_CNavigation"></NavigationComponent>
<div class="row mb-2" style="direction:rtl">

    @if (!IsLoading)
    {
        <div class="shadow rounded p-3 form-group my-1 col-sm-8 col-md-8">
            <div class="input-group d-flex justify-content-end" style="direction:ltr">
                <select class="form-select" id="floatingSelectGrid" value=@Name bind=@Name
                    @onchange="SelectedProcessesChanged"
                        aria-describedby="basic-addon2" lang="fa" dir="rtl"
                        data-bs-toggle="tooltip" data-bs-placement="top"
                        data-bs-custom-class="custom-tooltip"
                        data-bs-delay='{"show":100, "hide":100}'
                        data-bs-animation="true"
                        data-bs-trigger="hover"
                        data-bs-title="انتخاب پارامتر">
                    @foreach (var item in keyValuePair)
                    {
                        <option value="@item.Key">@item.Value</option>
                    }
                </select>
                <div class="input-group-prepend">
                    <span class="input-group-text" style="border-radius:revert;width: 7em;font-size:large;"
                          lang="fa" dir="rtl">انتخاب پارامتر</span>
                </div>
            </div>
        </div>
    }

    @if (!String.IsNullOrEmpty(Name))
    {
        @if (FilterTable is not null)
        {
            <div class="shadow rounded p-3 form-group my-2 col-sm-12 col-md-6">
                <div class="input-group d-flex justify-content-end" style="direction:ltr">
                    <span class="form-control"> @(keyValuePair.Where(x => x.Key == FilterTableName).Single().Value + ":" + FilterTable.PDisplayName)</span>
                    <div class="input-group-prepend">
                        <span class="input-group-text" style="border-radius:revert;width: 7em;font-size:large;"
                              lang="fa" dir="rtl">فیلتر</span>
                    </div>
                </div>
            </div>
        }
        <ListGenericTypeItems Records="@Records"
                          ConfirmationDelete="UpdateForm"
                          reference="@reference" Name="@Name"
                          ParentCallback="UpdateForm">
        </ListGenericTypeItems>
    }

</div>
<CLoading IsLoading="@IsLoading" AnyRecord="@Records.Any()"></CLoading>
@code {

    [Parameter]
    public long? Id { get; set; }

    [Parameter]
    public String Name { get; set; }

    [Parameter]
    public String? reference { get; set; }

    [Parameter]
    public String? FilterTableName { get; set; }

    [Parameter]
    public Int64? FilterTableId { get; set; }

    public SimpleClass? FilterTable { get; set; }

    public Boolean IsLoading { get; set; } = true;

    public long DeleteidRole { get; set; }

    public IEnumerable<SimpleClass> Records { get; set; } = new List<SimpleClass>();

    public IEnumerable<KeyValuePair<string, string>> keyValuePair { get; set; } = new List<KeyValuePair<string, string>>();

    private async Task SelectedProcessesChanged(ChangeEventArgs e)
    {
        if (e.Value is not null)
        {
            Name = (string)e.Value;
            _NavigationManager.NavigateTo($"/List/{Name}");
            await FirstLoadRecords();
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await FirstLoadRecords();
        }
        if (reference is null || firstRender)
        {
            _CNavigation.NavigationList.Clear();

            var Value = keyValuePair.Where(x => x.Key == Name).First().Value;

            reference = _CNavigation.LoadNavigation(Address: $"List/{Name}", RowDescription: Value,
            RowId: Id, Reference: reference);

            IsLoading = false;
            StateHasChanged();
        }
    }

    private async Task FirstLoadRecords()
    {
        //keyValuePair = await simpleClassRepository.GetAllTableName("Dimentions");
        var _D_Entity = await simpleClassRepository.GetAllByName("D_Entity");

        keyValuePair = _D_Entity.Select(x => new KeyValuePair<String, String>(x.PName, x.PDisplayName)).ToList();

        if (Name == null)
        {
            Name = keyValuePair.First().Key;
            _NavigationManager.NavigateTo($"/List/{Name}");
        }
        await LoadRecords();
    }

    private async Task LoadRecords()
    {
        try
        {
            Records = await simpleClassRepository.GetAllByName(Name);

            if (!String.IsNullOrEmpty(FilterTableName))
                FilterTable = await simpleClassRepository.Get(FilterTableName, FilterTableId);
        }
        catch (Exception ex)
        {
            await _JsRuntime.ToastrError((ex.InnerException is not null) ? ex.InnerException.Message : ex.Message);
        }
    }
    public async Task UpdateForm()
    {
        IsLoading = true;
        await LoadRecords();
        IsLoading = false;
    }
}
