@page "/Dimentions/Parameters/List"
@page "/Dimentions/Parameters/List/{Name}"
@page "/Dimentions/Parameters/List/{Name}/{type}/{Id:long}/{reference}"

@inject ISimpleClassRepository simpleClassRepository;
@inject IJSRuntime _jSRuntime;
@inject NavigationManager _NavigationManager;
@if (Records != null)
{
    <_DeleteConfirmation IsParntComponentProcessing="IsLoading" ConfirmationChanged="ConfirmDelete_Click"></_DeleteConfirmation>
}
<div style="direction:rtl">
    @if (keyValuePair != null && type != SD.First && type != SD.Second)
    {
        <div class="row mt-4">
            <div class="col-6">
                <div class="form-group">
                    <H3>انتخاب پارامتر</H3>
                    <select id="exampleFormControlSelect1"
                        class="form-select" value=@Name bind=@Name
                        aria-label="Default select example"
                        @onchange="SelectedProcessesChanged">
                        @foreach (var item in keyValuePair)
                        {
                            <option value="@item.Key">@item.Value</option>
                        }
                    </select>
                </div>
            </div>
        </div>
    }
    <div class="col-12">
        @if (Records != null)
        {
            <br />
            <div class="col-2 offset-2">
                @if (type == SD.First || type == SD.Second)
                {
                    <a href="@($"/{reference.Replace("*","/")}")" class="btn btn-secondary form-control">برگشت</a>
                    <br />
                    <a href="@($"/Upsert_Link/Create/{Name}/{type}/0/{Id}/{reference}")" class="btn btn-primary form-control">افزودن</a>
                }
                else
                {
                    <a href="@($"/Dimentions/Create/{Name}")" class="btn btn-primary form-control">افزودن</a>
                }
            </div>
            <br />
            @if (Records.Count() > 0)
            {
                <ListGenericTypeItems Records="@Records"
                              ConfirmationDelete="HandleDelete" type="@type" reference="@reference">
                </ListGenericTypeItems>
            }
        }
        @if (Records == null || Records.Count() == 0)
        {
            if (IsLoading)
            {
                <h1>در حال بارگیری اطلاعات ...</h1>
                @*<img src="imeges/Loading_Symbol.gif" />*@
            }
            else
            {
                <h1>هیچ ورودی یافت نشد</h1>
            }
        }
    </div>
</div>
@code {

    [Parameter]
    public long? Id { get; set; }
    [Parameter]
    public String Name { get; set; }
    [Parameter]
    public String? type { get; set; }
    [Parameter]
    public String? reference { get; set; }
    public Boolean IsLoading { get; set; } = true;
    public long DeleteidRole { get; set; }
    public IEnumerable<SimpleClass> Records { get; set; }

    public IEnumerable<KeyValuePair<string, string>> keyValuePair { get; set; }

    private async Task SelectedProcessesChanged(ChangeEventArgs e)
    {
        if (e.Value is not null)
        {
            Name = (string)e.Value;
            _NavigationManager.NavigateTo($"/Dimentions/Parameters/List/{Name}");
            await LoadRecords();
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
            await FirstLoadRecords();
    }

    private async Task FirstLoadRecords()
    {
        if (keyValuePair == null)
            keyValuePair = await simpleClassRepository.GetAllTableName("Dimentions");

        if (Name == null)
            Name = keyValuePair.First().Value;

        await LoadRecords();
    }
    private async Task LoadRecords()
    {
        IsLoading = true;
        StateHasChanged();

        var getTableType = DatabaseClass.GetTableType(Name);

        if (getTableType == SD.TableType.Links)
        {
            Records = await simpleClassRepository.GetAllLink(Name, type, Id.Value);
        }
        else
        {
            Records = await simpleClassRepository.GetAllByName(Name);
        }
        IsLoading = false;
        StateHasChanged();
    }
    public async Task HandleDelete(long id)
    {
        DeleteidRole = id;
        //var isConfirmed = await _jSRuntime.InvokeAsync<bool>("confirm", "آیا مطمئن هستید؟"); // Confirm
        //await ConfirmDelete_Click(isConfirmed);
        await _jSRuntime.InvokeVoidAsync("ShowDeleteConfirmationModal");
    }
    public async Task ConfirmDelete_Click(bool isConfirmed)
    {
        IsLoading = true;

        if (isConfirmed && DeleteidRole != 0)
        {
            await simpleClassRepository.delete(Name, DeleteidRole);
            await LoadRecords();
            await _jSRuntime.InvokeVoidAsync("HideDeleteConfirmationModal");
        }
        IsLoading = false;
    }
}
