@page "/"
@page "/List"
@page "/List/{Name}"
@page "/List/{Name}/{reference}"
@page "/List/{Name}/{FilterTableName}/{Id:long}/{reference}"
@using Cheetah.Shared.Dimentions
@inherits SharedPage

<NavigationComponent _CNavigation="@_CNavigation"></NavigationComponent>

<div class="row mb-2" style="direction:rtl">

    @if (!IsLoading)
    {
        <div class="shadow rounded p-3 form-group my-1 col-sm-8 col-md-8">
            <div class="input-group d-flex justify-content-end" style="direction:ltr">
                <select class="form-select" id="floatingSelectGrid" value=@Name bind=@Name
                    @onchange="SelectedProcessesChanged"
                        aria-describedby="basic-addon2" lang="fa" dir="rtl"
                        data-bs-toggle="tooltip" data-bs-placement="top"
                        data-bs-custom-class="custom-tooltip"
                        data-bs-delay='{"show":100, "hide":100}'
                        data-bs-animation="true"
                        data-bs-trigger="hover"
                        data-bs-title="انتخاب پارامتر">
                    @foreach (var item in keyValuePair)
                    {
                        <option value="@item.Key">@item.Value</option>
                    }
                </select>
                <div class="input-group-prepend">
                    <span class="input-group-text" style="border-radius:revert;width: 7em;"
                          lang="fa" dir="rtl">انتخاب پارامتر</span>
                </div>
            </div>
        </div>
        @if (type != nameof(LinkProperty.First) && type != nameof(LinkProperty.Second))
        {
            <div class="col-md-2 col-sm-5 my-1 btn-group" role="group">
                <!-- Button trigger modal -->
                <button type="button" class="btn btn-primary" data-bs-toggle="modal"
                        data-bs-target="#exampleModal"
                        style="align-self: center;"
                        onclick="@(()=>{listGenericTypeItems.PrepareLink(0, CrudOperation.Create);LoadData=true;})">
                    <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-database-fill-add" viewBox="0 0 16 16">
                        <path d="M12.5 16a3.5 3.5 0 1 0 0-7 3.5 3.5 0 0 0 0 7Zm.5-5v1h1a.5.5 0 0 1 0 1h-1v1a.5.5 0 0 1-1 0v-1h-1a.5.5 0 0 1 0-1h1v-1a.5.5 0 0 1 1 0ZM8 1c-1.573 0-3.022.289-4.096.777C2.875 2.245 2 2.993 2 4s.875 1.755 1.904 2.223C4.978 6.711 6.427 7 8 7s3.022-.289 4.096-.777C13.125 5.755 14 5.007 14 4s-.875-1.755-1.904-2.223C11.022 1.289 9.573 1 8 1Z" />
                        <path d="M2 7v-.839c.457.432 1.004.751 1.49.972C4.722 7.693 6.318 8 8 8s3.278-.307 4.51-.867c.486-.22 1.033-.54 1.49-.972V7c0 .424-.155.802-.411 1.133a4.51 4.51 0 0 0-4.815 1.843A12.31 12.31 0 0 1 8 10c-1.573 0-3.022-.289-4.096-.777C2.875 8.755 2 8.007 2 7Zm6.257 3.998L8 11c-1.682 0-3.278-.307-4.51-.867-.486-.22-1.033-.54-1.49-.972V10c0 1.007.875 1.755 1.904 2.223C4.978 12.711 6.427 13 8 13h.027a4.552 4.552 0 0 1 .23-2.002Zm-.002 3L8 14c-1.682 0-3.278-.307-4.51-.867-.486-.22-1.033-.54-1.49-.972V13c0 1.007.875 1.755 1.904 2.223C4.978 15.711 6.427 16 8 16c.536 0 1.058-.034 1.555-.097a4.507 4.507 0 0 1-1.3-1.905Z" />
                    </svg>
                    افزودن
                </button>
            </div>
        }
    }

    @if (!String.IsNullOrEmpty(Name))
    {
        @if (Record is not null)
        {
            <div class="shadow rounded p-3 form-group my-2 col-sm-12 col-md-6">
                <div class="input-group d-flex justify-content-end" style="direction:ltr">
                    <span class="form-control"> @(keyValuePair.Where(x => x.Key == FilterTableName).Single().Value + ":" + Record.PDisplayName)</span>
                    <div class="input-group-prepend">
                        <span class="input-group-text" style="border-radius:revert;width: 7em;font-size:large;"
                              lang="fa" dir="rtl">فیلتر</span>
                    </div>
                </div>
            </div>
        }

        <ListGenericTypeItems Records="@Records"
                          reference="@reference" Name="@Name"
                          ParentCallback="UpdateForm" LoadData="@LoadData"
                          type="@type" @ref="listGenericTypeItems">
        </ListGenericTypeItems>
    }
</div>
<CLoading IsLoading="@IsLoading" AnyRecord="@Records.Any()"></CLoading>
@code {
    private ListGenericTypeItems listGenericTypeItems;

    private async Task SelectedProcessesChanged(ChangeEventArgs e)
    {
        if (e.Value is not null)
        {
            Name = (string)e.Value;
            //_NavigationManager.NavigateTo($"/List/{Name}", forceLoad: true, replace: true);
            _NavigationManager.NavigateTo($"/List/{Name}");
            await FirstLoadRecords();
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await FirstLoadRecords();

        }
        if (reference is null || firstRender)
        {
            _CNavigation.NavigationList.Clear();

            var Value = keyValuePair.Where(x => x.Key == Name).First().Value;

            reference = _CNavigation.LoadNavigation(Address: $"List/{Name}", RowDescription: Value,
            RowId: Id, Reference: reference);

            IsLoading = false;
            StateHasChanged();
        }

    }

    private async Task FirstLoadRecords()
    {
        var _D_Entity = await simpleClassRepository.GetAllByName(nameof(D_Entity));

        keyValuePair = _D_Entity.Select(x => new KeyValuePair<String, String>(x.PName, x.PDisplayName)).ToList();

        if (Name == null)
        {
            Name = keyValuePair.First().Key;
            _NavigationManager.NavigateTo($"/List/{Name}");
        }
        await LoadRecords();

    }

    private async Task LoadRecords()
    {
        try
        {
            LoadData = false;
            Records = await simpleClassRepository.GetAllByName(Name);

            if (!String.IsNullOrEmpty(FilterTableName))
                Record = await simpleClassRepository.Get(FilterTableName, Id);
        }
        catch (Exception ex)
        {
            await _JsRuntime.ToastrError((ex.InnerException is not null) ? ex.InnerException.Message : ex.Message);
        }
    }

    public async Task UpdateForm()
    {
        IsLoading = true;
        await LoadRecords();
        IsLoading = false;
        await _JsRuntime.InvokeVoidAsync("CreateToolTip", "Create");
    }
}
