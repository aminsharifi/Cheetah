@page "/Dimentions/Parameters/List"
@page "/Dimentions/Parameters/List/{Name}"
@page "/Dimentions/Parameters/List/{Name}/{type}/{Id:long}"
@using Cheetah_Common;
@using Cheetah_DataAccess.Data;
@using Cheetah_DataAccess.Dimentions;
@using Cheetah_DataAccess.Links;

@inject IGeneralRepository<D_Area> iD_AreaRepository;
@inject IGeneralRepository<D_FieldType> iD_FieldTypeRepository;
@inject IGeneralRepository<D_Location> iD_LocationRepository;
@inject IGeneralRepository<D_Operand> iD_OperandRepository;
@inject IGeneralRepository<D_ParameterList> iD_ParameterListRepository;
@inject IGeneralRepository<D_ParameterType> iD_ParameterTypeRepository;
@inject IGeneralRepository<D_Position> iD_PositionRepository;
@inject IGeneralRepository<D_ProcessEndorsement> iD_ProcessEndorsementRepository;
@inject IGeneralRepository<D_ProcessState> iD_ProcessStateRepository;
@inject IGeneralRepository<D_RequestTitle> iD_RequestTitleRepository;
@inject IGeneralRepository<D_Role> iD_RoleRepository;
@inject IGeneralRepository<D_Skill> iD_SkillRepository;
@inject IGeneralRepository<D_SubRequestTitle> iD_SubRequestTitleRepository;
@inject IGeneralRepository<D_UnitType> iD_UnitTypeRepository;
@inject IGeneralRepository<D_User> iD_UserRepository;
@inject IGeneralLinkRepository<L_UserArea> iL_UserAreaRepository;
@inject IJSRuntime _jSRuntime;
@inject NavigationManager _NavigationManager;

<_DeleteConfirmation IsParntComponentProcessing="IsLoading" ConfirmationChanged="ConfirmDelete_Click"></_DeleteConfirmation>

<div style="direction:rtl">
    @if (type != SD.First && type != SD.Second)
    {
        <div class="row mt-4">
            <div class="col-6">
                <h4 class="card-title text-primary">انتخاب پارامتر</h4>
                <select value=@Name bind=@Name @onchange="SelectedProcessesChanged">
                    <option value="">یک جدول را انتخاب نمایید</option>
                    <option value="D_Area">ناحیه</option>
                    <option value="D_FieldType">نوع فیلد</option>
                    <option value="D_Location">موقعیت</option>
                    <option value="D_Operand">عملگر</option>
                    <option value="D_ParameterList">لیست پارامتر</option>
                    <option value="D_ParameterType">نوع پارامتر</option>
                    <option value="D_Position">موقعیت</option>
                    <option value="D_ProcessEndorsement">تاییدها</option>
                    <option value="D_ProcessState">وضعیت فرآیند</option>
                    <option value="D_RequestTitle">نوع درخواست</option>
                    <option value="D_Role">نقش</option>
                    <option value="D_Skill">مهارت</option>
                    <option value="D_SubRequestTitle">زیرفرآیند</option>
                    <option value="D_UnitType">نوع واحد</option>
                    <option value="D_User">کاربر</option>
                </select>
            </div>
        </div>
    }
    <div class="col-12">
        @if (Records != null)
        {
            <br />
            <div class="col-2 offset-2">
                @if (type == SD.First || type == SD.Second)
                {
                    <a href="@($"/Upsert_Link/Create/{Name}/{type}/0/{Id}/ddddd")" class="btn btn-primary form-control">افزودن</a>
                }
                else
                {
                    <a href="@($"/Dimentions/Create/{Name}")" class="btn btn-primary form-control">افزودن</a>
                }
            </div>
            <br />
            <ListGenericTypeItems Records="@Records" 
                ConfirmationDelete="HandleDelete" type="@type">
            </ListGenericTypeItems>
        }
        else
        {
            if (IsLoading)
            {
                <h1>در حال بارگیری اطلاعات ...</h1>
                @*<img src="imeges/Loading_Symbol.gif" />*@
            }
            else
            {
                <h1>هیچ ورودی یافت نشد</h1>
            }
        }
    </div>
</div>
@code {

    [Parameter]
    public long? Id { get; set; }
    [Parameter]
    public String Name { get; set; }
    [Parameter]
    public String? type { get; set; }

    public dynamic Records { get; set; }

    private async Task SelectedProcessesChanged(ChangeEventArgs e)
    {
        if (e.Value is not null)
        {
            Name = (string)e.Value;
            _NavigationManager.NavigateTo($"/Dimentions/Parameters/List/{Name}");
            await LoadRecords();
        }
    }

    public Boolean IsLoading { get; set; } = false;
    public long DeleteidRole { get; set; }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
            await LoadRecords();
    }

    private async Task LoadRecords()
    {
        IsLoading = true;
        StateHasChanged();
        switch (Name)
        {
            case "D_Area":
                Records = await iD_AreaRepository.GetAll();
                break;
            case "D_FieldType":
                Records = await iD_FieldTypeRepository.GetAll();
                break;
            case "D_Location":
                Records = await iD_LocationRepository.GetAll();
                break;
            case "D_Operand":
                Records = await iD_OperandRepository.GetAll();
                break;
            case "D_ParameterList":
                Records = await iD_ParameterListRepository.GetAll();
                break;
            case "D_ParameterType":
                Records = await iD_ParameterTypeRepository.GetAll();
                break;
            case "D_Position":
                Records = await iD_PositionRepository.GetAll();
                break;
            case "D_ProcessEndorsement":
                Records = await iD_ProcessEndorsementRepository.GetAll();
                break;
            case "D_ProcessState":
                Records = await iD_ProcessStateRepository.GetAll();
                break;
            case "D_RequestTitle":
                Records = await iD_RequestTitleRepository.GetAll();
                break;
            case "D_Role":
                Records = await iD_RoleRepository.GetAll();
                break;
            case "D_Skill":
                Records = await iD_SkillRepository.GetAll();
                break;
            case "D_SubRequestTitle":
                Records = await iD_SubRequestTitleRepository.GetAll();
                break;
            case "D_UnitType":
                Records = await iD_UnitTypeRepository.GetAll();
                break;
            case "D_User":
                Records = await iD_UserRepository.GetAll();
                break;
            case "L_UserArea":
                if (type == SD.First)
                    Records = await iL_UserAreaRepository.GetAllFirst(Id.Value);
                if (type == SD.Second)
                    Records = await iL_UserAreaRepository.GetAllSecond(Id.Value);
                break;

            default:
                Records = null;
                break;
        }
        IsLoading = false;
        StateHasChanged();
    }
    private async void HandleDelete(long id)
    {
        DeleteidRole = id;
        var isConfirmed = await _jSRuntime.InvokeAsync<bool>("confirm", "آیا مطمئن هستید؟"); // Confirm
        if (isConfirmed)
        {
            IsLoading = true;
            if (isConfirmed && DeleteidRole != 0)
            {
                switch (Name)
                {
                    case "D_Area":
                        await iD_AreaRepository.delete(DeleteidRole);
                        break;
                    case "D_FieldType":
                        await iD_FieldTypeRepository.delete(DeleteidRole);
                        break;
                    case "D_Location":
                        await iD_LocationRepository.delete(DeleteidRole);
                        break;
                    case "D_Operand":
                        await iD_OperandRepository.delete(DeleteidRole);
                        break;
                    case "D_ParameterList":
                        await iD_ParameterListRepository.delete(DeleteidRole);
                        break;
                    case "D_ParameterType":
                        await iD_ParameterTypeRepository.delete(DeleteidRole);
                        break;
                    case "D_Position":
                        await iD_PositionRepository.delete(DeleteidRole);
                        break;
                    case "D_ProcessEndorsement":
                        await iD_ProcessEndorsementRepository.delete(DeleteidRole);
                        break;
                    case "D_ProcessState":
                        await iD_ProcessStateRepository.delete(DeleteidRole);
                        break;
                    case "D_RequestTitle":
                        await iD_RequestTitleRepository.delete(DeleteidRole);
                        break;
                    case "D_Role":
                        await iD_RoleRepository.delete(DeleteidRole);
                        break;
                    case "D_Skill":
                        await iD_SkillRepository.delete(DeleteidRole);
                        break;
                    case "D_SubRequestTitle":
                        await iD_SubRequestTitleRepository.delete(DeleteidRole);
                        break;
                    case "D_UnitType":
                        await iD_UnitTypeRepository.delete(DeleteidRole);
                        break;
                    case "D_User":
                        await iD_UserRepository.delete(DeleteidRole);
                        break;
                    case "L_UserArea":
                        Records = await iL_UserAreaRepository.delete(DeleteidRole);
                        break;
                    default:

                        break;
                }
                await LoadRecords();
                await _jSRuntime.InvokeVoidAsync("HideDeleteConfirmationModal");
            }
            IsLoading = false;
        }
    }
    public async Task ConfirmDelete_Click(bool isConfirmed)
    {
        IsLoading = true;
        if (isConfirmed && DeleteidRole != 0)
        {
            switch (Name)
            {
                case "D_Area":
                    await iD_AreaRepository.delete(DeleteidRole);
                    break;
                case "D_FieldType":
                    await iD_FieldTypeRepository.delete(DeleteidRole);
                    break;
                case "D_Location":
                    await iD_LocationRepository.delete(DeleteidRole);
                    break;
                case "D_Operand":
                    await iD_OperandRepository.delete(DeleteidRole);
                    break;
                case "D_ParameterList":
                    await iD_ParameterListRepository.delete(DeleteidRole);
                    break;
                case "D_ParameterType":
                    await iD_ParameterTypeRepository.delete(DeleteidRole);
                    break;
                case "D_Position":
                    await iD_PositionRepository.delete(DeleteidRole);
                    break;
                case "D_ProcessEndorsement":
                    await iD_ProcessEndorsementRepository.delete(DeleteidRole);
                    break;
                case "D_ProcessState":
                    await iD_ProcessStateRepository.delete(DeleteidRole);
                    break;
                case "D_RequestTitle":
                    await iD_RequestTitleRepository.delete(DeleteidRole);
                    break;
                case "D_Role":
                    await iD_RoleRepository.delete(DeleteidRole);
                    break;
                case "D_Skill":
                    await iD_SkillRepository.delete(DeleteidRole);
                    break;
                case "D_SubRequestTitle":
                    Records = await iD_SubRequestTitleRepository.delete(DeleteidRole);
                    break;
                case "D_UnitType":
                    await iD_UnitTypeRepository.delete(DeleteidRole);
                    break;
                case "D_User":
                    await iD_UserRepository.delete(DeleteidRole);
                    break;
                case "L_UserArea":
                    Records = await iL_UserAreaRepository.delete(DeleteidRole);
                    break;
            }
            await LoadRecords();
            await _jSRuntime.InvokeVoidAsync("HideDeleteConfirmationModal");
        }
        IsLoading = false;
    }
}